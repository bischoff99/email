{"version":3,"file":"discover-dataset-fields-BEnyqPSq.js","names":["apiService: SentryApiService","organizationSlug: string","dataset: DatasetType","options: {\n    projectId?: string;\n    includeExamples?: boolean;\n  }","projectId?: string","key: string","dataset: string","commonExamples: Record<string, string[]>","issueExamples: Record<string, string[]>","eventExamples: Record<string, string[]>"],"sources":["../src/agent-tools/discover-dataset-fields.ts"],"sourcesContent":["import { tool } from \"ai\";\nimport { z } from \"zod\";\nimport type { SentryApiService } from \"../api-client\";\n\nexport type DatasetType = \"events\" | \"errors\" | \"search_issues\";\n\nexport interface DatasetField {\n  key: string;\n  name: string;\n  totalValues: number;\n  examples?: string[];\n}\n\nexport interface DatasetFieldsResult {\n  dataset: string;\n  fields: DatasetField[];\n  commonPatterns: Array<{ pattern: string; description: string }>;\n}\n\n/**\n * Discover available fields for a dataset by querying Sentry's tags API\n */\nexport async function discoverDatasetFields(\n  apiService: SentryApiService,\n  organizationSlug: string,\n  dataset: DatasetType,\n  options: {\n    projectId?: string;\n    includeExamples?: boolean;\n  } = {},\n): Promise<DatasetFieldsResult> {\n  const { projectId, includeExamples = false } = options;\n\n  // Get available tags for the dataset\n  const tags = await apiService.listTags({\n    organizationSlug,\n    dataset,\n    project: projectId,\n    statsPeriod: \"14d\",\n  });\n\n  // Filter out internal Sentry tags and format\n  const fields = tags\n    .filter((tag) => !tag.key.startsWith(\"sentry:\"))\n    .map((tag) => ({\n      key: tag.key,\n      name: tag.name,\n      totalValues: tag.totalValues,\n      examples: includeExamples\n        ? getFieldExamples(tag.key, dataset)\n        : undefined,\n    }));\n\n  return {\n    dataset,\n    fields,\n    commonPatterns: getCommonPatterns(dataset),\n  };\n}\n\n/**\n * Create a tool for discovering available fields in a dataset\n */\nexport function createDatasetFieldsTool(\n  apiService: SentryApiService,\n  organizationSlug: string,\n  dataset: DatasetType,\n  projectId?: string,\n) {\n  return tool({\n    description: `Discover available fields for ${dataset} searches in Sentry`,\n    parameters: z.object({\n      includeExamples: z\n        .boolean()\n        .describe(\n          \"Include example values for each field (set to false if you don't need examples)\",\n        ),\n    }),\n    execute: async ({ includeExamples }) => {\n      return discoverDatasetFields(apiService, organizationSlug, dataset, {\n        projectId,\n        includeExamples,\n      });\n    },\n  });\n}\n\n/**\n * Get example values for common fields\n */\nexport function getFieldExamples(\n  key: string,\n  dataset: string,\n): string[] | undefined {\n  const commonExamples: Record<string, string[]> = {\n    level: [\"error\", \"warning\", \"info\", \"debug\", \"fatal\"],\n    environment: [\"production\", \"staging\", \"development\"],\n    release: [\"v1.0.0\", \"latest\", \"backend@1.2.3\"],\n    user: [\"user123\", \"email@example.com\"],\n  };\n\n  const issueExamples: Record<string, string[]> = {\n    ...commonExamples,\n    assignedOrSuggested: [\"email@example.com\", \"team-slug\", \"me\"],\n    is: [\"unresolved\", \"resolved\", \"ignored\"],\n  };\n\n  const eventExamples: Record<string, string[]> = {\n    ...commonExamples,\n    \"http.method\": [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n    \"http.status_code\": [\"200\", \"404\", \"500\"],\n    \"db.system\": [\"postgresql\", \"mysql\", \"redis\"],\n  };\n\n  if (dataset === \"search_issues\") {\n    return issueExamples[key];\n  }\n  if (dataset === \"events\" || dataset === \"errors\") {\n    return eventExamples[key];\n  }\n\n  return commonExamples[key];\n}\n\n/**\n * Get common search patterns for a dataset\n */\nexport function getCommonPatterns(dataset: string) {\n  if (dataset === \"search_issues\") {\n    return [\n      { pattern: \"is:unresolved\", description: \"Open issues\" },\n      { pattern: \"is:resolved\", description: \"Closed issues\" },\n      { pattern: \"level:error\", description: \"Error level issues\" },\n      {\n        pattern: \"firstSeen:-24h\",\n        description: \"New issues from last 24 hours\",\n      },\n      {\n        pattern: \"userCount:>100\",\n        description: \"Affecting more than 100 users\",\n      },\n    ];\n  }\n  if (dataset === \"events\" || dataset === \"errors\") {\n    return [\n      { pattern: \"level:error\", description: \"Error events\" },\n      { pattern: \"environment:production\", description: \"Production events\" },\n      { pattern: \"timestamp:-1h\", description: \"Events from last hour\" },\n      { pattern: \"has:http.method\", description: \"HTTP requests\" },\n      { pattern: \"has:db.statement\", description: \"Database queries\" },\n    ];\n  }\n\n  return [];\n}\n"],"mappings":";;;;;;;AAsBA,eAAsB,sBACpBA,YACAC,kBACAC,SACAC,UAGI,CAAE,GACwB;CAC9B,MAAM,EAAE,WAAW,kBAAkB,OAAO,GAAG;CAG/C,MAAM,OAAO,MAAM,WAAW,SAAS;EACrC;EACA;EACA,SAAS;EACT,aAAa;CACd,EAAC;CAGF,MAAM,SAAS,KACZ,OAAO,CAAC,SAAS,IAAI,IAAI,WAAW,UAAU,CAAC,CAC/C,IAAI,CAAC,SAAS;EACb,KAAK,IAAI;EACT,MAAM,IAAI;EACV,aAAa,IAAI;EACjB,UAAU,kBACN,iBAAiB,IAAI,KAAK,QAAQ;CAEvC,GAAE;AAEL,QAAO;EACL;EACA;EACA,gBAAgB,kBAAkB,QAAQ;CAC3C;AACF;;;;AAKD,SAAgB,wBACdH,YACAC,kBACAC,SACAE,WACA;AACA,QAAO,KAAK;EACV,cAAc,gCAAgC,QAAQ;EACtD,YAAY,EAAE,OAAO,EACnB,iBAAiB,EACd,SAAS,CACT,SACC,kFACD,CACJ,EAAC;EACF,SAAS,OAAO,EAAE,iBAAiB,KAAK;AACtC,UAAO,sBAAsB,YAAY,kBAAkB,SAAS;IAClE;IACA;GACD,EAAC;EACH;CACF,EAAC;AACH;;;;AAKD,SAAgB,iBACdC,KACAC,SACsB;CACtB,MAAMC,iBAA2C;EAC/C,OAAO;GAAC;GAAS;GAAW;GAAQ;GAAS;EAAQ;EACrD,aAAa;GAAC;GAAc;GAAW;EAAc;EACrD,SAAS;GAAC;GAAU;GAAU;EAAgB;EAC9C,MAAM,CAAC,WAAW,mBAAoB;CACvC;CAED,MAAMC,gBAA0C;EAC9C,GAAG;EACH,qBAAqB;GAAC;GAAqB;GAAa;EAAK;EAC7D,IAAI;GAAC;GAAc;GAAY;EAAU;CAC1C;CAED,MAAMC,gBAA0C;EAC9C,GAAG;EACH,eAAe;GAAC;GAAO;GAAQ;GAAO;EAAS;EAC/C,oBAAoB;GAAC;GAAO;GAAO;EAAM;EACzC,aAAa;GAAC;GAAc;GAAS;EAAQ;CAC9C;AAED,KAAI,YAAY,gBACd,QAAO,cAAc;AAEvB,KAAI,YAAY,YAAY,YAAY,SACtC,QAAO,cAAc;AAGvB,QAAO,eAAe;AACvB;;;;AAKD,SAAgB,kBAAkBH,SAAiB;AACjD,KAAI,YAAY,gBACd,QAAO;EACL;GAAE,SAAS;GAAiB,aAAa;EAAe;EACxD;GAAE,SAAS;GAAe,aAAa;EAAiB;EACxD;GAAE,SAAS;GAAe,aAAa;EAAsB;EAC7D;GACE,SAAS;GACT,aAAa;EACd;EACD;GACE,SAAS;GACT,aAAa;EACd;CACF;AAEH,KAAI,YAAY,YAAY,YAAY,SACtC,QAAO;EACL;GAAE,SAAS;GAAe,aAAa;EAAgB;EACvD;GAAE,SAAS;GAA0B,aAAa;EAAqB;EACvE;GAAE,SAAS;GAAiB,aAAa;EAAyB;EAClE;GAAE,SAAS;GAAmB,aAAa;EAAiB;EAC5D;GAAE,SAAS;GAAoB,aAAa;EAAoB;CACjE;AAGH,QAAO,CAAE;AACV"}