{"version":3,"file":"seer-utils-C7Kv0gr8.cjs","names":["status: string","step: z.infer<typeof AutofixRunStepSchema>","typedStep"],"sources":["../src/tools/utils/seer-utils.ts"],"sourcesContent":["import type { z } from \"zod\";\nimport type {\n  AutofixRunStepSchema,\n  AutofixRunStepRootCauseAnalysisSchema,\n  AutofixRunStepSolutionSchema,\n  AutofixRunStepDefaultSchema,\n} from \"../../api-client/index\";\n\nexport const SEER_POLLING_INTERVAL = 5000; // 5 seconds\nexport const SEER_TIMEOUT = 5 * 60 * 1000; // 5 minutes\nexport const SEER_MAX_RETRIES = 3; // Maximum retries for transient failures\nexport const SEER_INITIAL_RETRY_DELAY = 1000; // 1 second initial retry delay\n\nexport function getStatusDisplayName(status: string): string {\n  switch (status) {\n    case \"COMPLETED\":\n      return \"Complete\";\n    case \"FAILED\":\n    case \"ERROR\":\n      return \"Failed\";\n    case \"CANCELLED\":\n      return \"Cancelled\";\n    case \"NEED_MORE_INFORMATION\":\n      return \"Needs More Information\";\n    case \"WAITING_FOR_USER_RESPONSE\":\n      return \"Waiting for Response\";\n    case \"PROCESSING\":\n      return \"Processing\";\n    case \"IN_PROGRESS\":\n      return \"In Progress\";\n    default:\n      return status;\n  }\n}\n\n/**\n * Check if an autofix status is terminal (no more updates expected)\n */\nexport function isTerminalStatus(status: string): boolean {\n  return [\n    \"COMPLETED\",\n    \"FAILED\",\n    \"ERROR\",\n    \"CANCELLED\",\n    \"NEED_MORE_INFORMATION\",\n    \"WAITING_FOR_USER_RESPONSE\",\n  ].includes(status);\n}\n\n/**\n * Check if an autofix status requires human intervention\n */\nexport function isHumanInterventionStatus(status: string): boolean {\n  return (\n    status === \"NEED_MORE_INFORMATION\" || status === \"WAITING_FOR_USER_RESPONSE\"\n  );\n}\n\n/**\n * Get guidance message for human intervention states\n */\nexport function getHumanInterventionGuidance(status: string): string {\n  if (status === \"NEED_MORE_INFORMATION\") {\n    return \"\\nSeer needs additional information to continue the analysis. Please review the insights above and consider providing more context.\\n\";\n  }\n  if (status === \"WAITING_FOR_USER_RESPONSE\") {\n    return \"\\nSeer is waiting for your response to proceed. Please review the analysis and provide feedback.\\n\";\n  }\n  return \"\";\n}\n\nexport function getOutputForAutofixStep(\n  step: z.infer<typeof AutofixRunStepSchema>,\n) {\n  let output = `## ${step.title}\\n\\n`;\n\n  if (step.status === \"FAILED\") {\n    output += `**Sentry hit an error completing this step.\\n\\n`;\n    return output;\n  }\n\n  if (step.status !== \"COMPLETED\") {\n    output += `**Sentry is still working on this step. Please check back in a minute.**\\n\\n`;\n    return output;\n  }\n\n  if (step.type === \"root_cause_analysis\") {\n    const typedStep = step as z.infer<\n      typeof AutofixRunStepRootCauseAnalysisSchema\n    >;\n\n    for (const cause of typedStep.causes) {\n      if (cause.description) {\n        output += `${cause.description}\\n\\n`;\n      }\n      for (const entry of cause.root_cause_reproduction) {\n        output += `**${entry.title}**\\n\\n`;\n        output += `${entry.code_snippet_and_analysis}\\n\\n`;\n      }\n    }\n    return output;\n  }\n\n  if (step.type === \"solution\") {\n    const typedStep = step as z.infer<typeof AutofixRunStepSolutionSchema>;\n    output += `${typedStep.description}\\n\\n`;\n    for (const entry of typedStep.solution) {\n      output += `**${entry.title}**\\n`;\n      output += `${entry.code_snippet_and_analysis}\\n\\n`;\n    }\n\n    if (typedStep.status === \"FAILED\") {\n      output += `**Sentry hit an error completing this step.\\n\\n`;\n    } else if (typedStep.status !== \"COMPLETED\") {\n      output += `**Sentry is still working on this step.**\\n\\n`;\n    }\n\n    return output;\n  }\n\n  const typedStep = step as z.infer<typeof AutofixRunStepDefaultSchema>;\n  if (typedStep.insights && typedStep.insights.length > 0) {\n    for (const entry of typedStep.insights) {\n      output += `**${entry.insight}**\\n`;\n      output += `${entry.justification}\\n\\n`;\n    }\n  } else if (step.output_stream) {\n    output += `${step.output_stream}\\n`;\n  }\n\n  return output;\n}\n"],"mappings":";;AAQA,MAAa,wBAAwB;AACrC,MAAa,eAAe,IAAI,KAAK;AACrC,MAAa,mBAAmB;AAChC,MAAa,2BAA2B;AAExC,SAAgB,qBAAqBA,QAAwB;AAC3D,SAAQ,QAAR;EACE,KAAK,YACH,QAAO;EACT,KAAK;EACL,KAAK,QACH,QAAO;EACT,KAAK,YACH,QAAO;EACT,KAAK,wBACH,QAAO;EACT,KAAK,4BACH,QAAO;EACT,KAAK,aACH,QAAO;EACT,KAAK,cACH,QAAO;EACT,QACE,QAAO;CACV;AACF;;;;AAKD,SAAgB,iBAAiBA,QAAyB;AACxD,QAAO;EACL;EACA;EACA;EACA;EACA;EACA;CACD,EAAC,SAAS,OAAO;AACnB;;;;AAKD,SAAgB,0BAA0BA,QAAyB;AACjE,QACE,WAAW,2BAA2B,WAAW;AAEpD;;;;AAKD,SAAgB,6BAA6BA,QAAwB;AACnE,KAAI,WAAW,wBACb,QAAO;AAET,KAAI,WAAW,4BACb,QAAO;AAET,QAAO;AACR;AAED,SAAgB,wBACdC,MACA;CACA,IAAI,UAAU,KAAK,KAAK,MAAM;AAE9B,KAAI,KAAK,WAAW,UAAU;AAC5B,aAAW;AACX,SAAO;CACR;AAED,KAAI,KAAK,WAAW,aAAa;AAC/B,aAAW;AACX,SAAO;CACR;AAED,KAAI,KAAK,SAAS,uBAAuB;EACvC,MAAMC,cAAY;AAIlB,OAAK,MAAM,SAASA,YAAU,QAAQ;AACpC,OAAI,MAAM,YACR,cAAa,MAAM,YAAY;AAEjC,QAAK,MAAM,SAAS,MAAM,yBAAyB;AACjD,eAAW,IAAI,MAAM,MAAM;AAC3B,iBAAa,MAAM,0BAA0B;GAC9C;EACF;AACD,SAAO;CACR;AAED,KAAI,KAAK,SAAS,YAAY;EAC5B,MAAMA,cAAY;AAClB,eAAaA,YAAU,YAAY;AACnC,OAAK,MAAM,SAASA,YAAU,UAAU;AACtC,cAAW,IAAI,MAAM,MAAM;AAC3B,gBAAa,MAAM,0BAA0B;EAC9C;AAED,MAAIA,YAAU,WAAW,SACvB,YAAW;WACFA,YAAU,WAAW,YAC9B,YAAW;AAGb,SAAO;CACR;CAED,MAAM,YAAY;AAClB,KAAI,UAAU,YAAY,UAAU,SAAS,SAAS,EACpD,MAAK,MAAM,SAAS,UAAU,UAAU;AACtC,aAAW,IAAI,MAAM,QAAQ;AAC7B,eAAa,MAAM,cAAc;CAClC;UACQ,KAAK,cACd,cAAa,KAAK,cAAc;AAGlC,QAAO;AACR"}