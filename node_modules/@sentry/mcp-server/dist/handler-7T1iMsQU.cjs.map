{"version":3,"file":"handler-7T1iMsQU.cjs","names":["ParamOrganizationSlug","context: ServerContext","projectId: string | undefined","UserInputError","RECOMMENDED_FIELDS","fields: string[]","timeParams: { statsPeriod?: string; start?: string; end?: string }","eventsResponse: unknown","ApiError","response: unknown","data: unknown"],"sources":["../src/tools/search-events/handler.ts"],"sourcesContent":["import { z } from \"zod\";\nimport { setTag } from \"@sentry/core\";\nimport { defineTool } from \"../utils/defineTool\";\nimport {\n  apiServiceFromContext,\n  withApiErrorHandling,\n} from \"../utils/api-utils\";\nimport type { ServerContext } from \"../../types\";\nimport {\n  ParamOrganizationSlug,\n  ParamRegionUrl,\n  ParamProjectSlug,\n} from \"../../schema\";\nimport { translateQuery } from \"./agent\";\nimport {\n  formatErrorResults,\n  formatLogResults,\n  formatSpanResults,\n} from \"./formatters\";\nimport { RECOMMENDED_FIELDS } from \"./config\";\nimport { UserInputError } from \"../../errors\";\nimport type { SentryApiService } from \"../../api-client\";\nimport { ApiError } from \"../../api-client\";\n\nexport default defineTool({\n  name: \"search_events\",\n  description: [\n    \"Search for events AND perform counts/aggregations - the ONLY tool for statistics and counts.\",\n    \"\",\n    \"Supports TWO query types:\",\n    \"1. AGGREGATIONS (counts, sums, averages): 'how many errors', 'count of issues', 'total tokens'\",\n    \"2. Individual events with timestamps: 'show me error logs from last hour'\",\n    \"\",\n    \"üî¢ USE THIS FOR ALL COUNTS/STATISTICS:\",\n    \"- 'how many errors today' ‚Üí returns count\",\n    \"- 'count of database failures' ‚Üí returns count\",\n    \"- 'total number of issues' ‚Üí returns count\",\n    \"- 'average response time' ‚Üí returns avg()\",\n    \"- 'sum of tokens used' ‚Üí returns sum()\",\n    \"\",\n    \"üìã ALSO USE FOR INDIVIDUAL EVENTS:\",\n    \"- 'error logs from last hour' ‚Üí returns event list\",\n    \"- 'database errors with timestamps' ‚Üí returns event list\",\n    \"- 'trace spans for slow API calls' ‚Üí returns span list\",\n    \"\",\n    \"Dataset Selection (AI automatically chooses):\",\n    \"- errors: Exception/crash events\",\n    \"- logs: Log entries\",\n    \"- spans: Performance data, AI/LLM calls, token usage\",\n    \"\",\n    \"‚ùå DO NOT USE for grouped issue lists ‚Üí use search_issues\",\n    \"\",\n    \"<examples>\",\n    \"search_events(organizationSlug='my-org', naturalLanguageQuery='how many errors today')\",\n    \"search_events(organizationSlug='my-org', naturalLanguageQuery='count of database failures this week')\",\n    \"search_events(organizationSlug='my-org', naturalLanguageQuery='total tokens used by model')\",\n    \"search_events(organizationSlug='my-org', naturalLanguageQuery='error logs from the last hour')\",\n    \"</examples>\",\n    \"\",\n    \"<hints>\",\n    \"- If the user passes a parameter in the form of name/otherName, it's likely in the format of <organizationSlug>/<projectSlug>.\",\n    \"- Parse org/project notation directly without calling find_organizations or find_projects.\",\n    \"</hints>\",\n  ].join(\"\\n\"),\n  inputSchema: {\n    organizationSlug: ParamOrganizationSlug,\n    naturalLanguageQuery: z\n      .string()\n      .trim()\n      .min(1)\n      .describe(\"Natural language description of what you want to search for\"),\n    projectSlug: ParamProjectSlug.optional(),\n    regionUrl: ParamRegionUrl.optional(),\n    limit: z\n      .number()\n      .min(1)\n      .max(100)\n      .optional()\n      .default(10)\n      .describe(\"Maximum number of results to return\"),\n    includeExplanation: z\n      .boolean()\n      .optional()\n      .default(false)\n      .describe(\"Include explanation of how the query was translated\"),\n  },\n  async handler(params, context: ServerContext) {\n    const apiService = apiServiceFromContext(context, {\n      regionUrl: params.regionUrl,\n    });\n    const organizationSlug = params.organizationSlug;\n\n    setTag(\"organization.slug\", organizationSlug);\n    if (params.projectSlug) setTag(\"project.slug\", params.projectSlug);\n\n    // The agent will determine the dataset based on the query content\n\n    // Convert project slug to ID if needed - we need this for attribute fetching\n    let projectId: string | undefined;\n    if (params.projectSlug) {\n      const project = await withApiErrorHandling(\n        () =>\n          apiService.getProject({\n            organizationSlug,\n            projectSlugOrId: params.projectSlug!,\n          }),\n        {\n          organizationSlug,\n          projectSlugOrId: params.projectSlug,\n        },\n      );\n      projectId = String(project.id);\n    }\n\n    // Translate the natural language query using Search Events Agent\n    // The agent will determine the dataset and fetch the appropriate attributes\n    const parsed = await translateQuery(\n      {\n        naturalLanguageQuery: params.naturalLanguageQuery,\n        organizationSlug,\n        projectId,\n      },\n      apiService,\n      organizationSlug,\n      projectId,\n    );\n\n    // Handle Search Events Agent errors first\n    if (parsed.error) {\n      throw new UserInputError(\n        `Search Events Agent could not translate query \"${params.naturalLanguageQuery}\". Error: ${parsed.error}`,\n      );\n    }\n\n    // Get the dataset chosen by the agent (should be defined when no error)\n    const dataset = parsed.dataset!;\n\n    // Get recommended fields for this dataset (for fallback when no fields are provided)\n    const recommendedFields = RECOMMENDED_FIELDS[dataset];\n\n    // Validate that sort parameter was provided\n    if (!parsed.sort) {\n      throw new UserInputError(\n        `Search Events Agent response missing required 'sort' parameter. Received: ${JSON.stringify(parsed, null, 2)}. The agent must specify how to sort results (e.g., '-timestamp' for newest first, '-count()' for highest count).`,\n      );\n    }\n\n    // Use empty string as default if no query is provided\n    // This allows fetching all recent events when no specific filter is needed\n    const sentryQuery = parsed.query || \"\";\n    const requestedFields = parsed.fields || [];\n\n    // Determine if this is an aggregate query by checking if any field contains a function\n    const isAggregateQuery = requestedFields.some(\n      (field) => field.includes(\"(\") && field.includes(\")\"),\n    );\n\n    // For aggregate queries, we should only use the fields provided by the AI\n    // For non-aggregate queries, we can use recommended fields as fallback\n    let fields: string[];\n\n    if (isAggregateQuery) {\n      // For aggregate queries, fields must be provided and should only include\n      // aggregate functions and groupBy fields\n      if (!requestedFields || requestedFields.length === 0) {\n        throw new UserInputError(\n          `AI response missing required 'fields' for aggregate query. The AI must specify which fields to return. For aggregate queries, include only the aggregate functions (like count(), avg()) and groupBy fields.`,\n        );\n      }\n      fields = requestedFields;\n    } else {\n      // For non-aggregate queries, use AI-provided fields or fall back to recommended fields\n      fields =\n        requestedFields && requestedFields.length > 0\n          ? requestedFields\n          : recommendedFields.basic;\n    }\n\n    // Use the AI-provided sort parameter\n    const sortParam = parsed.sort;\n\n    // Validate that the sort field is included in the fields array\n    // Extract the field name from the sort parameter (e.g., \"-timestamp\" -> \"timestamp\", \"-count()\" -> \"count()\")\n    const sortField = sortParam.startsWith(\"-\")\n      ? sortParam.substring(1)\n      : sortParam;\n\n    // Check if the sort field is included in the fields array\n    if (!fields.includes(sortField)) {\n      // Always throw an error to help the agent learn the correct pattern\n      throw new UserInputError(\n        `Sort field \"${sortField}\" (from sort parameter \"${sortParam}\") must be included in the fields array. Sentry requires that any field used for sorting must also be explicitly selected. Current fields: [${fields.join(\", \")}]. Please add \"${sortField}\" to the fields array or choose a different sort field that's already in the fields array.`,\n      );\n    }\n\n    // Extract time range parameters from parsed response\n    const timeParams: { statsPeriod?: string; start?: string; end?: string } =\n      {};\n    if (parsed.timeRange) {\n      if (\"statsPeriod\" in parsed.timeRange) {\n        timeParams.statsPeriod = parsed.timeRange.statsPeriod;\n      } else if (\"start\" in parsed.timeRange && \"end\" in parsed.timeRange) {\n        timeParams.start = parsed.timeRange.start;\n        timeParams.end = parsed.timeRange.end;\n      }\n    } else {\n      // Default time window if not specified\n      timeParams.statsPeriod = \"14d\";\n    }\n\n    let eventsResponse: unknown;\n    try {\n      eventsResponse = await withApiErrorHandling(\n        () =>\n          apiService.searchEvents({\n            organizationSlug,\n            query: sentryQuery,\n            fields,\n            limit: params.limit,\n            projectSlug: projectId, // API requires numeric project ID, not slug\n            dataset: dataset === \"logs\" ? \"ourlogs\" : dataset,\n            sort: sortParam,\n            ...timeParams, // Spread the time parameters\n          }),\n        {\n          organizationSlug,\n          projectSlug: params.projectSlug,\n        },\n      );\n    } catch (error) {\n      // Convert API validation errors to UserInputError for agent self-correction\n      if (\n        error instanceof ApiError &&\n        (error.status === 400 || error.status === 422)\n      ) {\n        // 400 Bad Request and 422 Unprocessable Entity typically indicate input validation issues\n        throw new UserInputError(error.message);\n      }\n\n      // Re-throw other errors (5xx, network errors, etc.) as-is\n      throw error;\n    }\n\n    // Generate the Sentry explorer URL with structured aggregate information\n    // Derive aggregate functions and groupBy fields from the fields array\n    const aggregateFunctions = fields.filter(\n      (field) => field.includes(\"(\") && field.includes(\")\"),\n    );\n    const groupByFields = fields.filter(\n      (field) => !field.includes(\"(\") && !field.includes(\")\"),\n    );\n\n    const explorerUrl = apiService.getEventsExplorerUrl(\n      organizationSlug,\n      sentryQuery,\n      projectId, // Pass the numeric project ID for URL generation\n      dataset, // dataset is already correct for URL generation (logs, spans, errors)\n      fields, // Pass fields to detect if it's an aggregate query\n      sortParam, // Pass sort parameter for URL generation\n      aggregateFunctions,\n      groupByFields,\n    );\n\n    // Type-safe access to event data with proper validation\n    function isValidResponse(\n      response: unknown,\n    ): response is { data?: unknown[] } {\n      return typeof response === \"object\" && response !== null;\n    }\n\n    function isValidEventArray(\n      data: unknown,\n    ): data is Record<string, unknown>[] {\n      return (\n        Array.isArray(data) &&\n        data.every((item) => typeof item === \"object\" && item !== null)\n      );\n    }\n\n    if (!isValidResponse(eventsResponse)) {\n      throw new Error(\"Invalid response format from Sentry API\");\n    }\n\n    const eventData = eventsResponse.data;\n    if (!isValidEventArray(eventData)) {\n      throw new Error(\"Invalid event data format from Sentry API\");\n    }\n\n    // Format results based on dataset\n    switch (dataset) {\n      case \"errors\":\n        return formatErrorResults(\n          eventData,\n          params,\n          apiService,\n          organizationSlug,\n          explorerUrl,\n          sentryQuery,\n          fields,\n        );\n      case \"logs\":\n        return formatLogResults(\n          eventData,\n          params,\n          apiService,\n          organizationSlug,\n          explorerUrl,\n          sentryQuery,\n          fields,\n        );\n      case \"spans\":\n        return formatSpanResults(\n          eventData,\n          params,\n          apiService,\n          organizationSlug,\n          explorerUrl,\n          sentryQuery,\n          fields,\n        );\n    }\n  },\n});\n"],"mappings":"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"}