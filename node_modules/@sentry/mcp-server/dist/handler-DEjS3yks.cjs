const require_chunk = require('./chunk-DWy1uDak.cjs');
const require_defineTool = require('./defineTool-lWNTzWl_.cjs');
const require_api_utils = require('./api-utils-DFWUfQ83.cjs');
const require_schema = require('./schema-BL3kwfOA.cjs');
const require_agent = require('./agent-Cody_f0d.cjs');
const require_formatters = require('./formatters-DbqofIoy.cjs');
const zod = require_chunk.__toESM(require("zod"));
const __sentry_core = require_chunk.__toESM(require("@sentry/core"));

//#region src/tools/search-issues/handler.ts
var handler_default = require_defineTool.defineTool({
	name: "search_issues",
	description: [
		"Search for grouped issues/problems in Sentry - returns a LIST of issues, NOT counts or aggregations.",
		"",
		"Uses AI to translate natural language queries into Sentry issue search syntax.",
		"Returns grouped issues with metadata like title, status, and user count.",
		"",
		"üîç USE THIS TOOL WHEN USERS WANT:",
		"- A LIST of issues: 'show me issues', 'what problems do we have'",
		"- Filtered issue lists: 'unresolved issues', 'critical bugs'",
		"- Issues by impact: 'errors affecting more than 100 users'",
		"- Issues by assignment: 'issues assigned to me'",
		"",
		"‚ùå DO NOT USE FOR COUNTS/AGGREGATIONS:",
		"- 'how many errors' ‚Üí use search_events",
		"- 'count of issues' ‚Üí use search_events",
		"- 'total number of errors today' ‚Üí use search_events",
		"- 'sum/average/statistics' ‚Üí use search_events",
		"",
		"‚ùå ALSO DO NOT USE FOR:",
		"- Individual error events with timestamps ‚Üí use search_events",
		"- Details about a specific issue ID ‚Üí use get_issue_details",
		"",
		"REMEMBER: This tool returns a LIST of issues, not counts or statistics!",
		"",
		"<examples>",
		"search_issues(organizationSlug='my-org', naturalLanguageQuery='critical bugs from last week')",
		"search_issues(organizationSlug='my-org', naturalLanguageQuery='unhandled errors affecting 100+ users')",
		"search_issues(organizationSlug='my-org', naturalLanguageQuery='issues assigned to me')",
		"</examples>",
		"",
		"<hints>",
		"- If the user passes a parameter in the form of name/otherName, it's likely in the format of <organizationSlug>/<projectSlugOrId>.",
		"- Parse org/project notation directly without calling find_organizations or find_projects.",
		"- The projectSlugOrId parameter accepts both project slugs (e.g., 'my-project') and numeric IDs (e.g., '123456').",
		"</hints>"
	].join("\n"),
	inputSchema: {
		organizationSlug: require_schema.ParamOrganizationSlug,
		naturalLanguageQuery: zod.z.string().trim().min(1).describe("Natural language description of issues to search for"),
		projectSlugOrId: zod.z.string().optional().describe("The project's slug or numeric ID (optional)"),
		regionUrl: require_schema.ParamRegionUrl.optional(),
		limit: zod.z.number().min(1).max(100).optional().default(10).describe("Maximum number of issues to return"),
		includeExplanation: zod.z.boolean().optional().default(false).describe("Include explanation of how the query was translated")
	},
	async handler(params, context) {
		const apiService = require_api_utils.apiServiceFromContext(context, { regionUrl: params.regionUrl });
		(0, __sentry_core.setTag)("organization.slug", params.organizationSlug);
		if (params.projectSlugOrId) if (/^\d+$/.test(params.projectSlugOrId)) (0, __sentry_core.setTag)("project.id", params.projectSlugOrId);
		else (0, __sentry_core.setTag)("project.slug", params.projectSlugOrId);
		let projectId;
		if (params.projectSlugOrId) if (/^\d+$/.test(params.projectSlugOrId)) projectId = params.projectSlugOrId;
		else {
			const project = await require_api_utils.withApiErrorHandling(() => apiService.getProject({
				organizationSlug: params.organizationSlug,
				projectSlugOrId: params.projectSlugOrId
			}), {
				organizationSlug: params.organizationSlug,
				projectSlugOrId: params.projectSlugOrId
			});
			projectId = String(project.id);
		}
		const translatedQuery = await require_agent.translateQuery({
			naturalLanguageQuery: params.naturalLanguageQuery,
			organizationSlug: params.organizationSlug,
			projectSlugOrId: params.projectSlugOrId,
			projectId
		}, apiService);
		const issues = await require_api_utils.withApiErrorHandling(() => apiService.listIssues({
			organizationSlug: params.organizationSlug,
			projectSlug: params.projectSlugOrId,
			query: translatedQuery.query,
			sortBy: translatedQuery.sort || "date",
			limit: params.limit
		}), {
			organizationSlug: params.organizationSlug,
			projectSlug: params.projectSlugOrId,
			query: translatedQuery.query
		});
		let output = "";
		if (params.includeExplanation) {
			output += `# Search Results for "${params.naturalLanguageQuery}"\n\n`;
			output += `‚ö†Ô∏è **IMPORTANT**: Display these issues as highlighted cards with status indicators, assignee info, and clickable Issue IDs.\n\n`;
			output += `## Query Translation\n`;
			output += `Natural language: "${params.naturalLanguageQuery}"\n`;
			output += `Sentry query: \`${translatedQuery.query}\``;
			if (translatedQuery.sort) output += `\nSort: ${translatedQuery.sort}`;
			if (translatedQuery.explanation) output += `\n\n${translatedQuery.explanation}`;
			output += `\n\n`;
			output += require_formatters.formatIssueResults(issues, params.organizationSlug, params.projectSlugOrId, translatedQuery.query, params.regionUrl, params.naturalLanguageQuery, true);
		} else output = require_formatters.formatIssueResults(issues, params.organizationSlug, params.projectSlugOrId, translatedQuery.query, params.regionUrl, params.naturalLanguageQuery, false);
		return output;
	}
});

//#endregion
Object.defineProperty(exports, 'handler_default', {
  enumerable: true,
  get: function () {
    return handler_default;
  }
});
//# sourceMappingURL=handler-DEjS3yks.cjs.map