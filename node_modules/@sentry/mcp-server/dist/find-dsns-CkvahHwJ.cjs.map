{"version":3,"file":"find-dsns-CkvahHwJ.cjs","names":["ParamOrganizationSlug","ParamProjectSlug","context: ServerContext"],"sources":["../src/tools/find-dsns.ts"],"sourcesContent":["import { z } from \"zod\";\nimport { setTag } from \"@sentry/core\";\nimport { defineTool } from \"./utils/defineTool\";\nimport { apiServiceFromContext } from \"./utils/api-utils\";\nimport type { ServerContext } from \"../types\";\nimport {\n  ParamOrganizationSlug,\n  ParamRegionUrl,\n  ParamProjectSlug,\n} from \"../schema\";\n\nexport default defineTool({\n  name: \"find_dsns\",\n  description: [\n    \"List all Sentry DSNs for a specific project.\",\n    \"\",\n    \"Use this tool when you need to:\",\n    \"- Retrieve a SENTRY_DSN for a specific project\",\n    \"\",\n    \"<hints>\",\n    \"- If the user passes a parameter in the form of name/otherName, its likely in the format of <organizationSlug>/<projectSlug>.\",\n    \"- If only one parameter is provided, and it could be either `organizationSlug` or `projectSlug`, its probably `organizationSlug`, but if you're really uncertain you might want to call `find_organizations()` first.\",\n    \"</hints>\",\n  ].join(\"\\n\"),\n  inputSchema: {\n    organizationSlug: ParamOrganizationSlug,\n    regionUrl: ParamRegionUrl.optional(),\n    projectSlug: ParamProjectSlug,\n  },\n  async handler(params, context: ServerContext) {\n    const apiService = apiServiceFromContext(context, {\n      regionUrl: params.regionUrl,\n    });\n    const organizationSlug = params.organizationSlug;\n\n    setTag(\"organization.slug\", organizationSlug);\n    setTag(\"project.slug\", params.projectSlug);\n\n    const clientKeys = await apiService.listClientKeys({\n      organizationSlug,\n      projectSlug: params.projectSlug,\n    });\n    let output = `# DSNs in **${organizationSlug}/${params.projectSlug}**\\n\\n`;\n    if (clientKeys.length === 0) {\n      output +=\n        \"No DSNs were found.\\n\\nYou can create new one using the `create_dsn` tool.\";\n      return output;\n    }\n    for (const clientKey of clientKeys) {\n      output += `## ${clientKey.name}\\n`;\n      output += `**ID**: ${clientKey.id}\\n`;\n      output += `**DSN**: ${clientKey.dsn.public}\\n\\n`;\n    }\n    output += \"# Using this information\\n\\n\";\n    output +=\n      \"- The `SENTRY_DSN` value is a URL that you can use to initialize Sentry's SDKs.\\n\";\n    return output;\n  },\n});\n"],"mappings":";;;;;;;AAWA,wBAAe,8BAAW;CACxB,MAAM;CACN,aAAa;EACX;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;CACD,EAAC,KAAK,KAAK;CACZ,aAAa;EACX,kBAAkBA;EAClB,WAAW,8BAAe,UAAU;EACpC,aAAaC;CACd;CACD,MAAM,QAAQ,QAAQC,SAAwB;EAC5C,MAAM,aAAa,wCAAsB,SAAS,EAChD,WAAW,OAAO,UACnB,EAAC;EACF,MAAM,mBAAmB,OAAO;AAEhC,4BAAO,qBAAqB,iBAAiB;AAC7C,4BAAO,gBAAgB,OAAO,YAAY;EAE1C,MAAM,aAAa,MAAM,WAAW,eAAe;GACjD;GACA,aAAa,OAAO;EACrB,EAAC;EACF,IAAI,UAAU,cAAc,iBAAiB,GAAG,OAAO,YAAY;AACnE,MAAI,WAAW,WAAW,GAAG;AAC3B,aACE;AACF,UAAO;EACR;AACD,OAAK,MAAM,aAAa,YAAY;AAClC,cAAW,KAAK,UAAU,KAAK;AAC/B,cAAW,UAAU,UAAU,GAAG;AAClC,cAAW,WAAW,UAAU,IAAI,OAAO;EAC5C;AACD,YAAU;AACV,YACE;AACF,SAAO;CACR;AACF,EAAC"}