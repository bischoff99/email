import "../promptDefinitions-DehpwJfn.js";
import { ServerContext } from "../types-C1Fih0eQ.js";
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";

//#region src/transports/stdio.d.ts

/**
 * Starts the MCP server with stdio transport and telemetry.
 *
 * Configures the server with all tools, prompts, and resources, then connects
 * using stdio transport for process-based communication. All operations are
 * wrapped in Sentry tracing for observability.
 *
 * @param server - MCP server instance to configure and start
 * @param context - Server context with authentication and configuration
 *
 * @example CLI Integration
 * ```typescript
 * // In a CLI tool or IDE extension:
 * const server = new McpServer();
 * await startStdio(server, {
 *   accessToken: userToken,
 *   host: userHost,
 *   userId: "user-123",
 *   clientId: "cursor-ide"
 * });
 * ```
 */
declare function startStdio(server: McpServer, context: ServerContext): Promise<void>;
//# sourceMappingURL=stdio.d.ts.map
//#endregion
export { startStdio };
//# sourceMappingURL=stdio.d.ts.map