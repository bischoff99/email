//#region src/logging.d.ts
/**
 * Logs errors to console and Sentry with optional context and attachments.
 *
 * Supports both Error objects and string messages. Returns a Sentry event ID
 * that can be included in user-facing error messages for debugging support.
 *
 * @param error - Error object or message string to log
 * @param contexts - Additional context data for Sentry
 * @param attachments - Files or data to attach to the Sentry event
 * @returns Sentry event ID for referencing this error, or undefined if logging fails
 *
 * @example Error Object Logging
 * ```typescript
 * try {
 *   await riskyOperation();
 * } catch (error) {
 *   const eventId = logError(error, {
 *     operation: { name: "riskyOperation", params: {...} }
 *   });
 *   return `Error occurred. Event ID: ${eventId}`;
 * }
 * ```
 *
 * @example String Message Logging
 * ```typescript
 * const eventId = logError("Configuration validation failed", {
 *   config: { provided: userConfig, expected: expectedFormat }
 * });
 * ```
 */
declare function logError(error: Error | unknown, contexts?: Record<string, Record<string, any>>, attachments?: Record<string, string | Uint8Array>): string | undefined;
declare function logError(message: string, contexts?: Record<string, Record<string, any>>, attachments?: Record<string, string | Uint8Array>): string | undefined;
//# sourceMappingURL=logging.d.ts.map
//#endregion
export { logError };
//# sourceMappingURL=logging.d.cts.map