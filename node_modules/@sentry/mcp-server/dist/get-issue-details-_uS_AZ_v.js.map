{"version":3,"file":"get-issue-details-_uS_AZ_v.js","names":["context: ServerContext","orgSlug","issue","event","autofixState:\n        | Awaited<ReturnType<typeof apiService.getAutofixState>>\n        | undefined","autofixState:\n      | Awaited<ReturnType<typeof apiService.getAutofixState>>\n      | undefined"],"sources":["../src/tools/get-issue-details.ts"],"sourcesContent":["import { z } from \"zod\";\nimport { setTag } from \"@sentry/core\";\nimport { defineTool } from \"./utils/defineTool\";\nimport { apiServiceFromContext, withApiErrorHandling } from \"./utils/api-utils\";\nimport { parseIssueParams, formatIssueOutput } from \"./utils/issue-utils\";\nimport { UserInputError } from \"../errors\";\nimport type { ServerContext } from \"../types\";\nimport {\n  ParamOrganizationSlug,\n  ParamRegionUrl,\n  ParamIssueShortId,\n  ParamIssueUrl,\n} from \"../schema\";\n\nexport default defineTool({\n  name: \"get_issue_details\",\n  description: [\n    \"Get detailed information about a specific Sentry issue by ID.\",\n    \"\",\n    \"üîç USE THIS TOOL WHEN USERS:\",\n    \"- Provide a specific issue ID (e.g., 'CLOUDFLARE-MCP-41', 'PROJECT-123')\",\n    \"- Ask to 'explain [ISSUE-ID]', 'tell me about [ISSUE-ID]'\",\n    \"- Want details/stacktrace/analysis for a known issue\",\n    \"- Provide a Sentry issue URL\",\n    \"\",\n    \"‚ùå DO NOT USE for:\",\n    \"- General searching or listing issues (use search_issues)\",\n    \"- Root cause analysis (use analyze_issue_with_seer)\",\n    \"\",\n    \"TRIGGER PATTERNS:\",\n    \"- 'Explain ISSUE-123' ‚Üí use get_issue_details\",\n    \"- 'Tell me about PROJECT-456' ‚Üí use get_issue_details\",\n    \"- 'What happened in [issue URL]' ‚Üí use get_issue_details\",\n    \"\",\n    \"<examples>\",\n    \"### Explain specific issue\",\n    \"```\",\n    \"get_issue_details(organizationSlug='my-organization', issueId='CLOUDFLARE-MCP-41')\",\n    \"```\",\n    \"\",\n    \"### Get details for event ID\",\n    \"```\",\n    \"get_issue_details(organizationSlug='my-organization', eventId='c49541c747cb4d8aa3efb70ca5aba243')\",\n    \"```\",\n    \"</examples>\",\n    \"\",\n    \"<hints>\",\n    \"- If the user provides the `issueUrl`, you can ignore the other parameters.\",\n    \"- If the user provides `issueId` or `eventId` (only one is needed), `organizationSlug` is required.\",\n    \"</hints>\",\n  ].join(\"\\n\"),\n  inputSchema: {\n    organizationSlug: ParamOrganizationSlug.optional(),\n    regionUrl: ParamRegionUrl.optional(),\n    issueId: ParamIssueShortId.optional(),\n    eventId: z.string().trim().describe(\"The ID of the event.\").optional(),\n    issueUrl: ParamIssueUrl.optional(),\n  },\n  async handler(params, context: ServerContext) {\n    const apiService = apiServiceFromContext(context, {\n      regionUrl: params.regionUrl,\n    });\n\n    if (params.eventId) {\n      const orgSlug = params.organizationSlug;\n      if (!orgSlug) {\n        throw new UserInputError(\n          \"`organizationSlug` is required when providing `eventId`\",\n        );\n      }\n\n      setTag(\"organization.slug\", orgSlug);\n      const [issue] = await apiService.listIssues({\n        organizationSlug: orgSlug,\n        query: params.eventId,\n      });\n      if (!issue) {\n        return `# Event Not Found\\n\\nNo issue found for Event ID: ${params.eventId}`;\n      }\n      const event = await apiService.getEventForIssue({\n        organizationSlug: orgSlug,\n        issueId: issue.shortId,\n        eventId: params.eventId,\n      });\n\n      // Try to fetch Seer analysis context (non-blocking)\n      let autofixState:\n        | Awaited<ReturnType<typeof apiService.getAutofixState>>\n        | undefined;\n      try {\n        autofixState = await apiService.getAutofixState({\n          organizationSlug: orgSlug,\n          issueId: issue.shortId,\n        });\n      } catch (error) {\n        // Silently continue if Seer analysis is not available\n        // This ensures the tool works even if Seer is not enabled\n      }\n\n      return formatIssueOutput({\n        organizationSlug: orgSlug,\n        issue,\n        event,\n        apiService,\n        autofixState,\n      });\n    }\n\n    // Validate that we have the minimum required parameters\n    if (!params.issueUrl && !params.issueId) {\n      throw new UserInputError(\n        \"Either `issueId` or `issueUrl` must be provided\",\n      );\n    }\n\n    if (!params.issueUrl && !params.organizationSlug) {\n      throw new UserInputError(\n        \"`organizationSlug` is required when providing `issueId`\",\n      );\n    }\n\n    const { organizationSlug: orgSlug, issueId: parsedIssueId } =\n      parseIssueParams({\n        organizationSlug: params.organizationSlug,\n        issueId: params.issueId,\n        issueUrl: params.issueUrl,\n      });\n\n    setTag(\"organization.slug\", orgSlug);\n\n    const issue = await withApiErrorHandling(\n      () =>\n        apiService.getIssue({\n          organizationSlug: orgSlug,\n          issueId: parsedIssueId!,\n        }),\n      {\n        organizationSlug: orgSlug,\n        issueId: parsedIssueId,\n      },\n    );\n\n    const event = await apiService.getLatestEventForIssue({\n      organizationSlug: orgSlug,\n      issueId: issue.shortId,\n    });\n\n    // Try to fetch Seer analysis context (non-blocking)\n    let autofixState:\n      | Awaited<ReturnType<typeof apiService.getAutofixState>>\n      | undefined;\n    try {\n      autofixState = await apiService.getAutofixState({\n        organizationSlug: orgSlug,\n        issueId: issue.shortId,\n      });\n    } catch (error) {\n      // Silently continue if Seer analysis is not available\n      // This ensures the tool works even if Seer is not enabled\n    }\n\n    return formatIssueOutput({\n      organizationSlug: orgSlug,\n      issue,\n      event,\n      apiService,\n      autofixState,\n    });\n  },\n});\n"],"mappings":";;;;;;;;;;AAcA,gCAAe,WAAW;CACxB,MAAM;CACN,aAAa;EACX;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;CACD,EAAC,KAAK,KAAK;CACZ,aAAa;EACX,kBAAkB,sBAAsB,UAAU;EAClD,WAAW,eAAe,UAAU;EACpC,SAAS,kBAAkB,UAAU;EACrC,SAAS,EAAE,QAAQ,CAAC,MAAM,CAAC,SAAS,uBAAuB,CAAC,UAAU;EACtE,UAAU,cAAc,UAAU;CACnC;CACD,MAAM,QAAQ,QAAQA,SAAwB;EAC5C,MAAM,aAAa,sBAAsB,SAAS,EAChD,WAAW,OAAO,UACnB,EAAC;AAEF,MAAI,OAAO,SAAS;GAClB,MAAMC,YAAU,OAAO;AACvB,QAAKA,UACH,OAAM,IAAI,eACR;AAIJ,UAAO,qBAAqBA,UAAQ;GACpC,MAAM,CAACC,QAAM,GAAG,MAAM,WAAW,WAAW;IAC1C,kBAAkBD;IAClB,OAAO,OAAO;GACf,EAAC;AACF,QAAKC,QACH,SAAQ,oDAAoD,OAAO;GAErE,MAAMC,UAAQ,MAAM,WAAW,iBAAiB;IAC9C,kBAAkBF;IAClB,SAASC,QAAM;IACf,SAAS,OAAO;GACjB,EAAC;GAGF,IAAIE;AAGJ,OAAI;AACF,qBAAe,MAAM,WAAW,gBAAgB;KAC9C,kBAAkBH;KAClB,SAASC,QAAM;IAChB,EAAC;GACH,SAAQ,OAAO,CAGf;AAED,UAAO,kBAAkB;IACvB,kBAAkBD;IAClB;IACA;IACA;IACA;GACD,EAAC;EACH;AAGD,OAAK,OAAO,aAAa,OAAO,QAC9B,OAAM,IAAI,eACR;AAIJ,OAAK,OAAO,aAAa,OAAO,iBAC9B,OAAM,IAAI,eACR;EAIJ,MAAM,EAAE,kBAAkB,SAAS,SAAS,eAAe,GACzD,iBAAiB;GACf,kBAAkB,OAAO;GACzB,SAAS,OAAO;GAChB,UAAU,OAAO;EAClB,EAAC;AAEJ,SAAO,qBAAqB,QAAQ;EAEpC,MAAM,QAAQ,MAAM,qBAClB,MACE,WAAW,SAAS;GAClB,kBAAkB;GAClB,SAAS;EACV,EAAC,EACJ;GACE,kBAAkB;GAClB,SAAS;EACV,EACF;EAED,MAAM,QAAQ,MAAM,WAAW,uBAAuB;GACpD,kBAAkB;GAClB,SAAS,MAAM;EAChB,EAAC;EAGF,IAAII;AAGJ,MAAI;AACF,kBAAe,MAAM,WAAW,gBAAgB;IAC9C,kBAAkB;IAClB,SAAS,MAAM;GAChB,EAAC;EACH,SAAQ,OAAO,CAGf;AAED,SAAO,kBAAkB;GACvB,kBAAkB;GAClB;GACA;GACA;GACA;EACD,EAAC;CACH;AACF,EAAC"}