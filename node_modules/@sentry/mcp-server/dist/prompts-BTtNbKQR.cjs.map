{"version":3,"file":"prompts-BTtNbKQR.cjs","names":["issueMessage: string","UserInputError"],"sources":["../src/prompts.ts"],"sourcesContent":["/**\n * Prompt implementation handlers for the Sentry MCP server.\n *\n * Contains runtime implementations for all MCP prompts defined in `promptDefinitions.ts`.\n * Each handler generates context-aware instructions that guide LLMs through\n * complex multi-step workflows involving Sentry operations.\n *\n * @example Basic Handler Pattern\n * ```typescript\n * prompt_name: async (context, params) => {\n *   const instructions = [\n *     \"Primary objective and context\",\n *     \"\",\n *     \"1. First step with specific tool call\",\n *     \"2. Second step with conditional logic\",\n *     \"3. Final step with recommendations\",\n *   ];\n *   return instructions.join(\"\\n\");\n * },\n * ```\n */\nimport { UserInputError } from \"./errors\";\nimport type { PromptHandlers } from \"./types\";\n\nexport const PROMPT_HANDLERS = {\n  find_errors_in_file: async (context, { organizationSlug, filename }) =>\n    [\n      `I want to find errors in Sentry, within the organization ${organizationSlug}, for the file ${filename}`,\n      \"\",\n      \"You should use the tool `search_events` with a natural language query to find errors in Sentry.\",\n      \"\",\n      `For example: \\`search_events(organizationSlug='${organizationSlug}', naturalLanguageQuery='errors in file ${filename}')\\``,\n      \"\",\n      \"If the filename is ambiguous, such as something like `index.ts`, and in most cases, you should include its direct parent.\",\n      \"For example: if the file is `app/utils/index.ts`, you should search for `errors in file utils/index.ts` or `errors in file app/utils/index.ts` depending on if the file is actually part of the applications source path.\",\n    ].join(\"\\n\"),\n  fix_issue_with_seer: async (\n    context,\n    { organizationSlug, issueId, issueUrl },\n  ) => {\n    let issueMessage: string;\n    if (issueUrl) {\n      issueMessage = `The Sentry issue is ${issueUrl}`;\n    } else if (organizationSlug && issueId) {\n      issueMessage = `The Sentry issue is ${issueId} in the organization ${organizationSlug}`;\n    } else {\n      throw new UserInputError(\n        \"Either issueUrl or organizationSlug and issueId must be provided\",\n      );\n    }\n    return [\n      `I want to use Seer to fix an issue in Sentry.`,\n      \"\",\n      issueMessage,\n      \"\",\n      \"1. Call the tool `analyze_issue_with_seer` to analyze the issue and get fix recommendations.\",\n      \"2. The tool will automatically check for existing analysis or start a new one if needed.\",\n      \"3. Wait for the analysis to complete (typically 30-60 seconds).\",\n      \"4. Review the root cause analysis and suggested fixes.\",\n      \"5. Help me apply the fix to my application, if you are able to. Think carefully when doing this.\",\n    ].join(\"\\n\");\n  },\n} satisfies PromptHandlers;\n"],"mappings":";;;AAwBA,MAAa,kBAAkB;CAC7B,qBAAqB,OAAO,SAAS,EAAE,kBAAkB,UAAU,KACjE;GACG,2DAA2D,iBAAiB,iBAAiB;EAC9F;EACA;EACA;GACC,iDAAiD,iBAAiB,0CAA0C,SAAS;EACtH;EACA;EACA;CACD,EAAC,KAAK,KAAK;CACd,qBAAqB,OACnB,SACA,EAAE,kBAAkB,SAAS,UAAU,KACpC;EACH,IAAIA;AACJ,MAAI,SACF,iBAAgB,sBAAsB;WAC7B,oBAAoB,QAC7B,iBAAgB,sBAAsB,QAAQ,uBAAuB;MAErE,OAAM,IAAIC,8BACR;AAGJ,SAAO;IACJ;GACD;GACA;GACA;GACA;GACA;GACA;GACA;GACA;EACD,EAAC,KAAK,KAAK;CACb;AACF"}