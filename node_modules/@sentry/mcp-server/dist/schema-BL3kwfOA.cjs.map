{"version":3,"file":"schema-BL3kwfOA.cjs","names":["SENTRY_GUIDES"],"sources":["../src/schema.ts"],"sourcesContent":["/**\n * Reusable Zod parameter schemas for MCP tools.\n *\n * Shared validation schemas used across tool definitions to ensure consistent\n * parameter handling and validation. Each schema includes transformation\n * (e.g., toLowerCase, trim) and LLM-friendly descriptions.\n */\nimport { z } from \"zod\";\nimport { SENTRY_GUIDES } from \"./constants\";\n\nexport const ParamOrganizationSlug = z\n  .string()\n  .toLowerCase()\n  .trim()\n  .describe(\n    \"The organization's slug. You can find a existing list of organizations you have access to using the `find_organizations()` tool.\",\n  );\n\nexport const ParamTeamSlug = z\n  .string()\n  .toLowerCase()\n  .trim()\n  .describe(\n    \"The team's slug. You can find a list of existing teams in an organization using the `find_teams()` tool.\",\n  );\n\nexport const ParamProjectSlug = z\n  .string()\n  .toLowerCase()\n  .trim()\n  .describe(\n    \"The project's slug. You can find a list of existing projects in an organization using the `find_projects()` tool.\",\n  );\n\nexport const ParamProjectSlugOrAll = z\n  .string()\n  .toLowerCase()\n  .trim()\n  .describe(\n    \"The project's slug. This will default to all projects you have access to. It is encouraged to specify this when possible.\",\n  );\n\nexport const ParamIssueShortId = z\n  .string()\n  .toUpperCase()\n  .trim()\n  .describe(\"The Issue ID. e.g. `PROJECT-1Z43`\");\n\nexport const ParamIssueUrl = z\n  .string()\n  .url()\n  .trim()\n  .describe(\n    \"The URL of the issue. e.g. https://my-organization.sentry.io/issues/PROJECT-1Z43\",\n  );\n\nexport const ParamPlatform = z\n  .string()\n  .toLowerCase()\n  .trim()\n  .describe(\n    \"The platform for the project. e.g., python, javascript, react, etc.\",\n  );\n\nexport const ParamTransaction = z\n  .string()\n  .trim()\n  .describe(\"The transaction name. Also known as the endpoint, or route name.\");\n\nexport const ParamQuery = z\n  .string()\n  .trim()\n  .describe(\n    `The search query to apply. Use the \\`help(subject=\"query_syntax\")\\` tool to get more information about the query syntax rather than guessing.`,\n  );\n\n/**\n * Region URL parameter for Sentry API requests.\n *\n * Handles region-specific URLs for Sentry's Cloud Service while gracefully\n * supporting self-hosted Sentry installations that may return empty regionUrl values.\n * This schema accepts both valid URLs and empty strings to ensure compatibility\n * across different Sentry deployment types.\n */\nexport const ParamRegionUrl = z\n  .string()\n  .trim()\n  .refine((value) => !value || z.string().url().safeParse(value).success, {\n    message: \"Must be a valid URL or empty string (for self-hosted Sentry)\",\n  })\n  .describe(\n    \"The region URL for the organization you're querying, if known. \" +\n      \"For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. \" +\n      \"For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. \" +\n      \"You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\",\n  );\n\nexport const ParamIssueStatus = z\n  .enum([\"resolved\", \"resolvedInNextRelease\", \"unresolved\", \"ignored\"])\n  .describe(\n    \"The new status for the issue. Valid values are 'resolved', 'resolvedInNextRelease', 'unresolved', and 'ignored'.\",\n  );\n\nexport const ParamAssignedTo = z\n  .string()\n  .trim()\n  .describe(\n    \"The assignee in format 'user:ID' or 'team:ID' where ID is numeric. Example: 'user:123456' or 'team:789'. Use the whoami tool to find your user ID.\",\n  );\n\nexport const ParamSentryGuide = z\n  .enum(SENTRY_GUIDES)\n  .describe(\n    \"Optional guide filter to limit search results to specific documentation sections. \" +\n      \"Use either a platform (e.g., 'javascript', 'python') or platform/guide combination (e.g., 'javascript/nextjs', 'python/django').\",\n  );\n\nexport const ParamEventId = z.string().trim().describe(\"The ID of the event.\");\n\nexport const ParamAttachmentId = z\n  .string()\n  .trim()\n  .describe(\"The ID of the attachment to download.\");\n"],"mappings":";;;;;AAUA,MAAa,wBAAwB,MAClC,QAAQ,CACR,aAAa,CACb,MAAM,CACN,SACC,mIACD;AAEH,MAAa,gBAAgB,MAC1B,QAAQ,CACR,aAAa,CACb,MAAM,CACN,SACC,2GACD;AAEH,MAAa,mBAAmB,MAC7B,QAAQ,CACR,aAAa,CACb,MAAM,CACN,SACC,oHACD;AAEH,MAAa,wBAAwB,MAClC,QAAQ,CACR,aAAa,CACb,MAAM,CACN,SACC,4HACD;AAEH,MAAa,oBAAoB,MAC9B,QAAQ,CACR,aAAa,CACb,MAAM,CACN,SAAS,oCAAoC;AAEhD,MAAa,gBAAgB,MAC1B,QAAQ,CACR,KAAK,CACL,MAAM,CACN,SACC,mFACD;AAEH,MAAa,gBAAgB,MAC1B,QAAQ,CACR,aAAa,CACb,MAAM,CACN,SACC,sEACD;AAEH,MAAa,mBAAmB,MAC7B,QAAQ,CACR,MAAM,CACN,SAAS,mEAAmE;AAE/E,MAAa,aAAa,MACvB,QAAQ,CACR,MAAM,CACN,UACE,+IACF;;;;;;;;;AAUH,MAAa,iBAAiB,MAC3B,QAAQ,CACR,MAAM,CACN,OAAO,CAAC,WAAW,SAAS,MAAE,QAAQ,CAAC,KAAK,CAAC,UAAU,MAAM,CAAC,SAAS,EACtE,SAAS,+DACV,EAAC,CACD,SACC,0XAID;AAEH,MAAa,mBAAmB,MAC7B,KAAK;CAAC;CAAY;CAAyB;CAAc;AAAU,EAAC,CACpE,SACC,mHACD;AAEH,MAAa,kBAAkB,MAC5B,QAAQ,CACR,MAAM,CACN,SACC,qJACD;AAEH,MAAa,mBAAmB,MAC7B,KAAKA,gCAAc,CACnB,SACC,qNAED;AAEH,MAAa,eAAe,MAAE,QAAQ,CAAC,MAAM,CAAC,SAAS,uBAAuB;AAE9E,MAAa,oBAAoB,MAC9B,QAAQ,CACR,MAAM,CACN,SAAS,wCAAwC"}