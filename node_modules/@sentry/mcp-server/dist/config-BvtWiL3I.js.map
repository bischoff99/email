{"version":3,"file":"config-BvtWiL3I.js","names":["NUMERIC_FIELDS: Record<string, Set<string>>"],"sources":["../src/tools/search-events/config.ts"],"sourcesContent":["// Base fields common to all datasets\nexport const BASE_COMMON_FIELDS = {\n  project: \"Project slug\",\n  timestamp: \"When the event occurred\",\n  environment: \"Environment (production, staging, development)\",\n  release: \"Release version\",\n  platform: \"Platform (javascript, python, etc.)\",\n  \"user.id\": \"User ID\",\n  \"user.email\": \"User email\",\n  \"sdk.name\": \"SDK name\",\n  \"sdk.version\": \"SDK version\",\n};\n\n// Known numeric fields for each dataset\nexport const NUMERIC_FIELDS: Record<string, Set<string>> = {\n  spans: new Set([\n    \"span.duration\",\n    \"span.self_time\",\n    \"transaction.duration\",\n    \"http.status_code\",\n    \"gen_ai.usage.input_tokens\",\n    \"gen_ai.usage.output_tokens\",\n    \"gen_ai.request.max_tokens\",\n  ]),\n  errors: new Set([\n    // Most error fields are strings/categories\n    \"stack.lineno\",\n  ]),\n  logs: new Set([\"severity_number\", \"sentry.observed_timestamp_nanos\"]),\n};\n\n// Dataset-specific field definitions\nexport const DATASET_FIELDS = {\n  spans: {\n    // Span-specific fields\n    \"span.op\": \"Span operation type (e.g., http.client, db.query, cache.get)\",\n    \"span.description\": \"Detailed description of the span operation\",\n    \"span.duration\": \"Duration of the span in milliseconds\",\n    \"span.status\": \"Span status (ok, cancelled, unknown, etc.)\",\n    \"span.self_time\": \"Time spent in this span excluding child spans\",\n\n    // Transaction fields\n    transaction: \"Transaction name/route\",\n    \"transaction.duration\": \"Total transaction duration in milliseconds\",\n    \"transaction.op\": \"Transaction operation type\",\n    \"transaction.status\": \"Transaction status\",\n    is_transaction: \"Whether this span is a transaction (true/false)\",\n\n    // Trace fields\n    trace: \"Trace ID\",\n    \"trace.span_id\": \"Span ID within the trace\",\n    \"trace.parent_span_id\": \"Parent span ID\",\n\n    // HTTP fields\n    \"http.method\": \"HTTP method (GET, POST, etc.)\",\n    \"http.status_code\": \"HTTP response status code\",\n    \"http.url\": \"Full HTTP URL\",\n\n    // Database fields\n    \"db.system\": \"Database system (postgresql, mysql, etc.)\",\n    \"db.operation\": \"Database operation (SELECT, INSERT, etc.)\",\n\n    // OpenTelemetry attribute namespaces for semantic queries\n    // Use has:namespace.* to find spans with any attribute in that namespace\n    // GenAI namespace (gen_ai.*) - for AI/LLM/Agent calls\n    \"gen_ai.system\": \"AI system (e.g., anthropic, openai)\",\n    \"gen_ai.request.model\": \"Model name (e.g., claude-3-5-sonnet-20241022)\",\n    \"gen_ai.operation.name\": \"Operation type (e.g., chat, completion)\",\n    \"gen_ai.usage.input_tokens\": \"Number of input tokens (numeric)\",\n    \"gen_ai.usage.output_tokens\": \"Number of output tokens (numeric)\",\n\n    // MCP namespace (mcp.*) - for Model Context Protocol tool calls\n    \"mcp.tool.name\": \"Tool name (e.g., search_issues, search_events)\",\n    \"mcp.session.id\": \"MCP session identifier\",\n\n    // Aggregate functions (SPANS dataset only - require numeric fields except count/count_unique)\n    \"count()\": \"Count of spans\",\n    \"count_unique(field)\": \"Count of unique values, e.g. count_unique(user.id)\",\n    \"avg(field)\": \"Average of numeric field, e.g. avg(span.duration)\",\n    \"sum(field)\": \"Sum of numeric field, e.g. sum(span.self_time)\",\n    \"min(field)\": \"Minimum of numeric field, e.g. min(span.duration)\",\n    \"max(field)\": \"Maximum of numeric field, e.g. max(span.duration)\",\n    \"p50(field)\": \"50th percentile (median), e.g. p50(span.duration)\",\n    \"p75(field)\": \"75th percentile, e.g. p75(span.duration)\",\n    \"p90(field)\": \"90th percentile, e.g. p90(span.duration)\",\n    \"p95(field)\": \"95th percentile, e.g. p95(span.duration)\",\n    \"p99(field)\": \"99th percentile, e.g. p99(span.duration)\",\n    \"p100(field)\": \"100th percentile (max), e.g. p100(span.duration)\",\n    \"epm()\": \"Events per minute rate\",\n    \"failure_rate()\": \"Percentage of failed spans\",\n  },\n  errors: {\n    // Error-specific fields\n    message: \"Error message\",\n    level: \"Error level (error, warning, info, debug)\",\n    \"error.type\": \"Error type/exception class\",\n    \"error.value\": \"Error value/description\",\n    \"error.handled\": \"Whether the error was handled (true/false)\",\n    culprit: \"Code location that caused the error\",\n    title: \"Error title/grouping\",\n\n    // Stack trace fields\n    \"stack.filename\": \"File where error occurred\",\n    \"stack.function\": \"Function where error occurred\",\n    \"stack.module\": \"Module where error occurred\",\n    \"stack.abs_path\": \"Absolute path to file\",\n\n    // Additional context fields\n    \"os.name\": \"Operating system name\",\n    \"browser.name\": \"Browser name\",\n    \"device.family\": \"Device family\",\n\n    // Aggregate functions (ERRORS dataset only)\n    \"count()\": \"Count of error events\",\n    \"count_unique(field)\": \"Count of unique values, e.g. count_unique(user.id)\",\n    \"count_if(field,equals,value)\":\n      \"Conditional count, e.g. count_if(error.handled,equals,false)\",\n    \"last_seen()\": \"Most recent timestamp of the group\",\n    \"eps()\": \"Events per second rate\",\n    \"epm()\": \"Events per minute rate\",\n  },\n  logs: {\n    // Log-specific fields\n    message: \"Log message\",\n    severity: \"Log severity level\",\n    severity_number: \"Numeric severity level\",\n    \"sentry.item_id\": \"Sentry item ID\",\n    \"sentry.observed_timestamp_nanos\": \"Observed timestamp in nanoseconds\",\n\n    // Trace context\n    trace: \"Trace ID\",\n\n    // Aggregate functions (LOGS dataset only - require numeric fields except count/count_unique)\n    \"count()\": \"Count of log entries\",\n    \"count_unique(field)\": \"Count of unique values, e.g. count_unique(user.id)\",\n    \"avg(field)\": \"Average of numeric field, e.g. avg(severity_number)\",\n    \"sum(field)\": \"Sum of numeric field\",\n    \"min(field)\": \"Minimum of numeric field\",\n    \"max(field)\": \"Maximum of numeric field\",\n    \"p50(field)\": \"50th percentile (median)\",\n    \"p75(field)\": \"75th percentile\",\n    \"p90(field)\": \"90th percentile\",\n    \"p95(field)\": \"95th percentile\",\n    \"p99(field)\": \"99th percentile\",\n    \"p100(field)\": \"100th percentile (max)\",\n    \"epm()\": \"Events per minute rate\",\n  },\n};\n\n// Dataset-specific rules and examples\nexport const DATASET_CONFIGS = {\n  errors: {\n    rules: `- For errors, focus on: message, level, error.type, error.handled\n- Use level field for severity (error, warning, info, debug)\n- Use error.handled:false for unhandled exceptions/crashes\n- For filename searches: Use stack.filename for suffix-based search (e.g., stack.filename:\"**/index.js\" or stack.filename:\"**/components/Button.tsx\")\n- When searching for errors in specific files, prefer including the parent folder to avoid ambiguity (e.g., stack.filename:\"**/components/index.js\" instead of just stack.filename:\"**/index.js\")`,\n    examples: `- \"null pointer exceptions\" → \n  {\n    \"query\": \"error.type:\\\\\"NullPointerException\\\\\" OR message:\\\\\"*null pointer*\\\\\"\",\n    \"fields\": [\"issue\", \"title\", \"project\", \"timestamp\", \"level\", \"message\", \"error.type\", \"culprit\"],\n    \"sort\": \"-timestamp\"\n  }\n- \"unhandled errors in production\" → \n  {\n    \"query\": \"error.handled:false AND environment:production\",\n    \"fields\": [\"issue\", \"title\", \"project\", \"timestamp\", \"level\", \"message\", \"error.type\", \"culprit\", \"error.handled\", \"environment\"],\n    \"sort\": \"-timestamp\"\n  }\n- \"database connection errors\" → \n  {\n    \"query\": \"message:\\\\\"*database*\\\\\" AND message:\\\\\"*connection*\\\\\" AND level:error\",\n    \"fields\": [\"issue\", \"title\", \"project\", \"timestamp\", \"level\", \"message\", \"error.type\", \"culprit\"],\n    \"sort\": \"-timestamp\"\n  }\n- \"show me user emails for authentication failures\" → \n  {\n    \"query\": \"message:\\\\\"*auth*\\\\\" AND (message:\\\\\"*failed*\\\\\" OR message:\\\\\"*denied*\\\\\")\",\n    \"fields\": [\"issue\", \"title\", \"project\", \"timestamp\", \"level\", \"message\", \"error.type\", \"culprit\", \"user.email\"],\n    \"sort\": \"-timestamp\"\n  }\n- \"errors in Button.tsx file\" → \n  {\n    \"query\": \"stack.filename:\\\\\"**/Button.tsx\\\\\"\",\n    \"fields\": [\"issue\", \"title\", \"project\", \"timestamp\", \"level\", \"message\", \"error.type\", \"culprit\", \"stack.filename\"],\n    \"sort\": \"-timestamp\"\n  }\n- \"count errors by type in production\" → \n  {\n    \"query\": \"environment:production\",\n    \"fields\": [\"error.type\", \"count()\", \"last_seen()\"],\n    \"sort\": \"-count()\"\n  }\n- \"most common errors last 24h\" → \n  {\n    \"query\": \"level:error\",\n    \"fields\": [\"title\", \"error.type\", \"count()\"],\n    \"sort\": \"-count()\"\n  }\n- \"unhandled errors rate by project\" → \n  {\n    \"query\": \"\",\n    \"fields\": [\"project\", \"count()\", \"count_if(error.handled,equals,false)\", \"epm()\"],\n    \"sort\": \"-count()\"\n  }\n- \"errors in the last hour\" → \n  {\n    \"query\": \"\",\n    \"fields\": [\"issue\", \"title\", \"project\", \"timestamp\", \"level\", \"message\", \"error.type\", \"culprit\"],\n    \"sort\": \"-timestamp\",\n    \"timeRange\": {\"statsPeriod\": \"1h\"}\n  }\n- \"database errors between June 19-20\" → \n  {\n    \"query\": \"message:\\\\\"*database*\\\\\"\",\n    \"fields\": [\"issue\", \"title\", \"project\", \"timestamp\", \"level\", \"message\", \"error.type\", \"culprit\"],\n    \"sort\": \"-timestamp\",\n    \"timeRange\": {\"start\": \"2025-06-19T00:00:00\", \"end\": \"2025-06-20T23:59:59\"}\n  }\n- \"unique users affected by errors\" → \n  {\n    \"query\": \"level:error\",\n    \"fields\": [\"error.type\", \"count()\", \"count_unique(user.id)\"],\n    \"sort\": \"-count_unique(user.id)\"\n  }\n- \"what is the most common error\" → \n  {\n    \"query\": \"\",\n    \"fields\": [\"title\", \"count()\"],\n    \"sort\": \"-count()\"\n  }\n- \"errors by browser\" → \n  {\n    \"query\": \"has:user_agent.original\",\n    \"fields\": [\"user_agent.original\", \"count()\"],\n    \"sort\": \"-count()\"\n  }\n- \"which user agents have the most errors\" → \n  {\n    \"query\": \"level:error AND has:user_agent.original\",\n    \"fields\": [\"user_agent.original\", \"count()\", \"count_unique(user.id)\"],\n    \"sort\": \"-count()\"\n  }`,\n  },\n  logs: {\n    rules: `- For logs, focus on: message, severity, severity_number\n- Use severity field for log levels (fatal, error, warning, info, debug, trace)\n- severity_number is numeric (21=fatal, 17=error, 13=warning, 9=info, 5=debug, 1=trace)\n- IMPORTANT: For time-based filtering in logs, do NOT use timestamp filters in the query\n- Instead, time filtering for logs is handled by the statsPeriod parameter (not part of the query string)\n- Keep your query focused on message content, severity levels, and other attributes only\n- When user asks for \"error logs\", interpret this as logs with severity:error`,\n    examples: `- \"warning logs about memory\" → \n  {\n    \"query\": \"severity:warning AND message:\\\\\"*memory*\\\\\"\",\n    \"fields\": [\"timestamp\", \"project\", \"message\", \"severity\", \"trace\"],\n    \"sort\": \"-timestamp\"\n  }\n- \"error logs from database\" → \n  {\n    \"query\": \"severity:error AND message:\\\\\"*database*\\\\\"\",\n    \"fields\": [\"timestamp\", \"project\", \"message\", \"severity\", \"trace\"],\n    \"sort\": \"-timestamp\"\n  }\n- \"show me error logs with user context\" → \n  {\n    \"query\": \"severity:error\",\n    \"fields\": [\"timestamp\", \"project\", \"message\", \"severity\", \"trace\", \"user.id\", \"user.email\"],\n    \"sort\": \"-timestamp\"\n  }\n- \"what is the most common log\" → \n  {\n    \"query\": \"\",\n    \"fields\": [\"message\", \"count()\"],\n    \"sort\": \"-count()\"\n  }\n- \"most common error logs\" → \n  {\n    \"query\": \"severity:error\",\n    \"fields\": [\"message\", \"count()\"],\n    \"sort\": \"-count()\"\n  }\n- \"count logs by severity\" → \n  {\n    \"query\": \"\",\n    \"fields\": [\"severity\", \"count()\"],\n    \"sort\": \"-count()\"\n  }\n- \"log volume by project\" → \n  {\n    \"query\": \"\",\n    \"fields\": [\"project\", \"count()\", \"epm()\"],\n    \"sort\": \"-count()\"\n  }`,\n  },\n  spans: {\n    rules: `- For traces/spans, focus on: span.op, span.description, span.duration, transaction\n- Use is_transaction:true for transaction spans only\n- Use span.duration for performance queries (value is in milliseconds)\n- IMPORTANT: Use has: queries for attribute-based filtering instead of span.op patterns:\n  - For HTTP requests: use \"has:request.url\" instead of \"span.op:http*\"\n  - For database queries: use \"has:db.statement\" or \"has:db.system\" instead of \"span.op:db*\"\n  - For AI/LLM/Agent calls: use \"has:gen_ai.system\" or \"has:gen_ai.request.model\" (OpenTelemetry GenAI semantic conventions)\n  - For MCP tool calls: use \"has:mcp.tool.name\" (Model Context Protocol semantic conventions)\n  - This approach is more flexible and captures all relevant spans regardless of their operation type\n\nOpenTelemetry Semantic Conventions (2025 Stable):\nCore Namespaces:\n- gen_ai.*: GenAI attributes for AI/LLM/Agent calls (system, request.model, operation.name, usage.*)\n- db.*: Database attributes (system, statement, operation, name) - STABLE\n- http.*: HTTP attributes (method, status_code, url, request.*, response.*) - STABLE\n- rpc.*: RPC attributes (system, service, method, grpc.*)\n- messaging.*: Messaging attributes (system, operation, destination.*)\n- faas.*: Function as a Service attributes (name, version, runtime)\n- cloud.*: Cloud provider attributes (provider, region, zone)\n- k8s.*: Kubernetes attributes (namespace, pod, container, node)\n- host.*: Host attributes (name, type, arch, os.*)\n- service.*: Service attributes (name, version, instance.id)\n- process.*: Process attributes (pid, command, runtime.*)\n\nCustom Namespaces:\n- mcp.*: Model Context Protocol attributes for MCP tool calls (tool.name, session.id, transport)\n\nQuery Patterns:\n- Use has:namespace.* to find spans with any attribute in that namespace\n- Most common: has:gen_ai.system (agent calls), has:mcp.tool.name (MCP tools), has:db.statement (database), has:http.method (HTTP)`,\n    examples: `- \"database queries\" → \n  {\n    \"query\": \"has:db.statement\",\n    \"fields\": [\"span.op\", \"span.description\", \"span.duration\", \"transaction\", \"timestamp\", \"project\", \"trace\", \"db.system\", \"db.statement\"],\n    \"sort\": \"-span.duration\"\n  }\n- \"slow API calls over 5 seconds\" → \n  {\n    \"query\": \"has:request.url AND span.duration:>5000\",\n    \"fields\": [\"span.op\", \"span.description\", \"span.duration\", \"transaction\", \"timestamp\", \"project\", \"trace\", \"request.url\", \"request.method\", \"span.status_code\"],\n    \"sort\": \"-span.duration\"\n  }\n- \"show me database queries with their SQL\" → \n  {\n    \"query\": \"has:db.statement\",\n    \"fields\": [\"span.op\", \"span.description\", \"span.duration\", \"transaction\", \"timestamp\", \"project\", \"trace\", \"db.system\", \"db.statement\"],\n    \"sort\": \"-span.duration\"\n  }\n- \"average response time by endpoint\" → \n  {\n    \"query\": \"is_transaction:true\",\n    \"fields\": [\"transaction\", \"count()\", \"avg(span.duration)\", \"p95(span.duration)\"],\n    \"sort\": \"-avg(span.duration)\"\n  }\n- \"slowest database queries by p95\" → \n  {\n    \"query\": \"has:db.statement\",\n    \"fields\": [\"db.statement\", \"count()\", \"p50(span.duration)\", \"p95(span.duration)\", \"max(span.duration)\"],\n    \"sort\": \"-p95(span.duration)\"\n  }\n- \"API calls in the last 30 minutes\" → \n  {\n    \"query\": \"has:request.url\",\n    \"fields\": [\"id\", \"span.op\", \"span.description\", \"span.duration\", \"transaction\", \"timestamp\", \"project\", \"trace\", \"request.url\", \"request.method\"],\n    \"sort\": \"-timestamp\",\n    \"timeRange\": {\"statsPeriod\": \"30m\"}\n  }\n- \"most common transaction\" → \n  {\n    \"query\": \"is_transaction:true\",\n    \"fields\": [\"transaction\", \"count()\"],\n    \"sort\": \"-count()\"\n  }\n- \"top 10 tool call spans by usage\" → \n  {\n    \"query\": \"has:mcp.tool.name\",\n    \"fields\": [\"mcp.tool.name\", \"count()\"],\n    \"sort\": \"-count()\"\n  }\n- \"top 10 agent call spans by usage\" → \n  {\n    \"query\": \"has:gen_ai.system\",\n    \"fields\": [\"gen_ai.system\", \"gen_ai.request.model\", \"count()\"],\n    \"sort\": \"-count()\"\n  }\n- \"slowest AI/LLM calls\" → \n  {\n    \"query\": \"has:gen_ai.request.model\",\n    \"fields\": [\"gen_ai.system\", \"gen_ai.request.model\", \"span.duration\", \"transaction\", \"timestamp\", \"project\", \"trace\", \"gen_ai.operation.name\"],\n    \"sort\": \"-span.duration\"\n  }\n- \"agent calls by model usage\" → \n  {\n    \"query\": \"has:gen_ai.request.model\",\n    \"fields\": [\"gen_ai.request.model\", \"count()\"],\n    \"sort\": \"-count()\"\n  }\n- \"average agent call duration by model\" → \n  {\n    \"query\": \"has:gen_ai.request.model\",\n    \"fields\": [\"gen_ai.request.model\", \"count()\", \"avg(span.duration)\", \"p95(span.duration)\"],\n    \"sort\": \"-avg(span.duration)\"\n  }\n- \"token usage by AI system\" → \n  {\n    \"query\": \"has:gen_ai.usage.input_tokens\",\n    \"fields\": [\"gen_ai.system\", \"sum(gen_ai.usage.input_tokens)\", \"sum(gen_ai.usage.output_tokens)\", \"count()\"],\n    \"sort\": \"-sum(gen_ai.usage.input_tokens)\"\n  }\n- \"how many tokens used today\" → \n  {\n    \"query\": \"has:gen_ai.usage.input_tokens\",\n    \"fields\": [\"sum(gen_ai.usage.input_tokens)\", \"sum(gen_ai.usage.output_tokens)\", \"count()\"],\n    \"sort\": \"-sum(gen_ai.usage.input_tokens)\",\n    \"timeRange\": {\"statsPeriod\": \"24h\"}\n  }\n- \"total input tokens by model\" → \n  {\n    \"query\": \"has:gen_ai.usage.input_tokens\",\n    \"fields\": [\"gen_ai.request.model\", \"sum(gen_ai.usage.input_tokens)\", \"count()\"],\n    \"sort\": \"-sum(gen_ai.usage.input_tokens)\"\n  }\n- \"tokens used this week\" → \n  {\n    \"query\": \"has:gen_ai.usage.input_tokens\",\n    \"fields\": [\"sum(gen_ai.usage.input_tokens)\", \"sum(gen_ai.usage.output_tokens)\", \"count()\"],\n    \"sort\": \"-sum(gen_ai.usage.input_tokens)\",\n    \"timeRange\": {\"statsPeriod\": \"7d\"}\n  }\n- \"which user agents have the most tool calls yesterday\" → \n  {\n    \"query\": \"has:mcp.tool.name AND has:user_agent.original\",\n    \"fields\": [\"user_agent.original\", \"count()\"],\n    \"sort\": \"-count()\",\n    \"timeRange\": {\"statsPeriod\": \"24h\"}\n  }\n- \"top 10 browsers by API calls\" → \n  {\n    \"query\": \"has:http.method AND has:user_agent.original\",\n    \"fields\": [\"user_agent.original\", \"count()\"],\n    \"sort\": \"-count()\"\n  }\n- \"most common clients making database queries\" → \n  {\n    \"query\": \"has:db.statement AND has:user_agent.original\",\n    \"fields\": [\"user_agent.original\", \"count()\", \"avg(span.duration)\"],\n    \"sort\": \"-count()\"\n  }`,\n  },\n};\n\n// Define recommended fields for each dataset\nexport const RECOMMENDED_FIELDS = {\n  errors: {\n    basic: [\n      \"issue\",\n      \"title\",\n      \"project\",\n      \"timestamp\",\n      \"level\",\n      \"message\",\n      \"error.type\",\n      \"culprit\",\n    ],\n    description:\n      \"Basic error information including issue ID, title, timestamp, severity, and location\",\n  },\n  logs: {\n    basic: [\"timestamp\", \"project\", \"message\", \"severity\", \"trace\"],\n    description: \"Essential log entry information\",\n  },\n  spans: {\n    basic: [\n      \"id\",\n      \"span.op\",\n      \"span.description\",\n      \"span.duration\",\n      \"transaction\",\n      \"timestamp\",\n      \"project\",\n      \"trace\",\n    ],\n    description:\n      \"Core span/trace information including span ID, operation, duration, and trace context\",\n  },\n};\n"],"mappings":";AACA,MAAa,qBAAqB;CAChC,SAAS;CACT,WAAW;CACX,aAAa;CACb,SAAS;CACT,UAAU;CACV,WAAW;CACX,cAAc;CACd,YAAY;CACZ,eAAe;AAChB;AAGD,MAAaA,iBAA8C;CACzD,OAAO,IAAI,IAAI;EACb;EACA;EACA;EACA;EACA;EACA;EACA;CACD;CACD,QAAQ,IAAI,IAAI,CAEd,cACD;CACD,MAAM,IAAI,IAAI,CAAC,mBAAmB,iCAAkC;AACrE;AAGD,MAAa,iBAAiB;CAC5B,OAAO;EAEL,WAAW;EACX,oBAAoB;EACpB,iBAAiB;EACjB,eAAe;EACf,kBAAkB;EAGlB,aAAa;EACb,wBAAwB;EACxB,kBAAkB;EAClB,sBAAsB;EACtB,gBAAgB;EAGhB,OAAO;EACP,iBAAiB;EACjB,wBAAwB;EAGxB,eAAe;EACf,oBAAoB;EACpB,YAAY;EAGZ,aAAa;EACb,gBAAgB;EAKhB,iBAAiB;EACjB,wBAAwB;EACxB,yBAAyB;EACzB,6BAA6B;EAC7B,8BAA8B;EAG9B,iBAAiB;EACjB,kBAAkB;EAGlB,WAAW;EACX,uBAAuB;EACvB,cAAc;EACd,cAAc;EACd,cAAc;EACd,cAAc;EACd,cAAc;EACd,cAAc;EACd,cAAc;EACd,cAAc;EACd,cAAc;EACd,eAAe;EACf,SAAS;EACT,kBAAkB;CACnB;CACD,QAAQ;EAEN,SAAS;EACT,OAAO;EACP,cAAc;EACd,eAAe;EACf,iBAAiB;EACjB,SAAS;EACT,OAAO;EAGP,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,kBAAkB;EAGlB,WAAW;EACX,gBAAgB;EAChB,iBAAiB;EAGjB,WAAW;EACX,uBAAuB;EACvB,gCACE;EACF,eAAe;EACf,SAAS;EACT,SAAS;CACV;CACD,MAAM;EAEJ,SAAS;EACT,UAAU;EACV,iBAAiB;EACjB,kBAAkB;EAClB,mCAAmC;EAGnC,OAAO;EAGP,WAAW;EACX,uBAAuB;EACvB,cAAc;EACd,cAAc;EACd,cAAc;EACd,cAAc;EACd,cAAc;EACd,cAAc;EACd,cAAc;EACd,cAAc;EACd,cAAc;EACd,eAAe;EACf,SAAS;CACV;AACF;AAGD,MAAa,kBAAkB;CAC7B,QAAQ;EACN,QAAQ;;;;;EAKR,WAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsFZ;CACD,MAAM;EACJ,QAAQ;;;;;;;EAOR,WAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0CZ;CACD,OAAO;EACL,QAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8BR,WAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsHZ;AACF;AAGD,MAAa,qBAAqB;CAChC,QAAQ;EACN,OAAO;GACL;GACA;GACA;GACA;GACA;GACA;GACA;GACA;EACD;EACD,aACE;CACH;CACD,MAAM;EACJ,OAAO;GAAC;GAAa;GAAW;GAAW;GAAY;EAAQ;EAC/D,aAAa;CACd;CACD,OAAO;EACL,OAAO;GACL;GACA;GACA;GACA;GACA;GACA;GACA;GACA;EACD;EACD,aACE;CACH;AACF"}