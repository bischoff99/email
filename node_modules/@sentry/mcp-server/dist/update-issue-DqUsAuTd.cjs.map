{"version":3,"file":"update-issue-DqUsAuTd.cjs","names":["context: ServerContext","UserInputError"],"sources":["../src/tools/update-issue.ts"],"sourcesContent":["import { z } from \"zod\";\nimport { setTag } from \"@sentry/core\";\nimport { defineTool } from \"./utils/defineTool\";\nimport { apiServiceFromContext, withApiErrorHandling } from \"./utils/api-utils\";\nimport { parseIssueParams } from \"./utils/issue-utils\";\nimport { formatAssignedTo } from \"./utils/formatting-utils\";\nimport { UserInputError } from \"../errors\";\nimport type { ServerContext } from \"../types\";\nimport {\n  ParamOrganizationSlug,\n  ParamRegionUrl,\n  ParamIssueShortId,\n  ParamIssueUrl,\n  ParamIssueStatus,\n  ParamAssignedTo,\n} from \"../schema\";\n\nexport default defineTool({\n  name: \"update_issue\",\n  description: [\n    \"Update an issue's status or assignment in Sentry. This allows you to resolve, ignore, or reassign issues.\",\n    \"\",\n    \"Use this tool when you need to:\",\n    \"- Resolve an issue that has been fixed\",\n    \"- Assign an issue to a team member or team for investigation\",\n    \"- Mark an issue as ignored to reduce noise\",\n    \"- Reopen a resolved issue by setting status to 'unresolved'\",\n    \"\",\n    \"<examples>\",\n    \"### Resolve an issue\",\n    \"\",\n    \"```\",\n    \"update_issue(organizationSlug='my-organization', issueId='PROJECT-123', status='resolved')\",\n    \"```\",\n    \"\",\n    \"### Assign an issue to a user (use whoami to get your user ID)\",\n    \"\",\n    \"```\",\n    \"update_issue(organizationSlug='my-organization', issueId='PROJECT-123', assignedTo='user:123456')\",\n    \"```\",\n    \"\",\n    \"### Assign an issue to a team\",\n    \"\",\n    \"```\",\n    \"update_issue(organizationSlug='my-organization', issueId='PROJECT-123', assignedTo='team:789')\",\n    \"```\",\n    \"\",\n    \"### Mark an issue as ignored\",\n    \"\",\n    \"```\",\n    \"update_issue(organizationSlug='my-organization', issueId='PROJECT-123', status='ignored')\",\n    \"```\",\n    \"\",\n    \"</examples>\",\n    \"\",\n    \"<hints>\",\n    \"- If the user provides the `issueUrl`, you can ignore the other required parameters and extract them from the URL.\",\n    \"- At least one of `status` or `assignedTo` must be provided to update the issue.\",\n    \"- assignedTo format: Use 'user:ID' for users (e.g., 'user:123456') or 'team:ID' for teams (e.g., 'team:789')\",\n    \"- To find your user ID, first use the whoami tool which returns your numeric user ID\",\n    \"- Valid status values are: 'resolved', 'resolvedInNextRelease', 'unresolved', 'ignored'.\",\n    \"</hints>\",\n  ].join(\"\\n\"),\n  inputSchema: {\n    organizationSlug: ParamOrganizationSlug.optional(),\n    regionUrl: ParamRegionUrl.optional(),\n    issueId: ParamIssueShortId.optional(),\n    issueUrl: ParamIssueUrl.optional(),\n    status: ParamIssueStatus.optional(),\n    assignedTo: ParamAssignedTo.optional(),\n  },\n  async handler(params, context: ServerContext) {\n    const apiService = apiServiceFromContext(context, {\n      regionUrl: params.regionUrl,\n    });\n\n    // Validate that we have the minimum required parameters\n    if (!params.issueUrl && !params.issueId) {\n      throw new UserInputError(\n        \"Either `issueId` or `issueUrl` must be provided\",\n      );\n    }\n\n    if (!params.issueUrl && !params.organizationSlug) {\n      throw new UserInputError(\n        \"`organizationSlug` is required when providing `issueId`\",\n      );\n    }\n\n    // Validate that at least one update parameter is provided\n    if (!params.status && !params.assignedTo) {\n      throw new UserInputError(\n        \"At least one of `status` or `assignedTo` must be provided to update the issue\",\n      );\n    }\n\n    const { organizationSlug: orgSlug, issueId: parsedIssueId } =\n      parseIssueParams({\n        organizationSlug: params.organizationSlug,\n        issueId: params.issueId,\n        issueUrl: params.issueUrl,\n      });\n\n    setTag(\"organization.slug\", orgSlug);\n\n    // Get current issue details first\n    const currentIssue = await withApiErrorHandling(\n      () =>\n        apiService.getIssue({\n          organizationSlug: orgSlug,\n          issueId: parsedIssueId!,\n        }),\n      {\n        organizationSlug: orgSlug,\n        issueId: parsedIssueId,\n      },\n    );\n\n    // Update the issue\n    const updatedIssue = await withApiErrorHandling(\n      () =>\n        apiService.updateIssue({\n          organizationSlug: orgSlug,\n          issueId: parsedIssueId!,\n          status: params.status,\n          assignedTo: params.assignedTo,\n        }),\n      {\n        organizationSlug: orgSlug,\n        issueId: parsedIssueId,\n      },\n    );\n\n    let output = `# Issue ${updatedIssue.shortId} Updated in **${orgSlug}**\\n\\n`;\n    output += `**Issue**: ${updatedIssue.title}\\n`;\n    output += `**URL**: ${apiService.getIssueUrl(orgSlug, updatedIssue.shortId)}\\n\\n`;\n\n    // Show what changed\n    output += \"## Changes Made\\n\\n\";\n\n    if (params.status && currentIssue.status !== params.status) {\n      output += `**Status**: ${currentIssue.status} → **${params.status}**\\n`;\n    }\n\n    if (params.assignedTo) {\n      const oldAssignee = formatAssignedTo(currentIssue.assignedTo ?? null);\n      const newAssignee =\n        params.assignedTo === \"me\" ? \"You\" : params.assignedTo;\n      output += `**Assigned To**: ${oldAssignee} → **${newAssignee}**\\n`;\n    }\n\n    output += \"\\n## Current Status\\n\\n\";\n    output += `**Status**: ${updatedIssue.status}\\n`;\n    const currentAssignee = formatAssignedTo(updatedIssue.assignedTo ?? null);\n    output += `**Assigned To**: ${currentAssignee}\\n`;\n\n    output += \"\\n# Using this information\\n\\n\";\n    output += `- The issue has been successfully updated in Sentry\\n`;\n    output += `- You can view the issue details using: \\`get_issue_details(organizationSlug=\"${orgSlug}\", issueId=\"${updatedIssue.shortId}\")\\`\\n`;\n\n    if (params.status === \"resolved\") {\n      output += `- The issue is now marked as resolved and will no longer generate alerts\\n`;\n    } else if (params.status === \"ignored\") {\n      output += `- The issue is now ignored and will not generate alerts until it escalates\\n`;\n    }\n\n    return output;\n  },\n});\n"],"mappings":";;;;;;;;;;AAiBA,2BAAe,8BAAW;CACxB,MAAM;CACN,aAAa;EACX;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;CACD,EAAC,KAAK,KAAK;CACZ,aAAa;EACX,kBAAkB,qCAAsB,UAAU;EAClD,WAAW,8BAAe,UAAU;EACpC,SAAS,iCAAkB,UAAU;EACrC,UAAU,6BAAc,UAAU;EAClC,QAAQ,gCAAiB,UAAU;EACnC,YAAY,+BAAgB,UAAU;CACvC;CACD,MAAM,QAAQ,QAAQA,SAAwB;EAC5C,MAAM,aAAa,wCAAsB,SAAS,EAChD,WAAW,OAAO,UACnB,EAAC;AAGF,OAAK,OAAO,aAAa,OAAO,QAC9B,OAAM,IAAIC,8BACR;AAIJ,OAAK,OAAO,aAAa,OAAO,iBAC9B,OAAM,IAAIA,8BACR;AAKJ,OAAK,OAAO,WAAW,OAAO,WAC5B,OAAM,IAAIA,8BACR;EAIJ,MAAM,EAAE,kBAAkB,SAAS,SAAS,eAAe,GACzD,uCAAiB;GACf,kBAAkB,OAAO;GACzB,SAAS,OAAO;GAChB,UAAU,OAAO;EAClB,EAAC;AAEJ,4BAAO,qBAAqB,QAAQ;EAGpC,MAAM,eAAe,MAAM,uCACzB,MACE,WAAW,SAAS;GAClB,kBAAkB;GAClB,SAAS;EACV,EAAC,EACJ;GACE,kBAAkB;GAClB,SAAS;EACV,EACF;EAGD,MAAM,eAAe,MAAM,uCACzB,MACE,WAAW,YAAY;GACrB,kBAAkB;GAClB,SAAS;GACT,QAAQ,OAAO;GACf,YAAY,OAAO;EACpB,EAAC,EACJ;GACE,kBAAkB;GAClB,SAAS;EACV,EACF;EAED,IAAI,UAAU,UAAU,aAAa,QAAQ,gBAAgB,QAAQ;AACrE,aAAW,aAAa,aAAa,MAAM;AAC3C,aAAW,WAAW,WAAW,YAAY,SAAS,aAAa,QAAQ,CAAC;AAG5E,YAAU;AAEV,MAAI,OAAO,UAAU,aAAa,WAAW,OAAO,OAClD,YAAW,cAAc,aAAa,OAAO,OAAO,OAAO,OAAO;AAGpE,MAAI,OAAO,YAAY;GACrB,MAAM,cAAc,0CAAiB,aAAa,cAAc,KAAK;GACrE,MAAM,cACJ,OAAO,eAAe,OAAO,QAAQ,OAAO;AAC9C,cAAW,mBAAmB,YAAY,OAAO,YAAY;EAC9D;AAED,YAAU;AACV,aAAW,cAAc,aAAa,OAAO;EAC7C,MAAM,kBAAkB,0CAAiB,aAAa,cAAc,KAAK;AACzE,aAAW,mBAAmB,gBAAgB;AAE9C,YAAU;AACV,aAAW;AACX,aAAW,gFAAgF,QAAQ,cAAc,aAAa,QAAQ;AAEtI,MAAI,OAAO,WAAW,WACpB,YAAW;WACF,OAAO,WAAW,UAC3B,YAAW;AAGb,SAAO;CACR;AACF,EAAC"}