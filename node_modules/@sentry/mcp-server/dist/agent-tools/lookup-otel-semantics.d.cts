import "../schema-xbTf44Hn.cjs";
import "../types-DE-njuHe.cjs";
import { SentryApiService } from "../client-DV68BdcS.cjs";
import "../index-BPSCxsMC.cjs";
import * as ai4 from "ai";
import { z } from "zod";

//#region src/agent-tools/lookup-otel-semantics.d.ts
/**
 * Lookup OpenTelemetry semantic convention attributes for a given namespace
 */
declare function lookupOtelSemantics(namespace: string, searchTerm: string | undefined, dataset: "errors" | "logs" | "spans", apiService: SentryApiService, organizationSlug: string, projectId?: string): Promise<string>;
/**
 * Create the otel-semantics-lookup tool for AI agents
 */
declare function createOtelLookupTool(apiService: SentryApiService, organizationSlug: string, projectId?: string): ai4.Tool<z.ZodObject<{
  namespace: z.ZodString;
  searchTerm: z.ZodOptional<z.ZodString>;
  dataset: z.ZodEnum<["spans", "errors", "logs"]>;
}, "strip", z.ZodTypeAny, {
  namespace: string;
  dataset: "errors" | "spans" | "logs";
  searchTerm?: string | undefined;
}, {
  namespace: string;
  dataset: "errors" | "spans" | "logs";
  searchTerm?: string | undefined;
}>, string> & {
  execute: (args: {
    namespace: string;
    dataset: "errors" | "spans" | "logs";
    searchTerm?: string | undefined;
  }, options: ai4.ToolExecutionOptions) => PromiseLike<string>;
};
//# sourceMappingURL=lookup-otel-semantics.d.ts.map
//#endregion
export { createOtelLookupTool, lookupOtelSemantics };
//# sourceMappingURL=lookup-otel-semantics.d.cts.map