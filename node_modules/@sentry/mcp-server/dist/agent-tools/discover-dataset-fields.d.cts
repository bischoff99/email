import "../schema-xbTf44Hn.cjs";
import "../types-DE-njuHe.cjs";
import { SentryApiService } from "../client-DV68BdcS.cjs";
import "../index-BPSCxsMC.cjs";
import * as ai2 from "ai";
import { z } from "zod";

//#region src/agent-tools/discover-dataset-fields.d.ts
type DatasetType = "events" | "errors" | "search_issues";
interface DatasetField {
  key: string;
  name: string;
  totalValues: number;
  examples?: string[];
}
interface DatasetFieldsResult {
  dataset: string;
  fields: DatasetField[];
  commonPatterns: Array<{
    pattern: string;
    description: string;
  }>;
}
/**
 * Discover available fields for a dataset by querying Sentry's tags API
 */
declare function discoverDatasetFields(apiService: SentryApiService, organizationSlug: string, dataset: DatasetType, options?: {
  projectId?: string;
  includeExamples?: boolean;
}): Promise<DatasetFieldsResult>;
/**
 * Create a tool for discovering available fields in a dataset
 */
declare function createDatasetFieldsTool(apiService: SentryApiService, organizationSlug: string, dataset: DatasetType, projectId?: string): ai2.Tool<z.ZodObject<{
  includeExamples: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
  includeExamples: boolean;
}, {
  includeExamples: boolean;
}>, DatasetFieldsResult> & {
  execute: (args: {
    includeExamples: boolean;
  }, options: ai2.ToolExecutionOptions) => PromiseLike<DatasetFieldsResult>;
};
/**
 * Get example values for common fields
 */
declare function getFieldExamples(key: string, dataset: string): string[] | undefined;
/**
 * Get common search patterns for a dataset
 */
declare function getCommonPatterns(dataset: string): {
  pattern: string;
  description: string;
}[];
//# sourceMappingURL=discover-dataset-fields.d.ts.map
//#endregion
export { DatasetField, DatasetFieldsResult, DatasetType, createDatasetFieldsTool, discoverDatasetFields, getCommonPatterns, getFieldExamples };
//# sourceMappingURL=discover-dataset-fields.d.cts.map