#!/usr/bin/env node
const require_chunk = require('./chunk-DWy1uDak.cjs');
require('./constants-wrEbre3j.cjs');
require('./errors-BtJEw2Z-.cjs');
require('./defineTool-lWNTzWl_.cjs');
const require_url_utils = require('./url-utils-vJo2ER5v.cjs');
require('./schema-C0LznFvu.cjs');
require('./client-CPrEfAwa.cjs');
require('./types-DdloOYgD.cjs');
require('./api-client-BWt6M7ij.cjs');
require('./api-utils-DFWUfQ83.cjs');
require('./whoami-BOJHfdih.cjs');
require('./find-organizations-BDtHkcFV.cjs');
require('./schema-BL3kwfOA.cjs');
require('./find-teams-DXyzyQOy.cjs');
require('./find-projects-Dh-1AK-m.cjs');
require('./find-releases-BsAkl--F.cjs');
require('./issue-helpers-s5fKLwJZ.cjs');
require('./seer-utils-C7Kv0gr8.cjs');
require('./formatting-C180PVwd.cjs');
require('./issue-utils-pdbo-5LW.cjs');
require('./get-issue-details-C96fhps3.cjs');
require('./get-event-attachment-BzhDeM6z.cjs');
require('./formatting-utils-DDz14xeB.cjs');
require('./update-issue-DqUsAuTd.cjs');
require('./lookup-otel-semantics-BbriXZAx.cjs');
require('./whoami-CoZJKpys.cjs');
require('./logging-BpL53bY6.cjs');
require('./utils-CqbeJfE1.cjs');
require('./agent-DpCCnhh5.cjs');
require('./formatters-CfeBjhXZ.cjs');
require('./config-CD-5FpOO.cjs');
require('./handler-7T1iMsQU.cjs');
require('./search-events-BBFPuvRq.cjs');
require('./create-team-CSBXDcoD.cjs');
require('./create-project-4R4aZMoc.cjs');
require('./update-project-DQu5PnE3.cjs');
require('./create-dsn-Bgwi-Ygi.cjs');
require('./find-dsns-CkvahHwJ.cjs');
require('./fetch-utils-DkcYwqBo.cjs');
require('./analyze-issue-with-seer-ByoDTsq-.cjs');
require('./fetch-utils-DeZcERfe.cjs');
require('./search-docs-EbjJuL9Q.cjs');
require('./get-doc-BfMg0GIa.cjs');
require('./discover-dataset-fields-Cl7HpVkm.cjs');
require('./config-FWsgDbm7.cjs');
require('./agent-Cody_f0d.cjs');
require('./formatters-DbqofIoy.cjs');
require('./handler-DEjS3yks.cjs');
require('./search-issues-Biu64RkQ.cjs');
require('./tools-qfk-QAo0.cjs');
require('./resources-Dadvq5Fm.cjs');
require('./promptDefinitions-CWV8hsUX.cjs');
require('./prompts-BTtNbKQR.cjs');
const require_version = require('./version-Bu9nGzm5.cjs');
require('./server-Dv9HxoRk.cjs');
const require_stdio = require('./stdio-C6MAgHmA.cjs');
const __modelcontextprotocol_sdk_server_mcp_js = require_chunk.__toESM(require("@modelcontextprotocol/sdk/server/mcp.js"));
const __sentry_node = require_chunk.__toESM(require("@sentry/node"));

//#region src/index.ts
let accessToken = process.env.SENTRY_ACCESS_TOKEN;
let sentryHost = "sentry.io";
let mcpUrl = process.env.MCP_URL || "https://mcp.sentry.dev";
let sentryDsn = process.env.SENTRY_DSN || "https://d0805acebb937435abcb5958da99cdab@o1.ingest.us.sentry.io/4509062593708032";
if (process.env.SENTRY_URL) sentryHost = require_url_utils.validateAndParseSentryUrl(process.env.SENTRY_URL);
else if (process.env.SENTRY_HOST) {
	require_url_utils.validateSentryHost(process.env.SENTRY_HOST);
	sentryHost = process.env.SENTRY_HOST;
}
const packageName = "@sentry/mcp-server";
function getUsage() {
	return `Usage: ${packageName} --access-token=<token> [--host=<host>|--url=<url>] [--mcp-url=<url>] [--sentry-dsn=<dsn>]`;
}
for (const arg of process.argv.slice(2)) {
	if (arg === "--version" || arg === "-v") {
		console.log(`${packageName} ${require_version.LIB_VERSION}`);
		process.exit(0);
	}
	if (arg.startsWith("--access-token=")) accessToken = arg.split("=")[1];
	else if (arg.startsWith("--host=")) {
		sentryHost = arg.split("=")[1];
		require_url_utils.validateSentryHost(sentryHost);
	} else if (arg.startsWith("--url=")) {
		const url = arg.split("=")[1];
		sentryHost = require_url_utils.validateAndParseSentryUrl(url);
	} else if (arg.startsWith("--mcp-url=")) mcpUrl = arg.split("=")[1];
	else if (arg.startsWith("--sentry-dsn=")) sentryDsn = arg.split("=")[1];
	else {
		console.error("Error: Invalid argument:", arg);
		console.error(getUsage());
		process.exit(1);
	}
}
if (!accessToken) {
	console.error("Error: No access token was provided. Pass one with `--access-token` or via `SENTRY_ACCESS_TOKEN`.");
	console.error(getUsage());
	process.exit(1);
}
if (!process.env.OPENAI_API_KEY) {
	console.warn("Warning: OPENAI_API_KEY environment variable is not set.");
	console.warn("The following AI-powered search tools will be unavailable:");
	console.warn("  - search_events (natural language event search)");
	console.warn("  - search_issues (natural language issue search)");
	console.warn("All other tools will function normally. To enable AI-powered search, set OPENAI_API_KEY.");
	console.warn("");
}
__sentry_node.init({
	dsn: sentryDsn,
	sendDefaultPii: true,
	tracesSampleRate: 1,
	initialScope: { tags: {
		"mcp.server_version": require_version.LIB_VERSION,
		"mcp.transport": "stdio",
		"sentry.host": sentryHost,
		"mcp.mcp-url": mcpUrl
	} },
	release: "0.17.1",
	integrations: [
		__sentry_node.consoleLoggingIntegration(),
		__sentry_node.zodErrorsIntegration(),
		__sentry_node.vercelAIIntegration({
			recordInputs: true,
			recordOutputs: true
		})
	],
	environment: "stdio"
});
const server = new __modelcontextprotocol_sdk_server_mcp_js.McpServer({
	name: "Sentry MCP",
	version: require_version.LIB_VERSION
});
const instrumentedServer = __sentry_node.wrapMcpServerWithSentry(server);
const SENTRY_TIMEOUT = 5e3;
require_stdio.startStdio(instrumentedServer, {
	accessToken,
	organizationSlug: null,
	sentryHost,
	mcpUrl
}).catch((err) => {
	console.error("Server error:", err);
	__sentry_node.flush(SENTRY_TIMEOUT);
	process.exit(1);
});
__sentry_node.flush(SENTRY_TIMEOUT);

//#endregion
//# sourceMappingURL=index.cjs.map