{"version":3,"file":"get-doc-BfMg0GIa.cjs","names":["context: ServerContext","UserInputError","ApiError"],"sources":["../src/tools/get-doc.ts"],"sourcesContent":["import { z } from \"zod\";\nimport { setTag } from \"@sentry/core\";\nimport { defineTool } from \"./utils/defineTool\";\nimport { fetchWithTimeout } from \"./utils/fetch-utils\";\nimport { UserInputError } from \"../errors\";\nimport { ApiError } from \"../api-client/index\";\nimport type { ServerContext } from \"../types\";\n\nexport default defineTool({\n  name: \"get_doc\",\n  description: [\n    \"Fetch the full markdown content of a Sentry documentation page.\",\n    \"\",\n    \"Use this tool when you need to:\",\n    \"- Read the complete documentation for a specific topic\",\n    \"- Get detailed implementation examples or code snippets\",\n    \"- Access the full context of a documentation page\",\n    \"- Extract specific sections from documentation\",\n    \"\",\n    \"<examples>\",\n    \"### Get the Next.js integration guide\",\n    \"\",\n    \"```\",\n    \"get_doc(path='/platforms/javascript/guides/nextjs.md')\",\n    \"```\",\n    \"</examples>\",\n    \"\",\n    \"<hints>\",\n    \"- Use the path from search_docs results for accurate fetching\",\n    \"- Paths should end with .md extension\",\n    \"</hints>\",\n  ].join(\"\\n\"),\n  inputSchema: {\n    path: z\n      .string()\n      .trim()\n      .describe(\n        \"The documentation path (e.g., '/platforms/javascript/guides/nextjs.md'). Get this from search_docs results.\",\n      ),\n  },\n  async handler(params, context: ServerContext) {\n    setTag(\"doc.path\", params.path);\n\n    let output = `# Documentation Content\\n\\n`;\n    output += `**Path**: ${params.path}\\n\\n`;\n\n    // Validate path format\n    if (!params.path.endsWith(\".md\")) {\n      throw new UserInputError(\n        \"Invalid documentation path. Path must end with .md extension.\",\n      );\n    }\n\n    // Use docs.sentry.io for now - will be configurable via flag in the future\n    const baseUrl = \"https://docs.sentry.io\";\n\n    // Construct the full URL for the markdown file\n    const docUrl = new URL(params.path, baseUrl);\n\n    // Validate domain whitelist for security\n    const allowedDomains = [\"docs.sentry.io\", \"develop.sentry.io\"];\n    if (!allowedDomains.includes(docUrl.hostname)) {\n      throw new UserInputError(\n        `Invalid domain. Documentation can only be fetched from allowed domains: ${allowedDomains.join(\", \")}`,\n      );\n    }\n\n    const response = await fetchWithTimeout(\n      docUrl.toString(),\n      {\n        headers: {\n          Accept: \"text/plain, text/markdown\",\n          \"User-Agent\": \"Sentry-MCP/1.0\",\n        },\n      },\n      15000, // 15 second timeout\n    );\n\n    if (!response.ok) {\n      if (response.status === 404) {\n        output += `**Error**: Documentation not found at this path.\\n\\n`;\n        output += `Please verify the path is correct. Common issues:\\n`;\n        output += `- Path should start with / (e.g., /platforms/javascript/guides/nextjs.md)\\n`;\n        output += `- Path should match exactly what's shown in search_docs results\\n`;\n        output += `- Some pages may have been moved or renamed\\n\\n`;\n        output += `Try searching again with \\`search_docs()\\` to find the correct path.\\n`;\n        return output;\n      }\n\n      throw new ApiError(\n        `Failed to fetch documentation: ${response.statusText}`,\n        response.status,\n      );\n    }\n\n    const content = await response.text();\n\n    // Check if we got HTML instead of markdown (wrong path format)\n    if (\n      content.trim().startsWith(\"<!DOCTYPE\") ||\n      content.trim().startsWith(\"<html\")\n    ) {\n      output += `> **Error**: Received HTML instead of markdown. The path may be incorrect.\\n\\n`;\n      output += `Make sure to use the .md extension in the path.\\n`;\n      output += `Example: /platforms/javascript/guides/nextjs.md\\n`;\n      return output;\n    }\n\n    // Add the markdown content\n    output += \"---\\n\\n\";\n    output += content;\n    output += \"\\n\\n---\\n\\n\";\n\n    output += \"## Using this documentation\\n\\n\";\n    output +=\n      \"- This is the raw markdown content from Sentry's documentation\\n\";\n    output +=\n      \"- Code examples and configuration snippets can be copied directly\\n\";\n    output +=\n      \"- Links in the documentation are relative to https://docs.sentry.io\\n\";\n    output +=\n      \"- For more related topics, use `search_docs()` to find additional pages\\n\";\n\n    return output;\n  },\n});\n"],"mappings":";;;;;;;;;AAQA,sBAAe,8BAAW;CACxB,MAAM;CACN,aAAa;EACX;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;CACD,EAAC,KAAK,KAAK;CACZ,aAAa,EACX,MAAM,MACH,QAAQ,CACR,MAAM,CACN,SACC,8GACD,CACJ;CACD,MAAM,QAAQ,QAAQA,SAAwB;AAC5C,4BAAO,YAAY,OAAO,KAAK;EAE/B,IAAI,UAAU;AACd,aAAW,YAAY,OAAO,KAAK;AAGnC,OAAK,OAAO,KAAK,SAAS,MAAM,CAC9B,OAAM,IAAIC,8BACR;EAKJ,MAAM,UAAU;EAGhB,MAAM,SAAS,IAAI,IAAI,OAAO,MAAM;EAGpC,MAAM,iBAAiB,CAAC,kBAAkB,mBAAoB;AAC9D,OAAK,eAAe,SAAS,OAAO,SAAS,CAC3C,OAAM,IAAIA,+BACP,0EAA0E,eAAe,KAAK,KAAK;EAIxG,MAAM,WAAW,MAAM,qCACrB,OAAO,UAAU,EACjB,EACE,SAAS;GACP,QAAQ;GACR,cAAc;EACf,EACF,GACD,KACD;AAED,OAAK,SAAS,IAAI;AAChB,OAAI,SAAS,WAAW,KAAK;AAC3B,eAAW;AACX,eAAW;AACX,eAAW;AACX,eAAW;AACX,eAAW;AACX,eAAW;AACX,WAAO;GACR;AAED,SAAM,IAAIC,yBACP,iCAAiC,SAAS,cAC3C,SAAS;EAEZ;EAED,MAAM,UAAU,MAAM,SAAS,MAAM;AAGrC,MACE,QAAQ,MAAM,CAAC,WAAW,YAAY,IACtC,QAAQ,MAAM,CAAC,WAAW,QAAQ,EAClC;AACA,cAAW;AACX,cAAW;AACX,cAAW;AACX,UAAO;EACR;AAGD,YAAU;AACV,YAAU;AACV,YAAU;AAEV,YAAU;AACV,YACE;AACF,YACE;AACF,YACE;AACF,YACE;AAEF,SAAO;CACR;AACF,EAAC"}