{"version":3,"file":"resources-jcFoc4JU.js","names":["resource: ResourceConfig","url: URL","_extra: RequestHandlerExtra<any, any>","RESOURCES: ResourceConfig[]"],"sources":["../src/resources.ts"],"sourcesContent":["/**\n * MCP Resources for external documentation and reference materials.\n *\n * Defines MCP resources that provide access to external documentation and\n * knowledge bases. Resources enable LLMs to access contextual information\n * during tool execution without embedding large documents in the codebase.\n *\n * @see https://modelcontextprotocol.io/docs/concepts/resources - MCP Resources specification\n *\n * @example Resource Definition\n * ```typescript\n * {\n *   name: \"sentry-docs-platform\",\n *   template: new ResourceTemplate(\"https://docs.sentry.io/platforms/{platform}/\"),\n *   mimeType: \"text/markdown\",\n *   description: \"Sentry SDK documentation for {platform}\",\n *   handler: sentryDocsHandler,\n * }\n * ```\n */\nimport {\n  ResourceTemplate,\n  type ReadResourceCallback,\n  type ReadResourceTemplateCallback,\n} from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport type { ReadResourceResult } from \"@modelcontextprotocol/sdk/types.js\";\nimport type { RequestHandlerExtra } from \"@modelcontextprotocol/sdk/shared/protocol.js\";\nimport { UserInputError } from \"./errors\";\n\n/**\n * Resource configuration for regular URI resources\n */\nexport type UriResourceConfig = {\n  name: string;\n  description: string;\n  mimeType: string;\n  uri: string;\n  handler: ReadResourceCallback;\n};\n\n/**\n * Resource configuration for URI template resources\n */\nexport type TemplateResourceConfig = {\n  name: string;\n  description: string;\n  mimeType: string;\n  template: ResourceTemplate;\n  handler: ReadResourceCallback; // Changed back to ReadResourceCallback\n};\n\n/**\n * Resource configuration with handler function\n */\nexport type ResourceConfig = UriResourceConfig | TemplateResourceConfig;\n\n/**\n * Type guard to check if a resource uses a URI template\n */\nexport function isTemplateResource(\n  resource: ResourceConfig,\n): resource is TemplateResourceConfig {\n  return (\n    \"template\" in resource && resource.template instanceof ResourceTemplate\n  );\n}\n\n/**\n * Fetches raw content from GitHub repositories.\n * Converts GitHub blob URLs to raw content URLs.\n */\nasync function fetchRawGithubContent(rawPath: string) {\n  const path = rawPath.replace(\"/blob\", \"\");\n\n  return fetch(`https://raw.githubusercontent.com${path}`).then((res) =>\n    res.text(),\n  );\n}\n\n/**\n * Default handler for GitHub-hosted resources.\n * Converts GitHub blob URLs to raw content URLs and returns MCP resource format.\n */\nasync function defaultGitHubHandler(\n  url: URL,\n  _extra: RequestHandlerExtra<any, any>,\n): Promise<ReadResourceResult> {\n  const rawPath = url.pathname;\n  const content = await fetchRawGithubContent(rawPath);\n  return {\n    contents: [\n      {\n        uri: url.toString(),\n        mimeType: \"text/plain\",\n        text: content,\n      },\n    ],\n  };\n}\n\n/**\n * Fetches Sentry documentation in markdown format.\n * Converts docs.sentry.io URLs to their markdown equivalents.\n *\n * The handler receives the exact URI from the resource definition,\n * but dynamically constructs the markdown URL based on the actual request.\n */\nasync function sentryDocsHandler(\n  url: URL,\n  _extra: RequestHandlerExtra<any, any>,\n): Promise<ReadResourceResult> {\n  // The URL passed here is the actual docs.sentry.io URL being requested\n  // Transform it to fetch the markdown version\n  const path = `${url.pathname.replace(/\\/$/, \"\")}.md`;\n  const mdUrl = `${url.origin}${path}`;\n\n  const response = await fetch(mdUrl, {\n    headers: {\n      \"User-Agent\": \"Sentry MCP Server\",\n    },\n  });\n  if (!response.ok) {\n    if (response.status === 404) {\n      throw new UserInputError(\n        `Sentry documentation not found at ${url.pathname}. Please check the URL is correct.`,\n      );\n    }\n    throw new Error(\n      `Failed to fetch Sentry docs: ${response.status} ${response.statusText}`,\n    );\n  }\n\n  const content = await response.text();\n\n  return {\n    contents: [\n      {\n        uri: url.toString(),\n        mimeType: \"text/markdown\",\n        text: content,\n      },\n    ],\n  };\n}\n\n/**\n * Registry of all MCP resources available to LLMs.\n * Defines external documentation and reference materials with their handlers.\n */\n// XXX: Try to keep the description in sync with the MDC file itself\n// Note: In an ideal world these would live on-disk in this same repo and we'd\n// simply parse everything out, but given we're running the service on cloudflare\n// and the author barely knows TypeScript, we're opting for a solution we've\n// seen employed elsewhere (h/t Neon)\n\n// Import platform constants from constants\nimport { SENTRY_PLATFORMS_BASE, SENTRY_FRAMEWORKS } from \"./constants\";\n\nexport const RESOURCES: ResourceConfig[] = [\n  // Platform documentation with dynamic segments\n  {\n    name: \"sentry-docs-platform\",\n    template: new ResourceTemplate(\n      \"https://docs.sentry.io/platforms/{platform}/\",\n      {\n        list: async (_extra) => ({\n          resources: SENTRY_PLATFORMS_BASE.map((platform) => ({\n            uri: `https://docs.sentry.io/platforms/${platform}/`,\n            name: `${platform}-docs`,\n            description: `Sentry SDK documentation for ${platform}`,\n            mimeType: \"text/markdown\",\n          })),\n        }),\n      },\n    ),\n    mimeType: \"text/markdown\",\n    description: \"Sentry SDK documentation for {platform}\",\n    handler: sentryDocsHandler,\n  } as TemplateResourceConfig,\n  {\n    name: \"sentry-docs-platform-guide\",\n    template: new ResourceTemplate(\n      \"https://docs.sentry.io/platforms/{platform}/guides/{framework}/\",\n      {\n        list: async (_extra) => ({\n          resources: Object.entries(SENTRY_FRAMEWORKS).flatMap(\n            ([platform, frameworks]) =>\n              frameworks.map((framework) => ({\n                uri: `https://docs.sentry.io/platforms/${platform}/guides/${framework}/`,\n                name: `${platform}-${framework}-guide`,\n                description: `Sentry integration guide for ${framework} on ${platform}`,\n                mimeType: \"text/markdown\",\n              })),\n          ),\n        }),\n      },\n    ),\n    mimeType: \"text/markdown\",\n    description: \"Sentry integration guide for {framework} on {platform}\",\n    handler: sentryDocsHandler,\n  } as TemplateResourceConfig,\n];\n"],"mappings":";;;;;;;;AA2DA,SAAgB,mBACdA,UACoC;AACpC,QACE,cAAc,YAAY,SAAS,oBAAoB;AAE1D;;;;;;;;AA0CD,eAAe,kBACbC,KACAC,QAC6B;CAG7B,MAAM,UAAU,IAAI,SAAS,QAAQ,OAAO,GAAG,CAAC;CAChD,MAAM,WAAW,IAAI,SAAS;CAE9B,MAAM,WAAW,MAAM,MAAM,OAAO,EAClC,SAAS,EACP,cAAc,oBACf,EACF,EAAC;AACF,MAAK,SAAS,IAAI;AAChB,MAAI,SAAS,WAAW,IACtB,OAAM,IAAI,gBACP,oCAAoC,IAAI,SAAS;AAGtD,QAAM,IAAI,OACP,+BAA+B,SAAS,OAAO,GAAG,SAAS;CAE/D;CAED,MAAM,UAAU,MAAM,SAAS,MAAM;AAErC,QAAO,EACL,UAAU,CACR;EACE,KAAK,IAAI,UAAU;EACnB,UAAU;EACV,MAAM;CACP,CACF,EACF;AACF;AAeD,MAAaC,YAA8B,CAEzC;CACE,MAAM;CACN,UAAU,IAAI,iBACZ,gDACA,EACE,MAAM,OAAO,YAAY,EACvB,WAAW,sBAAsB,IAAI,CAAC,cAAc;EAClD,MAAM,mCAAmC,SAAS;EAClD,SAAS,SAAS;EAClB,cAAc,+BAA+B;EAC7C,UAAU;CACX,GAAE,CACJ,GACF;CAEH,UAAU;CACV,aAAa;CACb,SAAS;AACV,GACD;CACE,MAAM;CACN,UAAU,IAAI,iBACZ,mEACA,EACE,MAAM,OAAO,YAAY,EACvB,WAAW,OAAO,QAAQ,kBAAkB,CAAC,QAC3C,CAAC,CAAC,UAAU,WAAW,KACrB,WAAW,IAAI,CAAC,eAAe;EAC7B,MAAM,mCAAmC,SAAS,UAAU,UAAU;EACtE,SAAS,SAAS,GAAG,UAAU;EAC/B,cAAc,+BAA+B,UAAU,MAAM;EAC7D,UAAU;CACX,GAAE,CACN,CACF,GACF;CAEH,UAAU;CACV,aAAa;CACb,SAAS;AACV,CACF"}