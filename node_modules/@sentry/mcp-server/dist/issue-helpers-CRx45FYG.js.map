{"version":3,"file":"issue-helpers-CRx45FYG.js","names":["url: string","parsedUrl: URL","organizationSlug: string | undefined","issueId: string"],"sources":["../src/internal/issue-helpers.ts"],"sourcesContent":["/**\n * Issue parameter parsing and validation utilities.\n *\n * Handles flexible input formats for Sentry issues (URLs vs explicit parameters),\n * extracts organization and issue identifiers, and validates issue ID formats.\n * Provides robust parsing for LLM-generated parameters that may contain formatting\n * inconsistencies.\n */\n\nimport { UserInputError } from \"../errors\";\n\n/**\n * Extracts the Sentry issue ID and organization slug from a full URL\n *\n * @param url - A full Sentry issue URL\n * @returns Object containing the numeric issue ID and organization slug (if found)\n * @throws Error if the input is invalid\n */\nexport function extractIssueId(url: string): {\n  issueId: string;\n  organizationSlug: string;\n} {\n  if (!url || typeof url !== \"string\") {\n    throw new UserInputError(\n      \"Invalid Sentry issue URL. URL must be a non-empty string.\",\n    );\n  }\n\n  if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n    throw new UserInputError(\n      \"Invalid Sentry issue URL. Must start with http:// or https://\",\n    );\n  }\n\n  let parsedUrl: URL;\n  try {\n    parsedUrl = new URL(url);\n  } catch (error) {\n    throw new UserInputError(\n      `Invalid Sentry issue URL. Unable to parse URL: ${url}`,\n    );\n  }\n\n  const pathParts = parsedUrl.pathname.split(\"/\").filter(Boolean);\n  if (pathParts.length < 2 || !pathParts.includes(\"issues\")) {\n    throw new UserInputError(\n      \"Invalid Sentry issue URL. Path must contain '/issues/{issue_id}'\",\n    );\n  }\n\n  const issueId = pathParts[pathParts.indexOf(\"issues\") + 1];\n  if (!issueId) {\n    throw new UserInputError(\"Unable to determine issue ID from URL.\");\n  }\n\n  // Extract organization slug from either the path or subdomain\n  let organizationSlug: string | undefined;\n  if (pathParts.includes(\"organizations\")) {\n    organizationSlug = pathParts[pathParts.indexOf(\"organizations\") + 1];\n  } else if (pathParts.length > 1 && pathParts[0] !== \"issues\") {\n    // If URL is like sentry.io/sentry/issues/123\n    organizationSlug = pathParts[0];\n  } else {\n    // Check for subdomain\n    const hostParts = parsedUrl.hostname.split(\".\");\n    if (hostParts.length > 2 && hostParts[0] !== \"www\") {\n      organizationSlug = hostParts[0];\n    }\n  }\n\n  if (!organizationSlug) {\n    throw new UserInputError(\n      \"Invalid Sentry issue URL. Could not determine organization.\",\n    );\n  }\n\n  return { issueId, organizationSlug };\n}\n\n/**\n * Sometimes the LLM will pass in a funky issue shortId. For example it might pass\n * in \"CLOUDFLARE-MCP-41.\" instead of \"CLOUDFLARE-MCP-41\". This function attempts to\n * fix common issues.\n *\n * @param issueId - The issue ID to parse\n * @returns The parsed issue ID\n */\nexport function parseIssueId(issueId: string) {\n  if (!issueId.trim()) {\n    throw new UserInputError(\"Issue ID cannot be empty\");\n  }\n\n  let finalIssueId = issueId;\n  // remove trailing punctuation\n  finalIssueId = finalIssueId.replace(/[^\\w-]/g, \"\");\n\n  if (!finalIssueId) {\n    throw new UserInputError(\n      \"Issue ID cannot be empty after removing special characters\",\n    );\n  }\n\n  // Validate against common Sentry issue ID patterns\n  // Either numeric IDs or PROJECT-ABC123 format\n  // Allow project codes to start with alphanumeric characters (including numbers)\n  const validFormatRegex = /^(\\d+|[A-Za-z0-9][\\w-]*-[A-Za-z0-9]+)$/;\n\n  if (!validFormatRegex.test(finalIssueId)) {\n    throw new UserInputError(\n      `Invalid issue ID format: \"${finalIssueId}\". Expected either a numeric ID or a project code followed by an alphanumeric identifier (e.g., \"PROJECT-ABC123\").`,\n    );\n  }\n\n  return finalIssueId;\n}\n\n/**\n * Parses issue parameters from a variety of formats.\n *\n * @param params - Object containing issue URL, issue ID, and organization slug\n * @returns Object containing the parsed organization slug and issue ID\n * @throws Error if the input is invalid\n */\nexport function parseIssueParams({\n  issueUrl,\n  issueId,\n  organizationSlug,\n}: {\n  issueUrl?: string | null;\n  issueId?: string | null;\n  organizationSlug?: string | null;\n}): {\n  organizationSlug: string;\n  issueId: string;\n} {\n  if (issueUrl) {\n    const resolved = extractIssueId(issueUrl);\n    if (!resolved) {\n      throw new Error(\n        \"Invalid Sentry issue URL. Path should contain '/issues/{issue_id}'\",\n      );\n    }\n    return {\n      ...resolved,\n      issueId: parseIssueId(resolved.issueId),\n    };\n  }\n\n  if (!organizationSlug) {\n    throw new UserInputError(\"Organization slug is required\");\n  }\n\n  if (issueId) {\n    return {\n      organizationSlug,\n      issueId: parseIssueId(issueId),\n    };\n  }\n\n  throw new UserInputError(\"Either issueId or issueUrl must be provided\");\n}\n"],"mappings":";;;;;;;;;;AAkBA,SAAgB,eAAeA,KAG7B;AACA,MAAK,cAAc,QAAQ,SACzB,OAAM,IAAI,eACR;AAIJ,MAAK,IAAI,WAAW,UAAU,KAAK,IAAI,WAAW,WAAW,CAC3D,OAAM,IAAI,eACR;CAIJ,IAAIC;AACJ,KAAI;AACF,cAAY,IAAI,IAAI;CACrB,SAAQ,OAAO;AACd,QAAM,IAAI,gBACP,iDAAiD;CAErD;CAED,MAAM,YAAY,UAAU,SAAS,MAAM,IAAI,CAAC,OAAO,QAAQ;AAC/D,KAAI,UAAU,SAAS,MAAM,UAAU,SAAS,SAAS,CACvD,OAAM,IAAI,eACR;CAIJ,MAAM,UAAU,UAAU,UAAU,QAAQ,SAAS,GAAG;AACxD,MAAK,QACH,OAAM,IAAI,eAAe;CAI3B,IAAIC;AACJ,KAAI,UAAU,SAAS,gBAAgB,CACrC,oBAAmB,UAAU,UAAU,QAAQ,gBAAgB,GAAG;UACzD,UAAU,SAAS,KAAK,UAAU,OAAO,SAElD,oBAAmB,UAAU;MACxB;EAEL,MAAM,YAAY,UAAU,SAAS,MAAM,IAAI;AAC/C,MAAI,UAAU,SAAS,KAAK,UAAU,OAAO,MAC3C,oBAAmB,UAAU;CAEhC;AAED,MAAK,iBACH,OAAM,IAAI,eACR;AAIJ,QAAO;EAAE;EAAS;CAAkB;AACrC;;;;;;;;;AAUD,SAAgB,aAAaC,SAAiB;AAC5C,MAAK,QAAQ,MAAM,CACjB,OAAM,IAAI,eAAe;CAG3B,IAAI,eAAe;AAEnB,gBAAe,aAAa,QAAQ,WAAW,GAAG;AAElD,MAAK,aACH,OAAM,IAAI,eACR;CAOJ,MAAM,mBAAmB;AAEzB,MAAK,iBAAiB,KAAK,aAAa,CACtC,OAAM,IAAI,gBACP,4BAA4B,aAAa;AAI9C,QAAO;AACR;;;;;;;;AASD,SAAgB,iBAAiB,EAC/B,UACA,SACA,kBAKD,EAGC;AACA,KAAI,UAAU;EACZ,MAAM,WAAW,eAAe,SAAS;AACzC,OAAK,SACH,OAAM,IAAI,MACR;AAGJ,SAAO;GACL,GAAG;GACH,SAAS,aAAa,SAAS,QAAQ;EACxC;CACF;AAED,MAAK,iBACH,OAAM,IAAI,eAAe;AAG3B,KAAI,QACF,QAAO;EACL;EACA,SAAS,aAAa,QAAQ;CAC/B;AAGH,OAAM,IAAI,eAAe;AAC1B"}