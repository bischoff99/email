const require_chunk = require('./chunk-DWy1uDak.cjs');
const require_errors = require('./errors-BtJEw2Z-.cjs');
const require_defineTool = require('./defineTool-lWNTzWl_.cjs');
const require_api_utils = require('./api-utils-DFWUfQ83.cjs');
const require_schema = require('./schema-BL3kwfOA.cjs');
const require_issue_helpers = require('./issue-helpers-s5fKLwJZ.cjs');
const require_formatting = require('./formatting-C180PVwd.cjs');
const zod = require_chunk.__toESM(require("zod"));
const __sentry_core = require_chunk.__toESM(require("@sentry/core"));

//#region src/tools/get-issue-details.ts
var get_issue_details_default = require_defineTool.defineTool({
	name: "get_issue_details",
	description: [
		"Get detailed information about a specific Sentry issue by ID.",
		"",
		"üîç USE THIS TOOL WHEN USERS:",
		"- Provide a specific issue ID (e.g., 'CLOUDFLARE-MCP-41', 'PROJECT-123')",
		"- Ask to 'explain [ISSUE-ID]', 'tell me about [ISSUE-ID]'",
		"- Want details/stacktrace/analysis for a known issue",
		"- Provide a Sentry issue URL",
		"",
		"‚ùå DO NOT USE for:",
		"- General searching or listing issues (use search_issues)",
		"- Root cause analysis (use analyze_issue_with_seer)",
		"",
		"TRIGGER PATTERNS:",
		"- 'Explain ISSUE-123' ‚Üí use get_issue_details",
		"- 'Tell me about PROJECT-456' ‚Üí use get_issue_details",
		"- 'What happened in [issue URL]' ‚Üí use get_issue_details",
		"",
		"<examples>",
		"### Explain specific issue",
		"```",
		"get_issue_details(organizationSlug='my-organization', issueId='CLOUDFLARE-MCP-41')",
		"```",
		"",
		"### Get details for event ID",
		"```",
		"get_issue_details(organizationSlug='my-organization', eventId='c49541c747cb4d8aa3efb70ca5aba243')",
		"```",
		"</examples>",
		"",
		"<hints>",
		"- If the user provides the `issueUrl`, you can ignore the other parameters.",
		"- If the user provides `issueId` or `eventId` (only one is needed), `organizationSlug` is required.",
		"</hints>"
	].join("\n"),
	inputSchema: {
		organizationSlug: require_schema.ParamOrganizationSlug.optional(),
		regionUrl: require_schema.ParamRegionUrl.optional(),
		issueId: require_schema.ParamIssueShortId.optional(),
		eventId: zod.z.string().trim().describe("The ID of the event.").optional(),
		issueUrl: require_schema.ParamIssueUrl.optional()
	},
	async handler(params, context) {
		const apiService = require_api_utils.apiServiceFromContext(context, { regionUrl: params.regionUrl });
		if (params.eventId) {
			const orgSlug$1 = params.organizationSlug;
			if (!orgSlug$1) throw new require_errors.UserInputError("`organizationSlug` is required when providing `eventId`");
			(0, __sentry_core.setTag)("organization.slug", orgSlug$1);
			const [issue$1] = await apiService.listIssues({
				organizationSlug: orgSlug$1,
				query: params.eventId
			});
			if (!issue$1) return `# Event Not Found\n\nNo issue found for Event ID: ${params.eventId}`;
			const event$1 = await apiService.getEventForIssue({
				organizationSlug: orgSlug$1,
				issueId: issue$1.shortId,
				eventId: params.eventId
			});
			let autofixState$1;
			try {
				autofixState$1 = await apiService.getAutofixState({
					organizationSlug: orgSlug$1,
					issueId: issue$1.shortId
				});
			} catch (error) {}
			return require_formatting.formatIssueOutput({
				organizationSlug: orgSlug$1,
				issue: issue$1,
				event: event$1,
				apiService,
				autofixState: autofixState$1
			});
		}
		if (!params.issueUrl && !params.issueId) throw new require_errors.UserInputError("Either `issueId` or `issueUrl` must be provided");
		if (!params.issueUrl && !params.organizationSlug) throw new require_errors.UserInputError("`organizationSlug` is required when providing `issueId`");
		const { organizationSlug: orgSlug, issueId: parsedIssueId } = require_issue_helpers.parseIssueParams({
			organizationSlug: params.organizationSlug,
			issueId: params.issueId,
			issueUrl: params.issueUrl
		});
		(0, __sentry_core.setTag)("organization.slug", orgSlug);
		const issue = await require_api_utils.withApiErrorHandling(() => apiService.getIssue({
			organizationSlug: orgSlug,
			issueId: parsedIssueId
		}), {
			organizationSlug: orgSlug,
			issueId: parsedIssueId
		});
		const event = await apiService.getLatestEventForIssue({
			organizationSlug: orgSlug,
			issueId: issue.shortId
		});
		let autofixState;
		try {
			autofixState = await apiService.getAutofixState({
				organizationSlug: orgSlug,
				issueId: issue.shortId
			});
		} catch (error) {}
		return require_formatting.formatIssueOutput({
			organizationSlug: orgSlug,
			issue,
			event,
			apiService,
			autofixState
		});
	}
});

//#endregion
Object.defineProperty(exports, 'get_issue_details_default', {
  enumerable: true,
  get: function () {
    return get_issue_details_default;
  }
});
//# sourceMappingURL=get-issue-details-C96fhps3.cjs.map