import { UserInputError } from "./errors-D_R568zP.js";
import { logError } from "./logging-tGU_SYcA.js";
import { z } from "zod";
import { tool } from "ai";

//#region src/tools/search-events/utils.ts
function getStringValue(event, key, defaultValue = "") {
	const value = event[key];
	return typeof value === "string" ? value : defaultValue;
}
function getNumberValue(event, key) {
	const value = event[key];
	return typeof value === "number" ? value : void 0;
}
function isAggregateQuery(fields) {
	return fields.some((field) => field.includes("(") && field.includes(")"));
}
async function fetchCustomAttributes(apiService, organizationSlug, dataset, projectId, timeParams) {
	const customAttributes = {};
	const fieldTypes = {};
	try {
		if (dataset === "errors") {
			const tagsResponse = await apiService.listTags({
				organizationSlug,
				dataset: "events",
				project: projectId,
				statsPeriod: "14d",
				useCache: true,
				useFlagsBackend: true
			});
			for (const tag of tagsResponse) if (tag.key && !tag.key.startsWith("sentry:")) customAttributes[tag.key] = tag.name || tag.key;
		} else {
			const itemType = dataset === "logs" ? "logs" : "spans";
			const attributesResponse = await apiService.listTraceItemAttributes({
				organizationSlug,
				itemType,
				project: projectId,
				statsPeriod: "14d"
			});
			for (const attr of attributesResponse) if (attr.key) {
				customAttributes[attr.key] = attr.name || attr.key;
				if (attr.type && (attr.type === "string" || attr.type === "number")) fieldTypes[attr.key] = attr.type;
			}
		}
	} catch (error) {
		logError(error, { search_events: {
			dataset,
			organizationSlug,
			operation: dataset === "errors" ? "listTags" : "listTraceItemAttributes",
			...dataset !== "errors" && { itemType: dataset === "logs" ? "logs" : "spans" }
		} });
	}
	return {
		attributes: customAttributes,
		fieldTypes
	};
}
/**
* Create a tool for the agent to query available attributes by dataset
*/
function createDatasetAttributesTool(apiService, organizationSlug, projectId) {
	return tool({
		description: "Query available attributes and fields for a specific Sentry dataset to understand what data is available",
		parameters: z.object({ dataset: z.enum([
			"spans",
			"errors",
			"logs"
		]).describe("The dataset to query attributes for") }),
		execute: async ({ dataset }) => {
			try {
				const { BASE_COMMON_FIELDS, DATASET_FIELDS, RECOMMENDED_FIELDS, NUMERIC_FIELDS } = await import("./tools/search-events/config.js");
				const { attributes: customAttributes, fieldTypes } = await fetchCustomAttributes(apiService, organizationSlug, dataset, projectId);
				const allFields = {
					...BASE_COMMON_FIELDS,
					...DATASET_FIELDS[dataset],
					...customAttributes
				};
				const recommendedFields = RECOMMENDED_FIELDS[dataset];
				const allFieldTypes = { ...fieldTypes };
				const staticNumericFields = NUMERIC_FIELDS[dataset] || /* @__PURE__ */ new Set();
				for (const field of staticNumericFields) allFieldTypes[field] = "number";
				return `Dataset: ${dataset}

Available Fields (${Object.keys(allFields).length} total):
${Object.entries(allFields).slice(0, 50).map(([key, desc]) => `- ${key}: ${desc}`).join("\n")}
${Object.keys(allFields).length > 50 ? `\n... and ${Object.keys(allFields).length - 50} more fields` : ""}

Recommended Fields for ${dataset}:
${recommendedFields.basic.map((f) => `- ${f}`).join("\n")}

Field Types (CRITICAL for aggregate functions):
${Object.entries(allFieldTypes).slice(0, 30).map(([key, type]) => `- ${key}: ${type}`).join("\n")}
${Object.keys(allFieldTypes).length > 30 ? `\n... and ${Object.keys(allFieldTypes).length - 30} more fields` : ""}

IMPORTANT: Only use numeric aggregate functions (avg, sum, min, max, percentiles) with numeric fields. Use count() or count_unique() for non-numeric fields.

Use this information to construct appropriate queries for the ${dataset} dataset.`;
			} catch (error) {
				if (error instanceof UserInputError) return `Error: ${error.message}`;
				throw error;
			}
		}
	});
}

//#endregion
export { createDatasetAttributesTool, fetchCustomAttributes, getNumberValue, getStringValue, isAggregateQuery };
//# sourceMappingURL=utils-OgYE-imr.js.map