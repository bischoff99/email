//#region src/tools/search-events/config.d.ts
declare const BASE_COMMON_FIELDS: {
  project: string;
  timestamp: string;
  environment: string;
  release: string;
  platform: string;
  "user.id": string;
  "user.email": string;
  "sdk.name": string;
  "sdk.version": string;
};
declare const NUMERIC_FIELDS: Record<string, Set<string>>;
declare const DATASET_FIELDS: {
  spans: {
    "span.op": string;
    "span.description": string;
    "span.duration": string;
    "span.status": string;
    "span.self_time": string;
    transaction: string;
    "transaction.duration": string;
    "transaction.op": string;
    "transaction.status": string;
    is_transaction: string;
    trace: string;
    "trace.span_id": string;
    "trace.parent_span_id": string;
    "http.method": string;
    "http.status_code": string;
    "http.url": string;
    "db.system": string;
    "db.operation": string;
    "gen_ai.system": string;
    "gen_ai.request.model": string;
    "gen_ai.operation.name": string;
    "gen_ai.usage.input_tokens": string;
    "gen_ai.usage.output_tokens": string;
    "mcp.tool.name": string;
    "mcp.session.id": string;
    "count()": string;
    "count_unique(field)": string;
    "avg(field)": string;
    "sum(field)": string;
    "min(field)": string;
    "max(field)": string;
    "p50(field)": string;
    "p75(field)": string;
    "p90(field)": string;
    "p95(field)": string;
    "p99(field)": string;
    "p100(field)": string;
    "epm()": string;
    "failure_rate()": string;
  };
  errors: {
    message: string;
    level: string;
    "error.type": string;
    "error.value": string;
    "error.handled": string;
    culprit: string;
    title: string;
    "stack.filename": string;
    "stack.function": string;
    "stack.module": string;
    "stack.abs_path": string;
    "os.name": string;
    "browser.name": string;
    "device.family": string;
    "count()": string;
    "count_unique(field)": string;
    "count_if(field,equals,value)": string;
    "last_seen()": string;
    "eps()": string;
    "epm()": string;
  };
  logs: {
    message: string;
    severity: string;
    severity_number: string;
    "sentry.item_id": string;
    "sentry.observed_timestamp_nanos": string;
    trace: string;
    "count()": string;
    "count_unique(field)": string;
    "avg(field)": string;
    "sum(field)": string;
    "min(field)": string;
    "max(field)": string;
    "p50(field)": string;
    "p75(field)": string;
    "p90(field)": string;
    "p95(field)": string;
    "p99(field)": string;
    "p100(field)": string;
    "epm()": string;
  };
};
declare const DATASET_CONFIGS: {
  errors: {
    rules: string;
    examples: string;
  };
  logs: {
    rules: string;
    examples: string;
  };
  spans: {
    rules: string;
    examples: string;
  };
};
declare const RECOMMENDED_FIELDS: {
  errors: {
    basic: string[];
    description: string;
  };
  logs: {
    basic: string[];
    description: string;
  };
  spans: {
    basic: string[];
    description: string;
  };
};
//# sourceMappingURL=config.d.ts.map
//#endregion
export { BASE_COMMON_FIELDS, DATASET_CONFIGS, DATASET_FIELDS, NUMERIC_FIELDS, RECOMMENDED_FIELDS };
//# sourceMappingURL=config.d.cts.map