const require_chunk = require('./chunk-DWy1uDak.cjs');
const require_version = require('./version-Bu9nGzm5.cjs');
const require_server = require('./server-Dv9HxoRk.cjs');
const __modelcontextprotocol_sdk_server_stdio_js = require_chunk.__toESM(require("@modelcontextprotocol/sdk/server/stdio.js"));
const __sentry_node = require_chunk.__toESM(require("@sentry/node"));

//#region src/transports/stdio.ts
/**
* Starts the MCP server with stdio transport and telemetry.
*
* Configures the server with all tools, prompts, and resources, then connects
* using stdio transport for process-based communication. All operations are
* wrapped in Sentry tracing for observability.
*
* @param server - MCP server instance to configure and start
* @param context - Server context with authentication and configuration
*
* @example CLI Integration
* ```typescript
* // In a CLI tool or IDE extension:
* const server = new McpServer();
* await startStdio(server, {
*   accessToken: userToken,
*   host: userHost,
*   userId: "user-123",
*   clientId: "cursor-ide"
* });
* ```
*/
async function startStdio(server, context) {
	await __sentry_node.startNewTrace(async () => {
		return await __sentry_node.startSpan({
			name: "mcp.server/stdio",
			attributes: {
				"mcp.transport": "stdio",
				"network.transport": "pipe",
				"service.version": require_version.LIB_VERSION
			}
		}, async () => {
			const transport = new __modelcontextprotocol_sdk_server_stdio_js.StdioServerTransport();
			await require_server.configureServer({
				server,
				context
			});
			await server.connect(transport);
		});
	});
}

//#endregion
Object.defineProperty(exports, 'startStdio', {
  enumerable: true,
  get: function () {
    return startStdio;
  }
});
//# sourceMappingURL=stdio-C6MAgHmA.cjs.map