import { ServerContext } from "./types-C1Fih0eQ.js";
import { z } from "zod";
import { EmbeddedResource, ImageContent, TextContent } from "@modelcontextprotocol/sdk/types.js";

//#region src/tools/types.d.ts
interface ToolConfig<TSchema extends Record<string, z.ZodType> = Record<string, z.ZodType>> {
  name: string;
  description: string;
  inputSchema: TSchema;
  handler: (params: z.infer<z.ZodObject<TSchema>>, context: ServerContext) => Promise<string | (TextContent | ImageContent | EmbeddedResource)[]>;
}
/**
 * Response from the search API endpoint
 */
interface SearchResponse {
  query: string;
  results: Array<{
    id: string;
    url: string;
    snippet: string;
    relevance: number;
  }>;
  error?: string;
}
//# sourceMappingURL=types.d.ts.map

//#endregion
export { SearchResponse, ToolConfig };
//# sourceMappingURL=types-BOcoP3Na.d.ts.map