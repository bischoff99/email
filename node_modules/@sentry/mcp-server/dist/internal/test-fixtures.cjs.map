{"version":3,"file":"test-fixtures.cjs","names":["overrides: Partial<Frame>","frames: Frame[]","overrides: Partial<ExceptionValue>","overrides: Partial<Thread>","id: string","platform: string","exception: ExceptionValue","exceptions: ExceptionValue[]","thread: Thread","message: string","title: string","type: string","contexts: Record<string, any>","frame: Partial<Frame>","contextLines: Array<[number, string]>","vars?: Record<string, any>"],"sources":["../../src/internal/test-fixtures.ts"],"sourcesContent":["import type { Event } from \"../api-client/types\";\nimport type { z } from \"zod\";\nimport type {\n  FrameInterface,\n  ExceptionInterface,\n  ThreadEntrySchema,\n} from \"../api-client/schema\";\n\n// Type aliases for cleaner code\ntype Frame = z.infer<typeof FrameInterface>;\ntype ExceptionValue = z.infer<typeof ExceptionInterface>;\ntype Thread = z.infer<typeof ThreadEntrySchema>;\ntype StackTrace = { frames: Frame[] };\n\n/**\n * Test fixture factories for creating Event objects with minimal boilerplate.\n * These factories provide sensible defaults while allowing customization.\n */\n\n// Frame factory with common defaults\nexport function createFrame(overrides: Partial<Frame> = {}): Frame {\n  return {\n    filename: \"/app/main.js\",\n    function: \"main\",\n    lineNo: 42,\n    ...overrides,\n  };\n}\n\n// Platform-specific frame factories\nexport const frameFactories = {\n  python: (overrides: Partial<Frame> = {}) =>\n    createFrame({\n      filename: \"/app/main.py\",\n      function: \"process_data\",\n      ...overrides,\n    }),\n\n  java: (overrides: Partial<Frame> = {}) =>\n    createFrame({\n      filename: \"Example.java\",\n      module: \"com.example.Example\",\n      function: \"doSomething\",\n      ...overrides,\n    }),\n\n  javascript: (overrides: Partial<Frame> = {}) =>\n    createFrame({\n      filename: \"/app/main.js\",\n      function: \"handleRequest\",\n      colNo: 15,\n      ...overrides,\n    }),\n\n  ruby: (overrides: Partial<Frame> = {}) =>\n    createFrame({\n      filename: \"/app/main.rb\",\n      function: \"process\",\n      ...overrides,\n    }),\n\n  php: (overrides: Partial<Frame> = {}) =>\n    createFrame({\n      filename: \"/app/main.php\",\n      function: \"handleRequest\",\n      ...overrides,\n    }),\n};\n\n// StackTrace factory\nexport function createStackTrace(frames: Frame[]): StackTrace {\n  return { frames };\n}\n\n// Exception value factory\nexport function createExceptionValue(\n  overrides: Partial<ExceptionValue> = {},\n): ExceptionValue {\n  return {\n    type: \"Error\",\n    value: \"Something went wrong\",\n    stacktrace: createStackTrace([createFrame()]),\n    ...overrides,\n  };\n}\n\n// Thread factory\nexport function createThread(overrides: Partial<Thread> = {}): Thread {\n  return {\n    id: 1,\n    name: \"main\",\n    crashed: true,\n    stacktrace: createStackTrace([createFrame()]),\n    ...overrides,\n  };\n}\n\n// Event factory with builder pattern\nexport class EventBuilder {\n  private event: Event;\n\n  constructor(platform = \"javascript\") {\n    this.event = {\n      id: \"test123\",\n      title: \"Test Event\",\n      message: null,\n      platform,\n      type: \"error\",\n      entries: [],\n      contexts: {},\n    } as Event;\n  }\n\n  withId(id: string): this {\n    this.event.id = id;\n    return this;\n  }\n\n  withPlatform(platform: string): this {\n    this.event.platform = platform;\n    return this;\n  }\n\n  withException(exception: ExceptionValue): this {\n    this.event.entries.push({\n      type: \"exception\",\n      data: {\n        values: [exception],\n      },\n    });\n    return this;\n  }\n\n  withChainedExceptions(exceptions: ExceptionValue[]): this {\n    this.event.entries.push({\n      type: \"exception\",\n      data: {\n        values: exceptions,\n      },\n    });\n    return this;\n  }\n\n  withThread(thread: Thread): this {\n    const existingThread = this.event.entries.find((e) => e.type === \"threads\");\n    if (\n      existingThread?.data &&\n      typeof existingThread.data === \"object\" &&\n      \"values\" in existingThread.data\n    ) {\n      (existingThread.data as any).values.push(thread);\n    } else {\n      this.event.entries.push({\n        type: \"threads\",\n        data: {\n          values: [thread],\n        },\n      });\n    }\n    return this;\n  }\n\n  withMessage(message: string): this {\n    this.event.entries.push({\n      type: \"message\",\n      data: {\n        formatted: message,\n      },\n    });\n    return this;\n  }\n\n  withTitle(title: string): this {\n    this.event.title = title;\n    return this;\n  }\n\n  withType(type: string): this {\n    this.event.type = type;\n    return this;\n  }\n\n  withContexts(contexts: Record<string, any>): this {\n    this.event.contexts = contexts;\n    return this;\n  }\n\n  build(): Event {\n    return { ...this.event };\n  }\n}\n\n// Convenience factories for common test scenarios\nexport const testEvents = {\n  // Simple Python exception\n  pythonException: (errorMessage = \"Invalid value\") =>\n    new EventBuilder(\"python\")\n      .withException(\n        createExceptionValue({\n          type: \"ValueError\",\n          value: errorMessage,\n          stacktrace: createStackTrace([\n            frameFactories.python({ lineNo: 42 }),\n            frameFactories.python({\n              filename: \"/app/utils.py\",\n              function: \"validate\",\n              lineNo: 15,\n            }),\n          ]),\n        }),\n      )\n      .build(),\n\n  // Java thread error\n  javaThreadError: (message = \"Test error\") =>\n    new EventBuilder(\"java\")\n      .withTitle(\"Test Error\")\n      .withType(\"error\")\n      .withMessage(message)\n      .withThread(\n        createThread({\n          id: 187,\n          name: \"CONTRACT_WORKER\",\n          state: \"RUNNABLE\",\n          stacktrace: createStackTrace([\n            frameFactories.java({\n              filename: \"Thread.java\",\n              module: \"java.lang.Thread\",\n              function: \"run\",\n              lineNo: 833,\n            }),\n            frameFactories.java({\n              filename: \"AeronServer.java\",\n              module: \"com.citics.eqd.mq.aeron.AeronServer\",\n              function: \"lambda$start$3\",\n              lineNo: 110,\n            }),\n          ]),\n        }),\n      )\n      .build(),\n\n  // Enhanced frame with context and variables\n  enhancedFrame: (platform = \"python\") => {\n    const frame = frameFactories[platform as keyof typeof frameFactories]({\n      inApp: true,\n      context: [\n        [40, '    raise ValueError(\"User not found\")'],\n        [41, \"    \"],\n        [42, \"    balance = user.account.balance\"],\n        [43, \"    if balance < amount:\"],\n        [44, \"        raise InsufficientFundsError()\"],\n      ],\n      vars: {\n        amount: 150.0,\n        user_id: \"usr_123456\",\n        user: null,\n      },\n    });\n\n    return new EventBuilder(platform)\n      .withException(\n        createExceptionValue({\n          type: \"ValueError\",\n          value: \"Something went wrong\",\n          stacktrace: createStackTrace([frame]),\n        }),\n      )\n      .build();\n  },\n};\n\n// Helper to create frames with context lines\nexport function createFrameWithContext(\n  frame: Partial<Frame>,\n  contextLines: Array<[number, string]>,\n  vars?: Record<string, any>,\n): Frame {\n  return createFrame({\n    ...frame,\n    inApp: true,\n    context: contextLines,\n    vars,\n  });\n}\n\n// Advanced test fixtures for specific scenarios\nexport const advancedFixtures = {\n  // Create a minimal event with just an error message\n  minimalError: (message: string, platform = \"javascript\") =>\n    new EventBuilder(platform)\n      .withException(createExceptionValue({ value: message }))\n      .build(),\n\n  // Create an event with multiple exceptions (chained errors)\n  chainedExceptions: (platform = \"javascript\") =>\n    new EventBuilder(platform)\n      .withException(\n        createExceptionValue({\n          type: \"Error\",\n          value: \"High level error\",\n          stacktrace: createStackTrace([createFrame({ lineNo: 100 })]),\n        }),\n      )\n      .withException(\n        createExceptionValue({\n          type: \"CausedBy\",\n          value: \"Low level error\",\n          stacktrace: createStackTrace([createFrame({ lineNo: 50 })]),\n        }),\n      )\n      .build(),\n\n  // Create event with specific context data\n  withContextData: (contexts: Record<string, any>) => {\n    return new EventBuilder().withContexts(contexts).build();\n  },\n};\n"],"mappings":"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"}