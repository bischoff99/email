import { PROMPT_DEFINITIONS } from "./promptDefinitions-CVHtYaj8.cjs";
import { z } from "zod";
import { GetPromptResult } from "@modelcontextprotocol/sdk/types.js";

//#region src/types.d.ts

type ZodifyRecord<T extends Record<string, any>> = { [K in keyof T]: z.infer<T[K]> };
type PromptName = (typeof PROMPT_DEFINITIONS)[number]["name"];
type PromptDefinition<T extends PromptName> = Extract<(typeof PROMPT_DEFINITIONS)[number], {
  name: T;
}>;
type PromptParams<T extends PromptName> = PromptDefinition<T> extends {
  paramsSchema: Record<string, any>;
} ? ZodifyRecord<PromptDefinition<T>["paramsSchema"]> : Record<string, never>;
type PromptHandler<T extends PromptName> = (params: PromptParams<T>) => Promise<GetPromptResult>;
type PromptHandlerExtended<T extends PromptName> = (context: ServerContext, params: PromptParams<T>) => Promise<string>;
type PromptHandlers = { [K in PromptName]: PromptHandlerExtended<K> };
type ServerContext = {
  sentryHost?: string;
  mcpUrl?: string;
  accessToken: string;
  organizationSlug: string | null;
  userId?: string | null;
  clientId?: string;
  mcpClientName?: string;
  mcpClientVersion?: string;
  mcpProtocolVersion?: string;
};
//#endregion
export { PromptDefinition, PromptHandler, PromptHandlerExtended, PromptHandlers, PromptName, PromptParams, ServerContext };
//# sourceMappingURL=types-BV-G5sBp.d.cts.map