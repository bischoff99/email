{"version":3,"file":"formatters-DSYXBiQx.js","names":["eventData: FlexibleEventData[]","params: { naturalLanguageQuery: string; includeExplanation?: boolean }","apiService: SentryApiService","organizationSlug: string","explorerUrl: string","sentryQuery: string","fields: string[]","severityEmojis: Record<string, string>"],"sources":["../src/tools/search-events/formatters.ts"],"sourcesContent":["import type { SentryApiService } from \"../../api-client\";\nimport {\n  type FlexibleEventData,\n  getStringValue,\n  getNumberValue,\n  isAggregateQuery,\n} from \"./utils\";\nimport * as Sentry from \"@sentry/node\";\n\n/**\n * Format error event results for display\n */\nexport function formatErrorResults(\n  eventData: FlexibleEventData[],\n  params: { naturalLanguageQuery: string; includeExplanation?: boolean },\n  apiService: SentryApiService,\n  organizationSlug: string,\n  explorerUrl: string,\n  sentryQuery: string,\n  fields: string[],\n): string {\n  let output = `# Search Results for \"${params.naturalLanguageQuery}\"\\n\\n`;\n\n  // Check if this is an aggregate query and adjust display instructions\n  if (isAggregateQuery(fields)) {\n    output += `‚ö†Ô∏è **IMPORTANT**: Display these aggregate results as a data table with proper column alignment and formatting.\\n\\n`;\n  } else {\n    output += `‚ö†Ô∏è **IMPORTANT**: Display these errors as highlighted alert cards with color-coded severity levels and clickable Event IDs.\\n\\n`;\n  }\n\n  if (params.includeExplanation) {\n    output += `## Query Translation\\n`;\n    output += `Natural language: \"${params.naturalLanguageQuery}\"\\n`;\n    output += `Sentry query: \\`${sentryQuery}\\`\\n\\n`;\n  }\n\n  output += `**üìä View these results in Sentry**: ${explorerUrl}\\n`;\n  output += `_Please share this link with the user to view the search results in their Sentry dashboard._\\n\\n`;\n\n  if (eventData.length === 0) {\n    Sentry.logger.info(\n      Sentry.logger\n        .fmt`No error events found for query: ${params.naturalLanguageQuery}`,\n      {\n        query: sentryQuery,\n        fields: fields,\n        organizationSlug: organizationSlug,\n        dataset: \"errors\",\n      },\n    );\n    output += `No results found.\\n\\n`;\n    output += `Try being more specific or using different terms in your search.\\n`;\n    return output;\n  }\n\n  output += `Found ${eventData.length} ${isAggregateQuery(fields) ? \"aggregate result\" : \"error\"}${eventData.length === 1 ? \"\" : \"s\"}:\\n\\n`;\n\n  // For aggregate queries, just output the raw data - the agent will format it as a table\n  if (isAggregateQuery(fields)) {\n    output += \"```json\\n\";\n    output += JSON.stringify(eventData, null, 2);\n    output += \"\\n```\\n\\n\";\n  } else {\n    // For individual errors, format with details\n    // Define priority fields that should appear first if present\n    const priorityFields = [\n      \"title\",\n      \"issue\",\n      \"project\",\n      \"level\",\n      \"error.type\",\n      \"message\",\n      \"culprit\",\n      \"timestamp\",\n      \"last_seen()\", // Aggregate field - when the issue was last seen\n      \"count()\", // Aggregate field - total occurrences of this issue\n    ];\n\n    for (const event of eventData) {\n      // Try to get a title from various possible fields\n      const title =\n        getStringValue(event, \"title\") ||\n        getStringValue(event, \"message\") ||\n        getStringValue(event, \"error.value\") ||\n        \"Error Event\";\n\n      output += `## ${title}\\n\\n`;\n\n      // Display priority fields first if they exist\n      for (const field of priorityFields) {\n        if (\n          field in event &&\n          event[field] !== null &&\n          event[field] !== undefined\n        ) {\n          const value = event[field];\n\n          if (field === \"issue\" && typeof value === \"string\") {\n            output += `**Issue ID**: ${value}\\n`;\n            output += `**Issue URL**: ${apiService.getIssueUrl(organizationSlug, value)}\\n`;\n          } else {\n            output += `**${field}**: ${value}\\n`;\n          }\n        }\n      }\n\n      // Display any additional fields that weren't in the priority list\n      const displayedFields = new Set([...priorityFields, \"id\"]);\n      for (const [key, value] of Object.entries(event)) {\n        if (\n          !displayedFields.has(key) &&\n          value !== null &&\n          value !== undefined\n        ) {\n          output += `**${key}**: ${value}\\n`;\n        }\n      }\n\n      output += \"\\n\";\n    }\n  }\n\n  output += \"## Next Steps\\n\\n\";\n  output += \"- Get more details about a specific error: Use the Issue ID\\n\";\n  output += \"- View error groups: Navigate to the Issues page in Sentry\\n\";\n  output += \"- Set up alerts: Configure alert rules for these error patterns\\n\";\n\n  return output;\n}\n\n/**\n * Format log event results for display\n */\nexport function formatLogResults(\n  eventData: FlexibleEventData[],\n  params: { naturalLanguageQuery: string; includeExplanation?: boolean },\n  apiService: SentryApiService,\n  organizationSlug: string,\n  explorerUrl: string,\n  sentryQuery: string,\n  fields: string[],\n): string {\n  let output = `# Search Results for \"${params.naturalLanguageQuery}\"\\n\\n`;\n\n  // Check if this is an aggregate query and adjust display instructions\n  if (isAggregateQuery(fields)) {\n    output += `‚ö†Ô∏è **IMPORTANT**: Display these aggregate results as a data table with proper column alignment and formatting.\\n\\n`;\n  } else {\n    output += `‚ö†Ô∏è **IMPORTANT**: Display these logs in console format with monospace font, color-coded severity (üî¥ ERROR, üü° WARN, üîµ INFO), and preserve timestamps.\\n\\n`;\n  }\n\n  if (params.includeExplanation) {\n    output += `## Query Translation\\n`;\n    output += `Natural language: \"${params.naturalLanguageQuery}\"\\n`;\n    output += `Sentry query: \\`${sentryQuery}\\`\\n\\n`;\n  }\n\n  output += `**üìä View these results in Sentry**: ${explorerUrl}\\n`;\n  output += `_Please share this link with the user to view the search results in their Sentry dashboard._\\n\\n`;\n\n  if (eventData.length === 0) {\n    Sentry.logger.info(\n      Sentry.logger\n        .fmt`No log events found for query: ${params.naturalLanguageQuery}`,\n      {\n        query: sentryQuery,\n        fields: fields,\n        organizationSlug: organizationSlug,\n        dataset: \"logs\",\n      },\n    );\n    output += `No results found.\\n\\n`;\n    output += `Try being more specific or using different terms in your search.\\n`;\n    return output;\n  }\n\n  output += `Found ${eventData.length} ${isAggregateQuery(fields) ? \"aggregate result\" : \"log\"}${eventData.length === 1 ? \"\" : \"s\"}:\\n\\n`;\n\n  // For aggregate queries, just output the raw data - the agent will format it as a table\n  if (isAggregateQuery(fields)) {\n    output += \"```json\\n\";\n    output += JSON.stringify(eventData, null, 2);\n    output += \"\\n```\\n\\n\";\n  } else {\n    // For individual logs, format as console output\n    output += \"```console\\n\";\n\n    for (const event of eventData) {\n      const timestamp = getStringValue(event, \"timestamp\", \"N/A\");\n      const severity = getStringValue(event, \"severity\", \"info\");\n      const message = getStringValue(event, \"message\", \"No message\");\n\n      // Safely uppercase the severity\n      const severityUpper = severity.toUpperCase();\n\n      // Get severity emoji with proper typing\n      const severityEmojis: Record<string, string> = {\n        ERROR: \"üî¥\",\n        FATAL: \"üî¥\",\n        WARN: \"üü°\",\n        WARNING: \"üü°\",\n        INFO: \"üîµ\",\n        DEBUG: \"‚ö´\",\n        TRACE: \"‚ö´\",\n      };\n      const severityEmoji = severityEmojis[severityUpper] || \"üîµ\";\n\n      // Standard log format with emoji and proper spacing\n      output += `${timestamp} ${severityEmoji} [${severityUpper.padEnd(5)}] ${message}\\n`;\n    }\n\n    output += \"```\\n\\n\";\n\n    // Add detailed metadata for each log entry\n    output += \"## Log Details\\n\\n\";\n\n    // Define priority fields that should appear first if present\n    const priorityFields = [\n      \"message\",\n      \"severity\",\n      \"severity_number\",\n      \"timestamp\",\n      \"project\",\n      \"trace\",\n      \"sentry.item_id\",\n    ];\n\n    for (let i = 0; i < eventData.length; i++) {\n      const event = eventData[i];\n\n      output += `### Log ${i + 1}\\n`;\n\n      // Display priority fields first\n      for (const field of priorityFields) {\n        if (\n          field in event &&\n          event[field] !== null &&\n          event[field] !== undefined\n        ) {\n          const value = event[field];\n\n          if (field === \"trace\" && typeof value === \"string\") {\n            output += `- **Trace ID**: ${value}\\n`;\n            output += `- **Trace URL**: ${apiService.getTraceUrl(organizationSlug, value)}\\n`;\n          } else {\n            output += `- **${field}**: ${value}\\n`;\n          }\n        }\n      }\n\n      // Display any additional fields\n      const displayedFields = new Set([...priorityFields, \"id\"]);\n      for (const [key, value] of Object.entries(event)) {\n        if (\n          !displayedFields.has(key) &&\n          value !== null &&\n          value !== undefined\n        ) {\n          output += `- **${key}**: ${value}\\n`;\n        }\n      }\n\n      output += \"\\n\";\n    }\n  }\n\n  output += \"## Next Steps\\n\\n\";\n  output += \"- View related traces: Click on the Trace URL if available\\n\";\n  output +=\n    \"- Filter by severity: Adjust your query to focus on specific log levels\\n\";\n  output += \"- Export logs: Use the Sentry web interface for bulk export\\n\";\n\n  return output;\n}\n\n/**\n * Format span/trace event results for display\n */\nexport function formatSpanResults(\n  eventData: FlexibleEventData[],\n  params: { naturalLanguageQuery: string; includeExplanation?: boolean },\n  apiService: SentryApiService,\n  organizationSlug: string,\n  explorerUrl: string,\n  sentryQuery: string,\n  fields: string[],\n): string {\n  let output = `# Search Results for \"${params.naturalLanguageQuery}\"\\n\\n`;\n\n  // Check if this is an aggregate query and adjust display instructions\n  if (isAggregateQuery(fields)) {\n    output += `‚ö†Ô∏è **IMPORTANT**: Display these aggregate results as a data table with proper column alignment and formatting.\\n\\n`;\n  } else {\n    output += `‚ö†Ô∏è **IMPORTANT**: Display these traces as a performance timeline with duration bars and hierarchical span relationships.\\n\\n`;\n  }\n\n  if (params.includeExplanation) {\n    output += `## Query Translation\\n`;\n    output += `Natural language: \"${params.naturalLanguageQuery}\"\\n`;\n    output += `Sentry query: \\`${sentryQuery}\\`\\n\\n`;\n  }\n\n  output += `**üìä View these results in Sentry**: ${explorerUrl}\\n`;\n  output += `_Please share this link with the user to view the search results in their Sentry dashboard._\\n\\n`;\n\n  if (eventData.length === 0) {\n    Sentry.logger.info(\n      Sentry.logger\n        .fmt`No span events found for query: ${params.naturalLanguageQuery}`,\n      {\n        query: sentryQuery,\n        fields: fields,\n        organizationSlug: organizationSlug,\n        dataset: \"spans\",\n      },\n    );\n    output += `No results found.\\n\\n`;\n    output += `Try being more specific or using different terms in your search.\\n`;\n    return output;\n  }\n\n  output += `Found ${eventData.length} ${isAggregateQuery(fields) ? `aggregate result${eventData.length === 1 ? \"\" : \"s\"}` : `trace${eventData.length === 1 ? \"\" : \"s\"}/span${eventData.length === 1 ? \"\" : \"s\"}`}:\\n\\n`;\n\n  // For aggregate queries, just output the raw data - the agent will format it as a table\n  if (isAggregateQuery(fields)) {\n    output += \"```json\\n\";\n    output += JSON.stringify(eventData, null, 2);\n    output += \"\\n```\\n\\n\";\n  } else {\n    // For individual spans, format with details\n    // Define priority fields that should appear first if present\n    const priorityFields = [\n      \"id\",\n      \"span.op\",\n      \"span.description\",\n      \"transaction\",\n      \"span.duration\",\n      \"span.status\",\n      \"trace\",\n      \"project\",\n      \"timestamp\",\n    ];\n\n    for (const event of eventData) {\n      // Try to get a title from various possible fields\n      const title =\n        getStringValue(event, \"span.description\") ||\n        getStringValue(event, \"transaction\") ||\n        getStringValue(event, \"span.op\") ||\n        \"Span\";\n\n      output += `## ${title}\\n\\n`;\n\n      // Display priority fields first\n      for (const field of priorityFields) {\n        if (\n          field in event &&\n          event[field] !== null &&\n          event[field] !== undefined\n        ) {\n          const value = event[field];\n\n          if (field === \"trace\" && typeof value === \"string\") {\n            output += `**Trace ID**: ${value}\\n`;\n            output += `**Trace URL**: ${apiService.getTraceUrl(organizationSlug, value)}\\n`;\n          } else if (field === \"span.duration\" && typeof value === \"number\") {\n            output += `**${field}**: ${value}ms\\n`;\n          } else {\n            output += `**${field}**: ${value}\\n`;\n          }\n        }\n      }\n\n      // Display any additional fields\n      const displayedFields = new Set([...priorityFields, \"id\"]);\n      for (const [key, value] of Object.entries(event)) {\n        if (\n          !displayedFields.has(key) &&\n          value !== null &&\n          value !== undefined\n        ) {\n          output += `**${key}**: ${value}\\n`;\n        }\n      }\n\n      output += \"\\n\";\n    }\n  }\n\n  output += \"## Next Steps\\n\\n\";\n  output += \"- View the full trace: Click on the Trace URL above\\n\";\n  output +=\n    \"- Search for related spans: Modify your query to be more specific\\n\";\n  output +=\n    \"- Export data: Use the Sentry web interface for advanced analysis\\n\";\n\n  return output;\n}\n"],"mappings":"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"}