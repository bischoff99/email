const require_errors = require('./errors-BtJEw2Z-.cjs');
const require_client = require('./client-CPrEfAwa.cjs');

//#region src/tools/utils/api-utils.ts
/**
* Create a Sentry API service from server context with optional region override
* @param context - Server context containing host and access token
* @param opts - Options object containing optional regionUrl override
* @returns Configured SentryApiService instance (always uses HTTPS)
* @throws {UserInputError} When regionUrl is provided but invalid
*/
function apiServiceFromContext(context, opts = {}) {
	let host = context.sentryHost;
	if (opts.regionUrl?.trim()) try {
		const parsedUrl = new URL(opts.regionUrl);
		if (!["http:", "https:"].includes(parsedUrl.protocol)) throw new require_errors.UserInputError(`Invalid regionUrl provided: ${opts.regionUrl}. Must include protocol (http:// or https://).`);
		if (parsedUrl.host === "https" || parsedUrl.host === "http") throw new require_errors.UserInputError(`Invalid regionUrl provided: ${opts.regionUrl}. The host cannot be just a protocol name.`);
		host = parsedUrl.host;
	} catch (error) {
		if (error instanceof require_errors.UserInputError) throw error;
		throw new require_errors.UserInputError(`Invalid regionUrl provided: ${opts.regionUrl}. Must be a valid URL.`);
	}
	return new require_client.SentryApiService({
		host,
		accessToken: context.accessToken
	});
}
/**
* Maps API errors to user-friendly errors based on context
* @param error - The error to handle
* @param params - The parameters that were used in the API call
* @returns Never - always throws an error
* @throws {UserInputError} For 4xx errors that are likely user input issues
* @throws {Error} For other errors
*/
function handleApiError(error, params) {
	if (error instanceof require_client.ApiError) {
		if (error.status >= 400 && error.status < 500) {
			let message = `API error (${error.status}): ${error.message}`;
			if (error.status === 404 && params) {
				const paramsList = [];
				for (const [key, value] of Object.entries(params)) if (value !== void 0 && value !== null && value !== "") paramsList.push(`${key}: '${value}'`);
				if (paramsList.length > 0) message = `Resource not found (404): ${error.message}\nPlease verify these parameters are correct:\n${paramsList.map((p) => `  - ${p}`).join("\n")}`;
			}
			throw new require_errors.UserInputError(message, { cause: error });
		}
	}
	throw error;
}
/**
* Wraps an async API call with automatic error handling
* @param fn - The async function to execute
* @param params - The parameters that were used in the API call
* @returns The result of the function
* @throws {UserInputError} For user input errors
* @throws {Error} For other errors
*/
async function withApiErrorHandling(fn, params) {
	try {
		return await fn();
	} catch (error) {
		handleApiError(error, params);
	}
}

//#endregion
Object.defineProperty(exports, 'apiServiceFromContext', {
  enumerable: true,
  get: function () {
    return apiServiceFromContext;
  }
});
Object.defineProperty(exports, 'handleApiError', {
  enumerable: true,
  get: function () {
    return handleApiError;
  }
});
Object.defineProperty(exports, 'withApiErrorHandling', {
  enumerable: true,
  get: function () {
    return withApiErrorHandling;
  }
});
//# sourceMappingURL=api-utils-DFWUfQ83.cjs.map