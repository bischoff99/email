{"version":3,"file":"logging-BpL53bY6.cjs","names":["error: string | Error | unknown","contexts?: Record<string, Record<string, any>>","attachments?: Record<string, string | Uint8Array>"],"sources":["../src/logging.ts"],"sourcesContent":["/**\n * Logging and telemetry utilities for error reporting.\n *\n * Provides centralized error logging with Sentry integration. Handles both\n * console logging for development and structured error reporting for production\n * monitoring and debugging.\n */\nimport { captureException, captureMessage, withScope } from \"@sentry/core\";\n\n/**\n * Logs errors to console and Sentry with optional context and attachments.\n *\n * Supports both Error objects and string messages. Returns a Sentry event ID\n * that can be included in user-facing error messages for debugging support.\n *\n * @param error - Error object or message string to log\n * @param contexts - Additional context data for Sentry\n * @param attachments - Files or data to attach to the Sentry event\n * @returns Sentry event ID for referencing this error, or undefined if logging fails\n *\n * @example Error Object Logging\n * ```typescript\n * try {\n *   await riskyOperation();\n * } catch (error) {\n *   const eventId = logError(error, {\n *     operation: { name: \"riskyOperation\", params: {...} }\n *   });\n *   return `Error occurred. Event ID: ${eventId}`;\n * }\n * ```\n *\n * @example String Message Logging\n * ```typescript\n * const eventId = logError(\"Configuration validation failed\", {\n *   config: { provided: userConfig, expected: expectedFormat }\n * });\n * ```\n */\nexport function logError(\n  error: Error | unknown,\n  contexts?: Record<string, Record<string, any>>,\n  attachments?: Record<string, string | Uint8Array>,\n): string | undefined;\nexport function logError(\n  message: string,\n  contexts?: Record<string, Record<string, any>>,\n  attachments?: Record<string, string | Uint8Array>,\n): string | undefined;\nexport function logError(\n  error: string | Error | unknown,\n  contexts?: Record<string, Record<string, any>>,\n  attachments?: Record<string, string | Uint8Array>,\n): string | undefined {\n  const level = \"error\";\n\n  console.error(error);\n\n  const eventId = withScope((scope) => {\n    if (attachments) {\n      for (const [key, data] of Object.entries(attachments)) {\n        scope.addAttachment({\n          data,\n          filename: key,\n        });\n      }\n    }\n\n    return typeof error === \"string\"\n      ? captureMessage(error, {\n          contexts,\n          level,\n        })\n      : captureException(error, {\n          contexts,\n          level,\n        });\n  });\n\n  return eventId;\n}\n"],"mappings":";;;;AAiDA,SAAgB,SACdA,OACAC,UACAC,aACoB;CACpB,MAAM,QAAQ;AAEd,SAAQ,MAAM,MAAM;CAEpB,MAAM,UAAU,6BAAU,CAAC,UAAU;AACnC,MAAI,YACF,MAAK,MAAM,CAAC,KAAK,KAAK,IAAI,OAAO,QAAQ,YAAY,CACnD,OAAM,cAAc;GAClB;GACA,UAAU;EACX,EAAC;AAIN,gBAAc,UAAU,WACpB,kCAAe,OAAO;GACpB;GACA;EACD,EAAC,GACF,oCAAiB,OAAO;GACtB;GACA;EACD,EAAC;CACP,EAAC;AAEF,QAAO;AACR"}