const require_chunk = require('./chunk-DWy1uDak.cjs');
const require_errors = require('./errors-BtJEw2Z-.cjs');
const require_whoami = require('./whoami-CoZJKpys.cjs');
const require_discover_dataset_fields = require('./discover-dataset-fields-Cl7HpVkm.cjs');
const require_config = require('./config-FWsgDbm7.cjs');
const zod = require_chunk.__toESM(require("zod"));
const ai = require_chunk.__toESM(require("ai"));
const __ai_sdk_openai = require_chunk.__toESM(require("@ai-sdk/openai"));

//#region src/tools/search-issues/agent.ts
const IssueQuerySchema = zod.z.object({
	query: zod.z.string().describe("The Sentry issue search query"),
	sort: zod.z.enum([
		"date",
		"freq",
		"new",
		"user"
	]).nullable().describe("How to sort the results (null if no specific sort is needed)"),
	explanation: zod.z.string().nullable().describe("Brief explanation of the translation (null if not needed)")
});
/**
* Translate natural language query to Sentry issue search syntax
*/
async function translateQuery(params, apiService) {
	if (!process.env.OPENAI_API_KEY) throw new require_errors.ConfigurationError("OpenAI API key not configured. Set OPENAI_API_KEY environment variable.");
	const tools = {
		issueFields: require_discover_dataset_fields.createDatasetFieldsTool(apiService, params.organizationSlug, "search_issues", params.projectId),
		whoami: require_whoami.createWhoamiTool(apiService)
	};
	try {
		const result = await (0, ai.generateText)({
			model: (0, __ai_sdk_openai.openai)("gpt-4o", { structuredOutputs: true }),
			system: require_config.systemPrompt,
			prompt: params.naturalLanguageQuery,
			tools,
			maxSteps: 3,
			experimental_output: ai.Output.object({ schema: IssueQuerySchema }),
			experimental_telemetry: {
				isEnabled: true,
				functionId: "search_issues_agent"
			}
		});
		const query = result.experimental_output;
		if (!query) throw new Error("Failed to generate query");
		return query;
	} catch (error) {
		if (error instanceof require_errors.UserInputError || error instanceof require_errors.ConfigurationError) throw error;
		throw new Error(`Failed to translate query: ${error instanceof Error ? error.message : "Unknown error"}`, { cause: error });
	}
}

//#endregion
Object.defineProperty(exports, 'translateQuery', {
  enumerable: true,
  get: function () {
    return translateQuery;
  }
});
//# sourceMappingURL=agent-Cody_f0d.cjs.map