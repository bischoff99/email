{"version":3,"file":"url-utils-vJo2ER5v.cjs","names":["host: string","organizationSlug: string","issueId: string","query?: string","projectSlugOrId?: string","traceId: string","query: string","dataset: \"spans\" | \"errors\" | \"logs\"","projectSlug?: string","fields?: string[]","url: string"],"sources":["../src/utils/url-utils.ts"],"sourcesContent":["/**\n * Determines if a Sentry instance is SaaS or self-hosted based on the host.\n * @param host The Sentry host (e.g., \"sentry.io\" or \"sentry.company.com\")\n * @returns true if SaaS instance, false if self-hosted\n */\nexport function isSentryHost(host: string): boolean {\n  return host === \"sentry.io\" || host.endsWith(\".sentry.io\");\n}\n\n/**\n * Generates a Sentry issue URL.\n * @param host The Sentry host\n * @param organizationSlug Organization identifier\n * @param issueId Issue identifier (e.g., \"PROJECT-123\")\n * @returns The complete issue URL\n */\nexport function getIssueUrl(\n  host: string,\n  organizationSlug: string,\n  issueId: string,\n): string {\n  const isSaas = isSentryHost(host);\n  return isSaas\n    ? `https://${organizationSlug}.${host}/issues/${issueId}`\n    : `https://${host}/organizations/${organizationSlug}/issues/${issueId}`;\n}\n\n/**\n * Generates a Sentry issues search URL.\n * @param host The Sentry host\n * @param organizationSlug Organization identifier\n * @param query Optional search query\n * @param projectSlugOrId Optional project slug or ID\n * @returns The complete issues search URL\n */\nexport function getIssuesSearchUrl(\n  host: string,\n  organizationSlug: string,\n  query?: string,\n  projectSlugOrId?: string,\n): string {\n  const isSaas = isSentryHost(host);\n  let url = isSaas\n    ? `https://${organizationSlug}.${host}/issues/`\n    : `https://${host}/organizations/${organizationSlug}/issues/`;\n\n  const params = new URLSearchParams();\n  if (projectSlugOrId) {\n    params.append(\"project\", projectSlugOrId);\n  }\n  if (query) {\n    params.append(\"query\", query);\n  }\n\n  const queryString = params.toString();\n  if (queryString) {\n    url += `?${queryString}`;\n  }\n\n  return url;\n}\n\n/**\n * Generates a Sentry trace URL for performance investigation.\n * @param host The Sentry host\n * @param organizationSlug Organization identifier\n * @param traceId Trace identifier\n * @returns The complete trace URL\n */\nexport function getTraceUrl(\n  host: string,\n  organizationSlug: string,\n  traceId: string,\n): string {\n  const isSaas = isSentryHost(host);\n  return isSaas\n    ? `https://${organizationSlug}.${host}/explore/traces/trace/${traceId}`\n    : `https://${host}/organizations/${organizationSlug}/explore/traces/trace/${traceId}`;\n}\n\n/**\n * Generates a Sentry events explorer URL.\n * @param host The Sentry host\n * @param organizationSlug Organization identifier\n * @param query Search query\n * @param dataset Dataset type\n * @param projectSlug Optional project slug\n * @param fields Optional fields to display\n * @returns The complete events explorer URL\n */\nexport function getEventsExplorerUrl(\n  host: string,\n  organizationSlug: string,\n  query: string,\n  dataset: \"spans\" | \"errors\" | \"logs\" = \"spans\",\n  projectSlug?: string,\n  fields?: string[],\n): string {\n  const isSaas = isSentryHost(host);\n  let url = isSaas\n    ? `https://${organizationSlug}.${host}/explore/`\n    : `https://${host}/organizations/${organizationSlug}/explore/`;\n\n  const params = new URLSearchParams();\n  params.append(\"query\", query);\n  params.append(\"dataset\", dataset);\n  params.append(\"layout\", \"table\");\n\n  if (projectSlug) {\n    params.append(\"project\", projectSlug);\n  }\n\n  if (fields && fields.length > 0) {\n    for (const field of fields) {\n      params.append(\"field\", field);\n    }\n  }\n\n  url += `?${params.toString()}`;\n  return url;\n}\n\n/**\n * Internal validation function that checks if a SENTRY_HOST value contains only hostname (no protocol).\n * Throws an error if validation fails instead of exiting the process.\n *\n * @param host The hostname to validate\n * @throws {Error} If the host contains a protocol\n */\nfunction _validateSentryHostInternal(host: string): void {\n  if (host.startsWith(\"http://\") || host.startsWith(\"https://\")) {\n    throw new Error(\n      \"SENTRY_HOST should only contain a hostname (e.g., sentry.example.com). Use SENTRY_URL if you want to provide a full URL.\",\n    );\n  }\n}\n\n/**\n * Internal validation function that checks if a SENTRY_URL value is a valid HTTPS URL and extracts the hostname.\n * Throws an error if validation fails instead of exiting the process.\n *\n * @param url The HTTPS URL to validate and parse\n * @returns The extracted hostname from the URL\n * @throws {Error} If the URL is invalid or not HTTPS\n */\nfunction _validateAndParseSentryUrlInternal(url: string): string {\n  if (!url.startsWith(\"https://\")) {\n    throw new Error(\n      \"SENTRY_URL must be a full HTTPS URL (e.g., https://sentry.example.com).\",\n    );\n  }\n\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.host;\n  } catch (error) {\n    throw new Error(\n      \"SENTRY_URL must be a valid HTTPS URL (e.g., https://sentry.example.com).\",\n    );\n  }\n}\n\n/**\n * Validates that a SENTRY_HOST value contains only hostname (no protocol).\n * Exits the process with error code 1 if validation fails (CLI behavior).\n *\n * @param host The hostname to validate\n */\nexport function validateSentryHost(host: string): void {\n  try {\n    _validateSentryHostInternal(host);\n  } catch (error) {\n    console.error(`Error: ${(error as Error).message}`);\n    process.exit(1);\n  }\n}\n\n/**\n * Validates that a SENTRY_URL value is a valid HTTPS URL and extracts the hostname.\n * Exits the process with error code 1 if validation fails (CLI behavior).\n *\n * @param url The HTTPS URL to validate and parse\n * @returns The extracted hostname from the URL\n */\nexport function validateAndParseSentryUrl(url: string): string {\n  try {\n    return _validateAndParseSentryUrlInternal(url);\n  } catch (error) {\n    console.error(`Error: ${(error as Error).message}`);\n    process.exit(1);\n  }\n}\n\n/**\n * Validates that a SENTRY_HOST value contains only hostname (no protocol).\n * Throws an error instead of exiting the process (for testing).\n *\n * @param host The hostname to validate\n * @throws {Error} If the host contains a protocol\n */\nexport function validateSentryHostThrows(host: string): void {\n  _validateSentryHostInternal(host);\n}\n\n/**\n * Validates that a SENTRY_URL value is a valid HTTPS URL and extracts the hostname.\n * Throws an error instead of exiting the process (for testing).\n *\n * @param url The HTTPS URL to validate and parse\n * @returns The extracted hostname from the URL\n * @throws {Error} If the URL is invalid or not HTTPS\n */\nexport function validateAndParseSentryUrlThrows(url: string): string {\n  return _validateAndParseSentryUrlInternal(url);\n}\n"],"mappings":";;;;;;;AAKA,SAAgB,aAAaA,MAAuB;AAClD,QAAO,SAAS,eAAe,KAAK,SAAS,aAAa;AAC3D;;;;;;;;AASD,SAAgB,YACdA,MACAC,kBACAC,SACQ;CACR,MAAM,SAAS,aAAa,KAAK;AACjC,QAAO,UACF,UAAU,iBAAiB,GAAG,KAAK,UAAU,aAC7C,UAAU,KAAK,iBAAiB,iBAAiB,UAAU;AACjE;;;;;;;;;AAUD,SAAgB,mBACdF,MACAC,kBACAE,OACAC,iBACQ;CACR,MAAM,SAAS,aAAa,KAAK;CACjC,IAAI,MAAM,UACL,UAAU,iBAAiB,GAAG,KAAK,aACnC,UAAU,KAAK,iBAAiB,iBAAiB;CAEtD,MAAM,SAAS,IAAI;AACnB,KAAI,gBACF,QAAO,OAAO,WAAW,gBAAgB;AAE3C,KAAI,MACF,QAAO,OAAO,SAAS,MAAM;CAG/B,MAAM,cAAc,OAAO,UAAU;AACrC,KAAI,YACF,SAAQ,GAAG;AAGb,QAAO;AACR;;;;;;;;AASD,SAAgB,YACdJ,MACAC,kBACAI,SACQ;CACR,MAAM,SAAS,aAAa,KAAK;AACjC,QAAO,UACF,UAAU,iBAAiB,GAAG,KAAK,wBAAwB,aAC3D,UAAU,KAAK,iBAAiB,iBAAiB,wBAAwB;AAC/E;;;;;;;;;;;AAYD,SAAgB,qBACdL,MACAC,kBACAK,OACAC,UAAuC,SACvCC,aACAC,QACQ;CACR,MAAM,SAAS,aAAa,KAAK;CACjC,IAAI,MAAM,UACL,UAAU,iBAAiB,GAAG,KAAK,cACnC,UAAU,KAAK,iBAAiB,iBAAiB;CAEtD,MAAM,SAAS,IAAI;AACnB,QAAO,OAAO,SAAS,MAAM;AAC7B,QAAO,OAAO,WAAW,QAAQ;AACjC,QAAO,OAAO,UAAU,QAAQ;AAEhC,KAAI,YACF,QAAO,OAAO,WAAW,YAAY;AAGvC,KAAI,UAAU,OAAO,SAAS,EAC5B,MAAK,MAAM,SAAS,OAClB,QAAO,OAAO,SAAS,MAAM;AAIjC,SAAQ,GAAG,OAAO,UAAU;AAC5B,QAAO;AACR;;;;;;;;AASD,SAAS,4BAA4BT,MAAoB;AACvD,KAAI,KAAK,WAAW,UAAU,IAAI,KAAK,WAAW,WAAW,CAC3D,OAAM,IAAI,MACR;AAGL;;;;;;;;;AAUD,SAAS,mCAAmCU,KAAqB;AAC/D,MAAK,IAAI,WAAW,WAAW,CAC7B,OAAM,IAAI,MACR;AAIJ,KAAI;EACF,MAAM,YAAY,IAAI,IAAI;AAC1B,SAAO,UAAU;CAClB,SAAQ,OAAO;AACd,QAAM,IAAI,MACR;CAEH;AACF;;;;;;;AAQD,SAAgB,mBAAmBV,MAAoB;AACrD,KAAI;AACF,8BAA4B,KAAK;CAClC,SAAQ,OAAO;AACd,UAAQ,OAAO,SAAU,MAAgB,UAAU;AACnD,UAAQ,KAAK,EAAE;CAChB;AACF;;;;;;;;AASD,SAAgB,0BAA0BU,KAAqB;AAC7D,KAAI;AACF,SAAO,mCAAmC,IAAI;CAC/C,SAAQ,OAAO;AACd,UAAQ,OAAO,SAAU,MAAgB,UAAU;AACnD,UAAQ,KAAK,EAAE;CAChB;AACF;;;;;;;;AASD,SAAgB,yBAAyBV,MAAoB;AAC3D,6BAA4B,KAAK;AAClC;;;;;;;;;AAUD,SAAgB,gCAAgCU,KAAqB;AACnE,QAAO,mCAAmC,IAAI;AAC/C"}