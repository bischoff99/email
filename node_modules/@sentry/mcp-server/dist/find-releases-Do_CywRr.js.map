{"version":3,"file":"find-releases-Do_CywRr.js","names":["context: ServerContext"],"sources":["../src/tools/find-releases.ts"],"sourcesContent":["import { z } from \"zod\";\nimport { setTag } from \"@sentry/core\";\nimport { defineTool } from \"./utils/defineTool\";\nimport { apiServiceFromContext } from \"./utils/api-utils\";\nimport type { ServerContext } from \"../types\";\nimport {\n  ParamOrganizationSlug,\n  ParamRegionUrl,\n  ParamProjectSlugOrAll,\n} from \"../schema\";\n\nexport default defineTool({\n  name: \"find_releases\",\n  description: [\n    \"Find releases in Sentry.\",\n    \"\",\n    \"Use this tool when you need to:\",\n    \"- Find recent releases in a Sentry organization\",\n    \"- Find the most recent version released of a specific project\",\n    \"- Determine when a release was deployed to an environment\",\n    \"\",\n    \"<examples>\",\n    \"### Find the most recent releases in the 'my-organization' organization\",\n    \"\",\n    \"```\",\n    \"find_releases(organizationSlug='my-organization')\",\n    \"```\",\n    \"\",\n    \"### Find releases matching '2ce6a27' in the 'my-organization' organization\",\n    \"\",\n    \"```\",\n    \"find_releases(organizationSlug='my-organization', query='2ce6a27')\",\n    \"```\",\n    \"</examples>\",\n    \"\",\n    \"<hints>\",\n    \"- If the user passes a parameter in the form of name/otherName, its likely in the format of <organizationSlug>/<projectSlug>.\",\n    \"</hints>\",\n  ].join(\"\\n\"),\n  inputSchema: {\n    organizationSlug: ParamOrganizationSlug,\n    regionUrl: ParamRegionUrl.optional(),\n    projectSlug: ParamProjectSlugOrAll.optional(),\n    query: z\n      .string()\n      .trim()\n      .describe(\"Search for versions which contain the provided string.\")\n      .optional(),\n  },\n  async handler(params, context: ServerContext) {\n    const apiService = apiServiceFromContext(context, {\n      regionUrl: params.regionUrl,\n    });\n    const organizationSlug = params.organizationSlug;\n\n    setTag(\"organization.slug\", organizationSlug);\n\n    const releases = await apiService.listReleases({\n      organizationSlug,\n      projectSlug: params.projectSlug,\n      query: params.query,\n    });\n    let output = `# Releases in **${organizationSlug}${params.projectSlug ? `/${params.projectSlug}` : \"\"}**\\n\\n`;\n    if (releases.length === 0) {\n      output += \"No releases found.\\n\";\n      return output;\n    }\n    output += releases\n      .map((release) => {\n        const releaseInfo = [\n          `## ${release.shortVersion}`,\n          \"\",\n          `**Created**: ${new Date(release.dateCreated).toISOString()}`,\n        ];\n        if (release.dateReleased) {\n          releaseInfo.push(\n            `**Released**: ${new Date(release.dateReleased).toISOString()}`,\n          );\n        }\n        if (release.firstEvent) {\n          releaseInfo.push(\n            `**First Event**: ${new Date(release.firstEvent).toISOString()}`,\n          );\n        }\n        if (release.lastEvent) {\n          releaseInfo.push(\n            `**Last Event**: ${new Date(release.lastEvent).toISOString()}`,\n          );\n        }\n        if (release.newGroups !== undefined) {\n          releaseInfo.push(`**New Issues**: ${release.newGroups}`);\n        }\n        if (release.projects && release.projects.length > 0) {\n          releaseInfo.push(\n            `**Projects**: ${release.projects.map((p) => p.name).join(\", \")}`,\n          );\n        }\n        if (release.lastCommit) {\n          releaseInfo.push(\"\", `### Last Commit`, \"\");\n          releaseInfo.push(`**Commit ID**: ${release.lastCommit.id}`);\n          releaseInfo.push(`**Commit Message**: ${release.lastCommit.message}`);\n          releaseInfo.push(\n            `**Commit Author**: ${release.lastCommit.author.name}`,\n          );\n          releaseInfo.push(\n            `**Commit Date**: ${new Date(release.lastCommit.dateCreated).toISOString()}`,\n          );\n        }\n        if (release.lastDeploy) {\n          releaseInfo.push(\"\", `### Last Deploy`, \"\");\n          releaseInfo.push(`**Deploy ID**: ${release.lastDeploy.id}`);\n          releaseInfo.push(\n            `**Environment**: ${release.lastDeploy.environment}`,\n          );\n          if (release.lastDeploy.dateStarted) {\n            releaseInfo.push(\n              `**Deploy Started**: ${new Date(release.lastDeploy.dateStarted).toISOString()}`,\n            );\n          }\n          if (release.lastDeploy.dateFinished) {\n            releaseInfo.push(\n              `**Deploy Finished**: ${new Date(release.lastDeploy.dateFinished).toISOString()}`,\n            );\n          }\n        }\n        return releaseInfo.join(\"\\n\");\n      })\n      .join(\"\\n\\n\");\n    output += \"\\n\\n\";\n    output += \"# Using this information\\n\\n\";\n    output += `- You can reference the Release version in commit messages or documentation.\\n`;\n    output += `- You can search for issues in a specific release using the \\`find_errors()\\` tool with the query \\`release:${releases.length ? releases[0]!.shortVersion : \"VERSION\"}\\`.\\n`;\n    return output;\n  },\n});\n"],"mappings":";;;;;;;AAWA,4BAAe,WAAW;CACxB,MAAM;CACN,aAAa;EACX;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;CACD,EAAC,KAAK,KAAK;CACZ,aAAa;EACX,kBAAkB;EAClB,WAAW,eAAe,UAAU;EACpC,aAAa,sBAAsB,UAAU;EAC7C,OAAO,EACJ,QAAQ,CACR,MAAM,CACN,SAAS,yDAAyD,CAClE,UAAU;CACd;CACD,MAAM,QAAQ,QAAQA,SAAwB;EAC5C,MAAM,aAAa,sBAAsB,SAAS,EAChD,WAAW,OAAO,UACnB,EAAC;EACF,MAAM,mBAAmB,OAAO;AAEhC,SAAO,qBAAqB,iBAAiB;EAE7C,MAAM,WAAW,MAAM,WAAW,aAAa;GAC7C;GACA,aAAa,OAAO;GACpB,OAAO,OAAO;EACf,EAAC;EACF,IAAI,UAAU,kBAAkB,mBAAmB,OAAO,eAAe,GAAG,OAAO,gBAAgB,GAAG;AACtG,MAAI,SAAS,WAAW,GAAG;AACzB,aAAU;AACV,UAAO;EACR;AACD,YAAU,SACP,IAAI,CAAC,YAAY;GAChB,MAAM,cAAc;KACjB,KAAK,QAAQ;IACd;KACC,eAAe,IAAI,KAAK,QAAQ,aAAa,aAAa;GAC5D;AACD,OAAI,QAAQ,aACV,aAAY,MACT,gBAAgB,IAAI,KAAK,QAAQ,cAAc,aAAa,GAC9D;AAEH,OAAI,QAAQ,WACV,aAAY,MACT,mBAAmB,IAAI,KAAK,QAAQ,YAAY,aAAa,GAC/D;AAEH,OAAI,QAAQ,UACV,aAAY,MACT,kBAAkB,IAAI,KAAK,QAAQ,WAAW,aAAa,GAC7D;AAEH,OAAI,QAAQ,qBACV,aAAY,MAAM,kBAAkB,QAAQ,YAAY;AAE1D,OAAI,QAAQ,YAAY,QAAQ,SAAS,SAAS,EAChD,aAAY,MACT,gBAAgB,QAAQ,SAAS,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,KAAK,KAAK,GAChE;AAEH,OAAI,QAAQ,YAAY;AACtB,gBAAY,KAAK,KAAK,kBAAkB,GAAG;AAC3C,gBAAY,MAAM,iBAAiB,QAAQ,WAAW,KAAK;AAC3D,gBAAY,MAAM,sBAAsB,QAAQ,WAAW,UAAU;AACrE,gBAAY,MACT,qBAAqB,QAAQ,WAAW,OAAO,OACjD;AACD,gBAAY,MACT,mBAAmB,IAAI,KAAK,QAAQ,WAAW,aAAa,aAAa,GAC3E;GACF;AACD,OAAI,QAAQ,YAAY;AACtB,gBAAY,KAAK,KAAK,kBAAkB,GAAG;AAC3C,gBAAY,MAAM,iBAAiB,QAAQ,WAAW,KAAK;AAC3D,gBAAY,MACT,mBAAmB,QAAQ,WAAW,cACxC;AACD,QAAI,QAAQ,WAAW,YACrB,aAAY,MACT,sBAAsB,IAAI,KAAK,QAAQ,WAAW,aAAa,aAAa,GAC9E;AAEH,QAAI,QAAQ,WAAW,aACrB,aAAY,MACT,uBAAuB,IAAI,KAAK,QAAQ,WAAW,cAAc,aAAa,GAChF;GAEJ;AACD,UAAO,YAAY,KAAK,KAAK;EAC9B,EAAC,CACD,KAAK,OAAO;AACf,YAAU;AACV,YAAU;AACV,aAAW;AACX,aAAW,8GAA8G,SAAS,SAAS,SAAS,GAAI,eAAe,UAAU;AACjL,SAAO;CACR;AACF,EAAC"}