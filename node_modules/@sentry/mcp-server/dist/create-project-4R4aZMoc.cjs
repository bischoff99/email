const require_chunk = require('./chunk-DWy1uDak.cjs');
const require_defineTool = require('./defineTool-lWNTzWl_.cjs');
const require_api_utils = require('./api-utils-DFWUfQ83.cjs');
const require_schema = require('./schema-BL3kwfOA.cjs');
const require_logging = require('./logging-BpL53bY6.cjs');
const zod = require_chunk.__toESM(require("zod"));
const __sentry_core = require_chunk.__toESM(require("@sentry/core"));

//#region src/tools/create-project.ts
var create_project_default = require_defineTool.defineTool({
	name: "create_project",
	description: [
		"Create a new project in Sentry (includes DSN automatically).",
		"",
		"üîç USE THIS TOOL WHEN USERS WANT TO:",
		"- 'Create a new project'",
		"- 'Set up a project for [app/service] with team [X]'",
		"- 'I need a new Sentry project'",
		"- Create project AND need DSN in one step",
		"",
		"‚ùå DO NOT USE create_dsn after this - DSN is included in output.",
		"",
		"Be careful when using this tool!",
		"",
		"<examples>",
		"### Create new project with team",
		"```",
		"create_project(organizationSlug='my-organization', teamSlug='my-team', name='my-project', platform='javascript')",
		"```",
		"</examples>",
		"",
		"<hints>",
		"- If the user passes a parameter in the form of name/otherName, its likely in the format of <organizationSlug>/<teamSlug>.",
		"- If any parameter is ambiguous, you should clarify with the user what they meant.",
		"</hints>"
	].join("\n"),
	inputSchema: {
		organizationSlug: require_schema.ParamOrganizationSlug,
		regionUrl: require_schema.ParamRegionUrl.optional(),
		teamSlug: require_schema.ParamTeamSlug,
		name: zod.z.string().trim().describe("The name of the project to create. Typically this is commonly the name of the repository or service. It is only used as a visual label in Sentry."),
		platform: require_schema.ParamPlatform.optional()
	},
	async handler(params, context) {
		const apiService = require_api_utils.apiServiceFromContext(context, { regionUrl: params.regionUrl });
		const organizationSlug = params.organizationSlug;
		(0, __sentry_core.setTag)("organization.slug", organizationSlug);
		(0, __sentry_core.setTag)("team.slug", params.teamSlug);
		const project = await apiService.createProject({
			organizationSlug,
			teamSlug: params.teamSlug,
			name: params.name,
			platform: params.platform
		});
		let clientKey = null;
		try {
			clientKey = await apiService.createClientKey({
				organizationSlug,
				projectSlug: project.slug,
				name: "Default"
			});
		} catch (err) {
			require_logging.logError(err);
		}
		let output = `# New Project in **${organizationSlug}**\n\n`;
		output += `**ID**: ${project.id}\n`;
		output += `**Slug**: ${project.slug}\n`;
		output += `**Name**: ${project.name}\n`;
		if (clientKey) output += `**SENTRY_DSN**: ${clientKey?.dsn.public}\n\n`;
		else output += "**SENTRY_DSN**: There was an error fetching this value.\n\n";
		output += "# Using this information\n\n";
		output += `- You can reference the **SENTRY_DSN** value to initialize Sentry's SDKs.\n`;
		output += `- You should always inform the user of the **SENTRY_DSN** and Project Slug values.\n`;
		return output;
	}
});

//#endregion
Object.defineProperty(exports, 'create_project_default', {
  enumerable: true,
  get: function () {
    return create_project_default;
  }
});
//# sourceMappingURL=create-project-4R4aZMoc.cjs.map