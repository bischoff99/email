{"version":3,"file":"agent-DZRRChrO.js","names":["params: {\n    naturalLanguageQuery: string;\n    organizationSlug: string;\n    projectSlugOrId?: string;\n    projectId?: string;\n  }","apiService: SentryApiService"],"sources":["../src/tools/search-issues/agent.ts"],"sourcesContent":["import { generateText, tool, Output } from \"ai\";\nimport { openai } from \"@ai-sdk/openai\";\nimport { z } from \"zod\";\nimport type { SentryApiService } from \"../../api-client\";\nimport { ConfigurationError, UserInputError } from \"../../errors\";\nimport { createDatasetFieldsTool } from \"../../agent-tools/discover-dataset-fields\";\nimport { createWhoamiTool } from \"../../agent-tools/whoami\";\nimport { systemPrompt } from \"./config\";\n\n// Schema for agent output\nconst IssueQuerySchema = z.object({\n  query: z.string().describe(\"The Sentry issue search query\"),\n  sort: z\n    .enum([\"date\", \"freq\", \"new\", \"user\"])\n    .nullable()\n    .describe(\"How to sort the results (null if no specific sort is needed)\"),\n  explanation: z\n    .string()\n    .nullable()\n    .describe(\"Brief explanation of the translation (null if not needed)\"),\n});\n\nexport type IssueQuery = z.infer<typeof IssueQuerySchema>;\n\n/**\n * Translate natural language query to Sentry issue search syntax\n */\nexport async function translateQuery(\n  params: {\n    naturalLanguageQuery: string;\n    organizationSlug: string;\n    projectSlugOrId?: string;\n    projectId?: string;\n  },\n  apiService: SentryApiService,\n): Promise<IssueQuery> {\n  // Check for OpenAI API key\n  if (!process.env.OPENAI_API_KEY) {\n    throw new ConfigurationError(\n      \"OpenAI API key not configured. Set OPENAI_API_KEY environment variable.\",\n    );\n  }\n\n  // Create the agent tools\n  const tools = {\n    issueFields: createDatasetFieldsTool(\n      apiService,\n      params.organizationSlug,\n      \"search_issues\",\n      params.projectId,\n    ),\n    whoami: createWhoamiTool(apiService),\n  };\n\n  try {\n    const result = await generateText({\n      model: openai(\"gpt-4o\", { structuredOutputs: true }),\n      system: systemPrompt,\n      prompt: params.naturalLanguageQuery,\n      tools,\n      maxSteps: 3,\n      experimental_output: Output.object({\n        schema: IssueQuerySchema,\n      }),\n      experimental_telemetry: {\n        isEnabled: true,\n        functionId: \"search_issues_agent\",\n      },\n    });\n\n    const query = result.experimental_output;\n    if (!query) {\n      throw new Error(\"Failed to generate query\");\n    }\n\n    return query;\n  } catch (error) {\n    if (\n      error instanceof UserInputError ||\n      error instanceof ConfigurationError\n    ) {\n      throw error;\n    }\n\n    throw new Error(\n      `Failed to translate query: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n      { cause: error },\n    );\n  }\n}\n"],"mappings":";;;;;;;;;AAUA,MAAM,mBAAmB,EAAE,OAAO;CAChC,OAAO,EAAE,QAAQ,CAAC,SAAS,gCAAgC;CAC3D,MAAM,EACH,KAAK;EAAC;EAAQ;EAAQ;EAAO;CAAO,EAAC,CACrC,UAAU,CACV,SAAS,+DAA+D;CAC3E,aAAa,EACV,QAAQ,CACR,UAAU,CACV,SAAS,4DAA4D;AACzE,EAAC;;;;AAOF,eAAsB,eACpBA,QAMAC,YACqB;AAErB,MAAK,QAAQ,IAAI,eACf,OAAM,IAAI,mBACR;CAKJ,MAAM,QAAQ;EACZ,aAAa,wBACX,YACA,OAAO,kBACP,iBACA,OAAO,UACR;EACD,QAAQ,iBAAiB,WAAW;CACrC;AAED,KAAI;EACF,MAAM,SAAS,MAAM,aAAa;GAChC,OAAO,OAAO,UAAU,EAAE,mBAAmB,KAAM,EAAC;GACpD,QAAQ;GACR,QAAQ,OAAO;GACf;GACA,UAAU;GACV,qBAAqB,OAAO,OAAO,EACjC,QAAQ,iBACT,EAAC;GACF,wBAAwB;IACtB,WAAW;IACX,YAAY;GACb;EACF,EAAC;EAEF,MAAM,QAAQ,OAAO;AACrB,OAAK,MACH,OAAM,IAAI,MAAM;AAGlB,SAAO;CACR,SAAQ,OAAO;AACd,MACE,iBAAiB,kBACjB,iBAAiB,mBAEjB,OAAM;AAGR,QAAM,IAAI,OACP,6BAA6B,iBAAiB,QAAQ,MAAM,UAAU,mBACvE,EAAE,OAAO,MAAO;CAEnB;AACF"}