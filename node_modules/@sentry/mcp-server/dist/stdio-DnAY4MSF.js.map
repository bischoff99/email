{"version":3,"file":"stdio-DnAY4MSF.js","names":["server: McpServer","context: ServerContext"],"sources":["../src/transports/stdio.ts"],"sourcesContent":["/**\n * Standard I/O Transport for MCP Server.\n *\n * Provides stdio-based communication for the Sentry MCP server, typically used\n * when the server runs as a subprocess communicating via stdin/stdout pipes.\n *\n * @example Basic Usage\n * ```typescript\n * import { Server } from \"@modelcontextprotocol/sdk/server/index.js\";\n * import { startStdio } from \"./transports/stdio.js\";\n *\n * const server = new Server();\n * const context = {\n *   accessToken: process.env.SENTRY_TOKEN,\n *   host: \"sentry.io\"\n * };\n *\n * await startStdio(server, context);\n * ```\n */\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\nimport type { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport { configureServer } from \"../server\";\nimport type { ServerContext } from \"../types\";\nimport * as Sentry from \"@sentry/node\";\nimport { LIB_VERSION } from \"../version\";\n\n/**\n * Starts the MCP server with stdio transport and telemetry.\n *\n * Configures the server with all tools, prompts, and resources, then connects\n * using stdio transport for process-based communication. All operations are\n * wrapped in Sentry tracing for observability.\n *\n * @param server - MCP server instance to configure and start\n * @param context - Server context with authentication and configuration\n *\n * @example CLI Integration\n * ```typescript\n * // In a CLI tool or IDE extension:\n * const server = new McpServer();\n * await startStdio(server, {\n *   accessToken: userToken,\n *   host: userHost,\n *   userId: \"user-123\",\n *   clientId: \"cursor-ide\"\n * });\n * ```\n */\nexport async function startStdio(server: McpServer, context: ServerContext) {\n  await Sentry.startNewTrace(async () => {\n    return await Sentry.startSpan(\n      {\n        name: \"mcp.server/stdio\",\n        attributes: {\n          \"mcp.transport\": \"stdio\",\n          \"network.transport\": \"pipe\",\n          \"service.version\": LIB_VERSION,\n        },\n      },\n      async () => {\n        const transport = new StdioServerTransport();\n        await configureServer({ server, context });\n        await server.connect(transport);\n      },\n    );\n  });\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA,eAAsB,WAAWA,QAAmBC,SAAwB;AAC1E,OAAM,OAAO,cAAc,YAAY;AACrC,SAAO,MAAM,OAAO,UAClB;GACE,MAAM;GACN,YAAY;IACV,iBAAiB;IACjB,qBAAqB;IACrB,mBAAmB;GACpB;EACF,GACD,YAAY;GACV,MAAM,YAAY,IAAI;AACtB,SAAM,gBAAgB;IAAE;IAAQ;GAAS,EAAC;AAC1C,SAAM,OAAO,QAAQ,UAAU;EAChC,EACF;CACF,EAAC;AACH"}