#!/usr/bin/env node
import "./constants-Fe-4NTUo.js";
import "./errors-D_R568zP.js";
import "./defineTool-77H4nSna.js";
import { validateAndParseSentryUrl, validateSentryHost } from "./url-utils-IqgSmI-B.js";
import "./schema-CcFmBoEf.js";
import "./client-MaVV1gVC.js";
import "./types-6zHoEWAx.js";
import "./api-client-CNv_hbPO.js";
import "./api-utils-BlUSO8xh.js";
import "./whoami-Bswhb72a.js";
import "./find-organizations-Cs1GvZtJ.js";
import "./schema-DMfkTR1l.js";
import "./find-teams-BylQQ4FO.js";
import "./find-projects-CZCMck_0.js";
import "./find-releases-Do_CywRr.js";
import "./issue-helpers-CRx45FYG.js";
import "./seer-utils-NPHv8KYY.js";
import "./formatting-DIvCVunN.js";
import "./issue-utils-BVAB6I-Z.js";
import "./get-issue-details-_uS_AZ_v.js";
import "./get-event-attachment-CVoMrETq.js";
import "./formatting-utils-C3sej5ER.js";
import "./update-issue-DoQYEQjf.js";
import "./lookup-otel-semantics-Dt667kdR.js";
import "./whoami-xBAWvzG4.js";
import "./logging-tGU_SYcA.js";
import "./utils-OgYE-imr.js";
import "./agent-COgY789I.js";
import "./formatters-DSYXBiQx.js";
import "./config-BvtWiL3I.js";
import "./handler-B0bLvFFX.js";
import "./search-events-bV3-kK78.js";
import "./create-team-D0dUl7Zo.js";
import "./create-project-Ca1Sy1_F.js";
import "./update-project-C9CLxNfF.js";
import "./create-dsn-BT3t-MDA.js";
import "./find-dsns-DrNAfU_Q.js";
import "./fetch-utils-C_Xj921x.js";
import "./analyze-issue-with-seer-CpwtN4UA.js";
import "./fetch-utils-BqMx2KQr.js";
import "./search-docs-DIm3ykOg.js";
import "./get-doc-DyqJe6TP.js";
import "./discover-dataset-fields-BEnyqPSq.js";
import "./config-BUmDxVLS.js";
import "./agent-DZRRChrO.js";
import "./formatters-B3ONbRhI.js";
import "./handler-DTN2HYXt.js";
import "./search-issues-BFgCvRYe.js";
import "./tools-B0wbxDty.js";
import "./resources-jcFoc4JU.js";
import "./promptDefinitions-DF8nuJVq.js";
import "./prompts-CYcvIxWR.js";
import { LIB_VERSION } from "./version-DvjTvYJs.js";
import "./server-CnJvaT0s.js";
import { startStdio } from "./stdio-DnAY4MSF.js";
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import * as Sentry from "@sentry/node";

//#region src/index.ts
let accessToken = process.env.SENTRY_ACCESS_TOKEN;
let sentryHost = "sentry.io";
let mcpUrl = process.env.MCP_URL || "https://mcp.sentry.dev";
let sentryDsn = process.env.SENTRY_DSN || "https://d0805acebb937435abcb5958da99cdab@o1.ingest.us.sentry.io/4509062593708032";
if (process.env.SENTRY_URL) sentryHost = validateAndParseSentryUrl(process.env.SENTRY_URL);
else if (process.env.SENTRY_HOST) {
	validateSentryHost(process.env.SENTRY_HOST);
	sentryHost = process.env.SENTRY_HOST;
}
const packageName = "@sentry/mcp-server";
function getUsage() {
	return `Usage: ${packageName} --access-token=<token> [--host=<host>|--url=<url>] [--mcp-url=<url>] [--sentry-dsn=<dsn>]`;
}
for (const arg of process.argv.slice(2)) {
	if (arg === "--version" || arg === "-v") {
		console.log(`${packageName} ${LIB_VERSION}`);
		process.exit(0);
	}
	if (arg.startsWith("--access-token=")) accessToken = arg.split("=")[1];
	else if (arg.startsWith("--host=")) {
		sentryHost = arg.split("=")[1];
		validateSentryHost(sentryHost);
	} else if (arg.startsWith("--url=")) {
		const url = arg.split("=")[1];
		sentryHost = validateAndParseSentryUrl(url);
	} else if (arg.startsWith("--mcp-url=")) mcpUrl = arg.split("=")[1];
	else if (arg.startsWith("--sentry-dsn=")) sentryDsn = arg.split("=")[1];
	else {
		console.error("Error: Invalid argument:", arg);
		console.error(getUsage());
		process.exit(1);
	}
}
if (!accessToken) {
	console.error("Error: No access token was provided. Pass one with `--access-token` or via `SENTRY_ACCESS_TOKEN`.");
	console.error(getUsage());
	process.exit(1);
}
if (!process.env.OPENAI_API_KEY) {
	console.warn("Warning: OPENAI_API_KEY environment variable is not set.");
	console.warn("The following AI-powered search tools will be unavailable:");
	console.warn("  - search_events (natural language event search)");
	console.warn("  - search_issues (natural language issue search)");
	console.warn("All other tools will function normally. To enable AI-powered search, set OPENAI_API_KEY.");
	console.warn("");
}
Sentry.init({
	dsn: sentryDsn,
	sendDefaultPii: true,
	tracesSampleRate: 1,
	initialScope: { tags: {
		"mcp.server_version": LIB_VERSION,
		"mcp.transport": "stdio",
		"sentry.host": sentryHost,
		"mcp.mcp-url": mcpUrl
	} },
	release: "0.17.1",
	integrations: [
		Sentry.consoleLoggingIntegration(),
		Sentry.zodErrorsIntegration(),
		Sentry.vercelAIIntegration({
			recordInputs: true,
			recordOutputs: true
		})
	],
	environment: "stdio"
});
const server = new McpServer({
	name: "Sentry MCP",
	version: LIB_VERSION
});
const instrumentedServer = Sentry.wrapMcpServerWithSentry(server);
const SENTRY_TIMEOUT = 5e3;
startStdio(instrumentedServer, {
	accessToken,
	organizationSlug: null,
	sentryHost,
	mcpUrl
}).catch((err) => {
	console.error("Server error:", err);
	Sentry.flush(SENTRY_TIMEOUT);
	process.exit(1);
});
Sentry.flush(SENTRY_TIMEOUT);

//#endregion
//# sourceMappingURL=index.js.map