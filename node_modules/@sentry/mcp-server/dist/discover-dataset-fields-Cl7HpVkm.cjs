const require_chunk = require('./chunk-DWy1uDak.cjs');
const zod = require_chunk.__toESM(require("zod"));
const ai = require_chunk.__toESM(require("ai"));

//#region src/agent-tools/discover-dataset-fields.ts
/**
* Discover available fields for a dataset by querying Sentry's tags API
*/
async function discoverDatasetFields(apiService, organizationSlug, dataset, options = {}) {
	const { projectId, includeExamples = false } = options;
	const tags = await apiService.listTags({
		organizationSlug,
		dataset,
		project: projectId,
		statsPeriod: "14d"
	});
	const fields = tags.filter((tag) => !tag.key.startsWith("sentry:")).map((tag) => ({
		key: tag.key,
		name: tag.name,
		totalValues: tag.totalValues,
		examples: includeExamples ? getFieldExamples(tag.key, dataset) : void 0
	}));
	return {
		dataset,
		fields,
		commonPatterns: getCommonPatterns(dataset)
	};
}
/**
* Create a tool for discovering available fields in a dataset
*/
function createDatasetFieldsTool(apiService, organizationSlug, dataset, projectId) {
	return (0, ai.tool)({
		description: `Discover available fields for ${dataset} searches in Sentry`,
		parameters: zod.z.object({ includeExamples: zod.z.boolean().describe("Include example values for each field (set to false if you don't need examples)") }),
		execute: async ({ includeExamples }) => {
			return discoverDatasetFields(apiService, organizationSlug, dataset, {
				projectId,
				includeExamples
			});
		}
	});
}
/**
* Get example values for common fields
*/
function getFieldExamples(key, dataset) {
	const commonExamples = {
		level: [
			"error",
			"warning",
			"info",
			"debug",
			"fatal"
		],
		environment: [
			"production",
			"staging",
			"development"
		],
		release: [
			"v1.0.0",
			"latest",
			"backend@1.2.3"
		],
		user: ["user123", "email@example.com"]
	};
	const issueExamples = {
		...commonExamples,
		assignedOrSuggested: [
			"email@example.com",
			"team-slug",
			"me"
		],
		is: [
			"unresolved",
			"resolved",
			"ignored"
		]
	};
	const eventExamples = {
		...commonExamples,
		"http.method": [
			"GET",
			"POST",
			"PUT",
			"DELETE"
		],
		"http.status_code": [
			"200",
			"404",
			"500"
		],
		"db.system": [
			"postgresql",
			"mysql",
			"redis"
		]
	};
	if (dataset === "search_issues") return issueExamples[key];
	if (dataset === "events" || dataset === "errors") return eventExamples[key];
	return commonExamples[key];
}
/**
* Get common search patterns for a dataset
*/
function getCommonPatterns(dataset) {
	if (dataset === "search_issues") return [
		{
			pattern: "is:unresolved",
			description: "Open issues"
		},
		{
			pattern: "is:resolved",
			description: "Closed issues"
		},
		{
			pattern: "level:error",
			description: "Error level issues"
		},
		{
			pattern: "firstSeen:-24h",
			description: "New issues from last 24 hours"
		},
		{
			pattern: "userCount:>100",
			description: "Affecting more than 100 users"
		}
	];
	if (dataset === "events" || dataset === "errors") return [
		{
			pattern: "level:error",
			description: "Error events"
		},
		{
			pattern: "environment:production",
			description: "Production events"
		},
		{
			pattern: "timestamp:-1h",
			description: "Events from last hour"
		},
		{
			pattern: "has:http.method",
			description: "HTTP requests"
		},
		{
			pattern: "has:db.statement",
			description: "Database queries"
		}
	];
	return [];
}

//#endregion
Object.defineProperty(exports, 'createDatasetFieldsTool', {
  enumerable: true,
  get: function () {
    return createDatasetFieldsTool;
  }
});
Object.defineProperty(exports, 'discoverDatasetFields', {
  enumerable: true,
  get: function () {
    return discoverDatasetFields;
  }
});
Object.defineProperty(exports, 'getCommonPatterns', {
  enumerable: true,
  get: function () {
    return getCommonPatterns;
  }
});
Object.defineProperty(exports, 'getFieldExamples', {
  enumerable: true,
  get: function () {
    return getFieldExamples;
  }
});
//# sourceMappingURL=discover-dataset-fields-Cl7HpVkm.cjs.map