const require_chunk = require('./chunk-DWy1uDak.cjs');
const require_constants = require('./constants-wrEbre3j.cjs');
const require_errors = require('./errors-BtJEw2Z-.cjs');
const __modelcontextprotocol_sdk_server_mcp_js = require_chunk.__toESM(require("@modelcontextprotocol/sdk/server/mcp.js"));

//#region src/resources.ts
/**
* Type guard to check if a resource uses a URI template
*/
function isTemplateResource(resource) {
	return "template" in resource && resource.template instanceof __modelcontextprotocol_sdk_server_mcp_js.ResourceTemplate;
}
/**
* Fetches Sentry documentation in markdown format.
* Converts docs.sentry.io URLs to their markdown equivalents.
*
* The handler receives the exact URI from the resource definition,
* but dynamically constructs the markdown URL based on the actual request.
*/
async function sentryDocsHandler(url, _extra) {
	const path = `${url.pathname.replace(/\/$/, "")}.md`;
	const mdUrl = `${url.origin}${path}`;
	const response = await fetch(mdUrl, { headers: { "User-Agent": "Sentry MCP Server" } });
	if (!response.ok) {
		if (response.status === 404) throw new require_errors.UserInputError(`Sentry documentation not found at ${url.pathname}. Please check the URL is correct.`);
		throw new Error(`Failed to fetch Sentry docs: ${response.status} ${response.statusText}`);
	}
	const content = await response.text();
	return { contents: [{
		uri: url.toString(),
		mimeType: "text/markdown",
		text: content
	}] };
}
const RESOURCES = [{
	name: "sentry-docs-platform",
	template: new __modelcontextprotocol_sdk_server_mcp_js.ResourceTemplate("https://docs.sentry.io/platforms/{platform}/", { list: async (_extra) => ({ resources: require_constants.SENTRY_PLATFORMS_BASE.map((platform) => ({
		uri: `https://docs.sentry.io/platforms/${platform}/`,
		name: `${platform}-docs`,
		description: `Sentry SDK documentation for ${platform}`,
		mimeType: "text/markdown"
	})) }) }),
	mimeType: "text/markdown",
	description: "Sentry SDK documentation for {platform}",
	handler: sentryDocsHandler
}, {
	name: "sentry-docs-platform-guide",
	template: new __modelcontextprotocol_sdk_server_mcp_js.ResourceTemplate("https://docs.sentry.io/platforms/{platform}/guides/{framework}/", { list: async (_extra) => ({ resources: Object.entries(require_constants.SENTRY_FRAMEWORKS).flatMap(([platform, frameworks]) => frameworks.map((framework) => ({
		uri: `https://docs.sentry.io/platforms/${platform}/guides/${framework}/`,
		name: `${platform}-${framework}-guide`,
		description: `Sentry integration guide for ${framework} on ${platform}`,
		mimeType: "text/markdown"
	}))) }) }),
	mimeType: "text/markdown",
	description: "Sentry integration guide for {framework} on {platform}",
	handler: sentryDocsHandler
}];

//#endregion
Object.defineProperty(exports, 'RESOURCES', {
  enumerable: true,
  get: function () {
    return RESOURCES;
  }
});
Object.defineProperty(exports, 'isTemplateResource', {
  enumerable: true,
  get: function () {
    return isTemplateResource;
  }
});
//# sourceMappingURL=resources-Dadvq5Fm.cjs.map