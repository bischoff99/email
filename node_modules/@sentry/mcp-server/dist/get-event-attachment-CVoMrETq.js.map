{"version":3,"file":"get-event-attachment-CVoMrETq.js","names":["context: ServerContext","contentParts: (TextContent | ImageContent | EmbeddedResource)[]","image: ImageContent","resource: EmbeddedResource","output","text: TextContent"],"sources":["../src/tools/get-event-attachment.ts"],"sourcesContent":["import { z } from \"zod\";\nimport { defineTool } from \"./utils/defineTool\";\nimport { apiServiceFromContext } from \"./utils/api-utils\";\nimport type { ServerContext } from \"../types\";\nimport type {\n  TextContent,\n  ImageContent,\n  EmbeddedResource,\n} from \"@modelcontextprotocol/sdk/types.js\";\nimport {\n  ParamOrganizationSlug,\n  ParamProjectSlug,\n  ParamEventId,\n  ParamAttachmentId,\n  ParamRegionUrl,\n} from \"../schema\";\nimport { setTag } from \"@sentry/core\";\n\nexport default defineTool({\n  name: \"get_event_attachment\",\n  description: [\n    \"Download attachments from a Sentry event.\",\n    \"\",\n    \"Use this tool when you need to:\",\n    \"- Download files attached to a specific event\",\n    \"- Access screenshots, log files, or other attachments uploaded with an error report\",\n    \"- Retrieve attachment metadata and download URLs\",\n    \"\",\n    \"<examples>\",\n    \"### Download a specific attachment by ID\",\n    \"\",\n    \"```\",\n    \"get_event_attachment(organizationSlug='my-organization', projectSlug='my-project', eventId='c49541c747cb4d8aa3efb70ca5aba243', attachmentId='12345')\",\n    \"```\",\n    \"\",\n    \"### List all attachments for an event\",\n    \"\",\n    \"```\",\n    \"get_event_attachment(organizationSlug='my-organization', projectSlug='my-project', eventId='c49541c747cb4d8aa3efb70ca5aba243')\",\n    \"```\",\n    \"\",\n    \"</examples>\",\n    \"\",\n    \"<hints>\",\n    \"- If `attachmentId` is provided, the specific attachment will be downloaded as an embedded resource\",\n    \"- If `attachmentId` is omitted, all attachments for the event will be listed with download information\",\n    \"- The `projectSlug` is required to identify which project the event belongs to\",\n    \"</hints>\",\n  ].join(\"\\n\"),\n  inputSchema: {\n    organizationSlug: ParamOrganizationSlug,\n    projectSlug: ParamProjectSlug,\n    eventId: ParamEventId,\n    attachmentId: ParamAttachmentId.optional(),\n    regionUrl: ParamRegionUrl.optional(),\n  },\n  async handler(params, context: ServerContext) {\n    const apiService = apiServiceFromContext(context, {\n      regionUrl: params.regionUrl,\n    });\n\n    setTag(\"organization.slug\", params.organizationSlug);\n\n    // If attachmentId is provided, download the specific attachment\n    if (params.attachmentId) {\n      const attachment = await apiService.getEventAttachment({\n        organizationSlug: params.organizationSlug,\n        projectSlug: params.projectSlug,\n        eventId: params.eventId,\n        attachmentId: params.attachmentId,\n      });\n\n      const contentParts: (TextContent | ImageContent | EmbeddedResource)[] =\n        [];\n      const isBinary = !attachment.attachment.mimetype?.startsWith(\"text/\");\n\n      if (isBinary) {\n        const isImage = attachment.attachment.mimetype?.startsWith(\"image/\");\n        // Base64 encode the binary attachment content\n        // and add to the content as an embedded resource\n        const uint8Array = new Uint8Array(await attachment.blob.arrayBuffer());\n        let binary = \"\";\n        for (let i = 0; i < uint8Array.byteLength; i++) {\n          binary += String.fromCharCode(uint8Array[i]);\n        }\n        if (isImage) {\n          const image: ImageContent = {\n            type: \"image\",\n            mimeType: attachment.attachment.mimetype,\n            data: btoa(binary),\n          };\n          contentParts.push(image);\n        } else {\n          const resource: EmbeddedResource = {\n            id: params.attachmentId,\n            type: \"resource\",\n            resource: {\n              uri: `file://${attachment.filename}`,\n              mimeType: attachment.attachment.mimetype,\n              blob: btoa(binary),\n            },\n          };\n          contentParts.push(resource);\n        }\n      }\n\n      let output = `# Event Attachment Download\\n\\n`;\n      output += `**Event ID:** ${params.eventId}\\n`;\n      output += `**Attachment ID:** ${params.attachmentId}\\n`;\n      output += `**Filename:** ${attachment.filename}\\n`;\n      output += `**Type:** ${attachment.attachment.type}\\n`;\n      output += `**Size:** ${attachment.attachment.size} bytes\\n`;\n      output += `**MIME Type:** ${attachment.attachment.mimetype}\\n`;\n      output += `**Created:** ${attachment.attachment.dateCreated}\\n`;\n      output += `**SHA1:** ${attachment.attachment.sha1}\\n\\n`;\n      output += `**Download URL:** ${attachment.downloadUrl}\\n\\n`;\n\n      if (isBinary) {\n        output += `## Binary Content\\n\\n`;\n        output += `The attachment is included as a resource and accessible through your client.\\n`;\n      } else {\n        // If it's a text file and we have blob content, decode and display it instead\n        // of embedding it as an image or resource\n        const textContent = await attachment.blob.text();\n        output += `## File Content\\n\\n`;\n        output += `\\`\\`\\`\\n${textContent}\\n\\`\\`\\`\\n\\n`;\n      }\n\n      const text: TextContent = {\n        type: \"text\",\n        text: output,\n      };\n      contentParts.push(text);\n\n      return contentParts;\n    }\n\n    // List all attachments for the event\n    const attachments = await apiService.listEventAttachments({\n      organizationSlug: params.organizationSlug,\n      projectSlug: params.projectSlug,\n      eventId: params.eventId,\n    });\n\n    let output = `# Event Attachments\\n\\n`;\n    output += `**Event ID:** ${params.eventId}\\n`;\n    output += `**Project:** ${params.projectSlug}\\n\\n`;\n\n    if (attachments.length === 0) {\n      output += \"No attachments found for this event.\\n\";\n      return output;\n    }\n\n    output += `Found ${attachments.length} attachment(s):\\n\\n`;\n\n    attachments.forEach((attachment, index) => {\n      output += `## Attachment ${index + 1}\\n\\n`;\n      output += `**ID:** ${attachment.id}\\n`;\n      output += `**Name:** ${attachment.name}\\n`;\n      output += `**Type:** ${attachment.type}\\n`;\n      output += `**Size:** ${attachment.size} bytes\\n`;\n      output += `**MIME Type:** ${attachment.mimetype}\\n`;\n      output += `**Created:** ${attachment.dateCreated}\\n`;\n      output += `**SHA1:** ${attachment.sha1}\\n\\n`;\n      output += `To download this attachment, use the \"get_event_attachment\" tool with the attachmentId provided:\\n`;\n      output += `\\`get_event_attachment(organizationSlug=\"${params.organizationSlug}\", projectSlug=\"${params.projectSlug}\", eventId=\"${params.eventId}\", attachmentId=\"${attachment.id}\")\\`\\n\\n`;\n    });\n\n    return output;\n  },\n});\n"],"mappings":";;;;;;AAkBA,mCAAe,WAAW;CACxB,MAAM;CACN,aAAa;EACX;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;CACD,EAAC,KAAK,KAAK;CACZ,aAAa;EACX,kBAAkB;EAClB,aAAa;EACb,SAAS;EACT,cAAc,kBAAkB,UAAU;EAC1C,WAAW,eAAe,UAAU;CACrC;CACD,MAAM,QAAQ,QAAQA,SAAwB;EAC5C,MAAM,aAAa,sBAAsB,SAAS,EAChD,WAAW,OAAO,UACnB,EAAC;AAEF,SAAO,qBAAqB,OAAO,iBAAiB;AAGpD,MAAI,OAAO,cAAc;GACvB,MAAM,aAAa,MAAM,WAAW,mBAAmB;IACrD,kBAAkB,OAAO;IACzB,aAAa,OAAO;IACpB,SAAS,OAAO;IAChB,cAAc,OAAO;GACtB,EAAC;GAEF,MAAMC,eACJ,CAAE;GACJ,MAAM,YAAY,WAAW,WAAW,UAAU,WAAW,QAAQ;AAErE,OAAI,UAAU;IACZ,MAAM,UAAU,WAAW,WAAW,UAAU,WAAW,SAAS;IAGpE,MAAM,aAAa,IAAI,WAAW,MAAM,WAAW,KAAK,aAAa;IACrE,IAAI,SAAS;AACb,SAAK,IAAI,IAAI,GAAG,IAAI,WAAW,YAAY,IACzC,WAAU,OAAO,aAAa,WAAW,GAAG;AAE9C,QAAI,SAAS;KACX,MAAMC,QAAsB;MAC1B,MAAM;MACN,UAAU,WAAW,WAAW;MAChC,MAAM,KAAK,OAAO;KACnB;AACD,kBAAa,KAAK,MAAM;IACzB,OAAM;KACL,MAAMC,WAA6B;MACjC,IAAI,OAAO;MACX,MAAM;MACN,UAAU;OACR,MAAM,SAAS,WAAW;OAC1B,UAAU,WAAW,WAAW;OAChC,MAAM,KAAK,OAAO;MACnB;KACF;AACD,kBAAa,KAAK,SAAS;IAC5B;GACF;GAED,IAAIC,YAAU;AACd,gBAAW,gBAAgB,OAAO,QAAQ;AAC1C,gBAAW,qBAAqB,OAAO,aAAa;AACpD,gBAAW,gBAAgB,WAAW,SAAS;AAC/C,gBAAW,YAAY,WAAW,WAAW,KAAK;AAClD,gBAAW,YAAY,WAAW,WAAW,KAAK;AAClD,gBAAW,iBAAiB,WAAW,WAAW,SAAS;AAC3D,gBAAW,eAAe,WAAW,WAAW,YAAY;AAC5D,gBAAW,YAAY,WAAW,WAAW,KAAK;AAClD,gBAAW,oBAAoB,WAAW,YAAY;AAEtD,OAAI,UAAU;AACZ,iBAAW;AACX,iBAAW;GACZ,OAAM;IAGL,MAAM,cAAc,MAAM,WAAW,KAAK,MAAM;AAChD,iBAAW;AACX,iBAAW,UAAU,YAAY;GAClC;GAED,MAAMC,OAAoB;IACxB,MAAM;IACN,MAAMD;GACP;AACD,gBAAa,KAAK,KAAK;AAEvB,UAAO;EACR;EAGD,MAAM,cAAc,MAAM,WAAW,qBAAqB;GACxD,kBAAkB,OAAO;GACzB,aAAa,OAAO;GACpB,SAAS,OAAO;EACjB,EAAC;EAEF,IAAI,UAAU;AACd,aAAW,gBAAgB,OAAO,QAAQ;AAC1C,aAAW,eAAe,OAAO,YAAY;AAE7C,MAAI,YAAY,WAAW,GAAG;AAC5B,aAAU;AACV,UAAO;EACR;AAED,aAAW,QAAQ,YAAY,OAAO;AAEtC,cAAY,QAAQ,CAAC,YAAY,UAAU;AACzC,cAAW,gBAAgB,QAAQ,EAAE;AACrC,cAAW,UAAU,WAAW,GAAG;AACnC,cAAW,YAAY,WAAW,KAAK;AACvC,cAAW,YAAY,WAAW,KAAK;AACvC,cAAW,YAAY,WAAW,KAAK;AACvC,cAAW,iBAAiB,WAAW,SAAS;AAChD,cAAW,eAAe,WAAW,YAAY;AACjD,cAAW,YAAY,WAAW,KAAK;AACvC,cAAW;AACX,cAAW,2CAA2C,OAAO,iBAAiB,kBAAkB,OAAO,YAAY,cAAc,OAAO,QAAQ,mBAAmB,WAAW,GAAG;EAClL,EAAC;AAEF,SAAO;CACR;AACF,EAAC"}