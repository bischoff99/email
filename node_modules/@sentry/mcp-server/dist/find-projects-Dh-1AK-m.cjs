const require_chunk = require('./chunk-DWy1uDak.cjs');
const require_errors = require('./errors-BtJEw2Z-.cjs');
const require_defineTool = require('./defineTool-lWNTzWl_.cjs');
const require_api_utils = require('./api-utils-DFWUfQ83.cjs');
const require_schema = require('./schema-BL3kwfOA.cjs');
const __sentry_core = require_chunk.__toESM(require("@sentry/core"));

//#region src/tools/find-projects.ts
var find_projects_default = require_defineTool.defineTool({
	name: "find_projects",
	description: [
		"Find projects in Sentry.",
		"",
		"Use this tool when you need to:",
		"- View all projects in a Sentry organization",
		"- Find a project's slug to aid other tool requests"
	].join("\n"),
	inputSchema: {
		organizationSlug: require_schema.ParamOrganizationSlug,
		regionUrl: require_schema.ParamRegionUrl.optional()
	},
	async handler(params, context) {
		const apiService = require_api_utils.apiServiceFromContext(context, { regionUrl: params.regionUrl });
		const organizationSlug = params.organizationSlug;
		if (!organizationSlug) throw new require_errors.UserInputError("Organization slug is required. Please provide an organizationSlug parameter.");
		(0, __sentry_core.setTag)("organization.slug", organizationSlug);
		const projects = await apiService.listProjects(organizationSlug);
		let output = `# Projects in **${organizationSlug}**\n\n`;
		if (projects.length === 0) {
			output += "No projects found.\n";
			return output;
		}
		output += projects.map((project) => `- **${project.slug}**\n`).join("");
		return output;
	}
});

//#endregion
Object.defineProperty(exports, 'find_projects_default', {
  enumerable: true,
  get: function () {
    return find_projects_default;
  }
});
//# sourceMappingURL=find-projects-Dh-1AK-m.cjs.map