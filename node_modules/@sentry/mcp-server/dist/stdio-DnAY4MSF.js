import { LIB_VERSION } from "./version-DvjTvYJs.js";
import { configureServer } from "./server-CnJvaT0s.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import * as Sentry from "@sentry/node";

//#region src/transports/stdio.ts
/**
* Starts the MCP server with stdio transport and telemetry.
*
* Configures the server with all tools, prompts, and resources, then connects
* using stdio transport for process-based communication. All operations are
* wrapped in Sentry tracing for observability.
*
* @param server - MCP server instance to configure and start
* @param context - Server context with authentication and configuration
*
* @example CLI Integration
* ```typescript
* // In a CLI tool or IDE extension:
* const server = new McpServer();
* await startStdio(server, {
*   accessToken: userToken,
*   host: userHost,
*   userId: "user-123",
*   clientId: "cursor-ide"
* });
* ```
*/
async function startStdio(server, context) {
	await Sentry.startNewTrace(async () => {
		return await Sentry.startSpan({
			name: "mcp.server/stdio",
			attributes: {
				"mcp.transport": "stdio",
				"network.transport": "pipe",
				"service.version": LIB_VERSION
			}
		}, async () => {
			const transport = new StdioServerTransport();
			await configureServer({
				server,
				context
			});
			await server.connect(transport);
		});
	});
}

//#endregion
export { startStdio };
//# sourceMappingURL=stdio-DnAY4MSF.js.map