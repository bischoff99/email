//#region src/internal/issue-helpers.d.ts
/**
 * Issue parameter parsing and validation utilities.
 *
 * Handles flexible input formats for Sentry issues (URLs vs explicit parameters),
 * extracts organization and issue identifiers, and validates issue ID formats.
 * Provides robust parsing for LLM-generated parameters that may contain formatting
 * inconsistencies.
 */
/**
 * Extracts the Sentry issue ID and organization slug from a full URL
 *
 * @param url - A full Sentry issue URL
 * @returns Object containing the numeric issue ID and organization slug (if found)
 * @throws Error if the input is invalid
 */
declare function extractIssueId(url: string): {
  issueId: string;
  organizationSlug: string;
};
/**
 * Sometimes the LLM will pass in a funky issue shortId. For example it might pass
 * in "CLOUDFLARE-MCP-41." instead of "CLOUDFLARE-MCP-41". This function attempts to
 * fix common issues.
 *
 * @param issueId - The issue ID to parse
 * @returns The parsed issue ID
 */
declare function parseIssueId(issueId: string): string;
/**
 * Parses issue parameters from a variety of formats.
 *
 * @param params - Object containing issue URL, issue ID, and organization slug
 * @returns Object containing the parsed organization slug and issue ID
 * @throws Error if the input is invalid
 */
declare function parseIssueParams({
  issueUrl,
  issueId,
  organizationSlug
}: {
  issueUrl?: string | null;
  issueId?: string | null;
  organizationSlug?: string | null;
}): {
  organizationSlug: string;
  issueId: string;
};
//# sourceMappingURL=issue-helpers.d.ts.map
//#endregion
export { extractIssueId, parseIssueId, parseIssueParams };
//# sourceMappingURL=issue-helpers-D1_Uqr-F.d.ts.map