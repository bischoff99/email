{"version":3,"file":"update-project-DQu5PnE3.cjs","names":["ParamOrganizationSlug","ParamProjectSlug","context: ServerContext","project: Project | undefined","UserInputError","updates: string[]"],"sources":["../src/tools/update-project.ts"],"sourcesContent":["import { z } from \"zod\";\nimport { setTag } from \"@sentry/core\";\nimport { defineTool } from \"./utils/defineTool\";\nimport { apiServiceFromContext } from \"./utils/api-utils\";\nimport { logError } from \"../logging\";\nimport { UserInputError } from \"../errors\";\nimport type { ServerContext } from \"../types\";\nimport type { Project } from \"../api-client/index\";\nimport {\n  ParamOrganizationSlug,\n  ParamRegionUrl,\n  ParamProjectSlug,\n  ParamPlatform,\n  ParamTeamSlug,\n} from \"../schema\";\n\nexport default defineTool({\n  name: \"update_project\",\n  description: [\n    \"Update project settings in Sentry, such as name, slug, platform, and team assignment.\",\n    \"\",\n    \"Be careful when using this tool!\",\n    \"\",\n    \"Use this tool when you need to:\",\n    \"- Update a project's name or slug to fix onboarding mistakes\",\n    \"- Change the platform assigned to a project\",\n    \"- Update team assignment for a project\",\n    \"\",\n    \"<examples>\",\n    \"### Update a project's name and slug\",\n    \"\",\n    \"```\",\n    \"update_project(organizationSlug='my-organization', projectSlug='old-project', name='New Project Name', slug='new-project-slug')\",\n    \"```\",\n    \"\",\n    \"### Assign a project to a different team\",\n    \"\",\n    \"```\",\n    \"update_project(organizationSlug='my-organization', projectSlug='my-project', teamSlug='backend-team')\",\n    \"```\",\n    \"\",\n    \"### Update platform\",\n    \"\",\n    \"```\",\n    \"update_project(organizationSlug='my-organization', projectSlug='my-project', platform='python')\",\n    \"```\",\n    \"\",\n    \"</examples>\",\n    \"\",\n    \"<hints>\",\n    \"- If the user passes a parameter in the form of name/otherName, it's likely in the format of <organizationSlug>/<projectSlug>.\",\n    \"- Team assignment is handled separately from other project settings\",\n    \"- If any parameter is ambiguous, you should clarify with the user what they meant.\",\n    \"- When updating the slug, the project will be accessible at the new slug after the update\",\n    \"</hints>\",\n  ].join(\"\\n\"),\n  inputSchema: {\n    organizationSlug: ParamOrganizationSlug,\n    regionUrl: ParamRegionUrl.optional(),\n    projectSlug: ParamProjectSlug,\n    name: z.string().trim().describe(\"The new name for the project\").optional(),\n    slug: z\n      .string()\n      .toLowerCase()\n      .trim()\n      .describe(\"The new slug for the project (must be unique)\")\n      .optional(),\n    platform: ParamPlatform.optional(),\n    teamSlug: ParamTeamSlug.optional().describe(\n      \"The team to assign this project to. Note: this will replace the current team assignment.\",\n    ),\n  },\n  async handler(params, context: ServerContext) {\n    const apiService = apiServiceFromContext(context, {\n      regionUrl: params.regionUrl,\n    });\n    const organizationSlug = params.organizationSlug;\n\n    setTag(\"organization.slug\", organizationSlug);\n    setTag(\"project.slug\", params.projectSlug);\n\n    // Handle team assignment separately if provided\n    if (params.teamSlug) {\n      setTag(\"team.slug\", params.teamSlug);\n      try {\n        await apiService.addTeamToProject({\n          organizationSlug,\n          projectSlug: params.projectSlug,\n          teamSlug: params.teamSlug,\n        });\n      } catch (err) {\n        logError(err);\n        throw new Error(\n          `Failed to assign team ${params.teamSlug} to project ${params.projectSlug}: ${err instanceof Error ? err.message : \"Unknown error\"}`,\n        );\n      }\n    }\n\n    // Update project settings if any are provided\n    const hasProjectUpdates = params.name || params.slug || params.platform;\n\n    let project: Project | undefined;\n    if (hasProjectUpdates) {\n      try {\n        project = await apiService.updateProject({\n          organizationSlug,\n          projectSlug: params.projectSlug,\n          name: params.name,\n          slug: params.slug,\n          platform: params.platform,\n        });\n      } catch (err) {\n        logError(err);\n        throw new Error(\n          `Failed to update project ${params.projectSlug}: ${err instanceof Error ? err.message : \"Unknown error\"}`,\n        );\n      }\n    } else {\n      // If only team assignment, fetch current project data for display\n      const projects = await apiService.listProjects(organizationSlug);\n      project = projects.find((p) => p.slug === params.projectSlug);\n      if (!project) {\n        throw new UserInputError(`Project ${params.projectSlug} not found`);\n      }\n    }\n\n    let output = `# Updated Project in **${organizationSlug}**\\n\\n`;\n    output += `**ID**: ${project.id}\\n`;\n    output += `**Slug**: ${project.slug}\\n`;\n    output += `**Name**: ${project.name}\\n`;\n    if (project.platform) {\n      output += `**Platform**: ${project.platform}\\n`;\n    }\n\n    // Display what was updated\n    const updates: string[] = [];\n    if (params.name) updates.push(`name to \"${params.name}\"`);\n    if (params.slug) updates.push(`slug to \"${params.slug}\"`);\n    if (params.platform) updates.push(`platform to \"${params.platform}\"`);\n    if (params.teamSlug)\n      updates.push(`team assignment to \"${params.teamSlug}\"`);\n\n    if (updates.length > 0) {\n      output += `\\n## Updates Applied\\n`;\n      output += updates.map((update) => `- Updated ${update}`).join(\"\\n\");\n      output += `\\n`;\n    }\n\n    output += \"\\n# Using this information\\n\\n\";\n    output += `- The project is now accessible at slug: \\`${project.slug}\\`\\n`;\n    if (params.teamSlug) {\n      output += `- The project is now assigned to the \\`${params.teamSlug}\\` team\\n`;\n    }\n    return output;\n  },\n});\n"],"mappings":";;;;;;;;;;AAgBA,6BAAe,8BAAW;CACxB,MAAM;CACN,aAAa;EACX;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;CACD,EAAC,KAAK,KAAK;CACZ,aAAa;EACX,kBAAkBA;EAClB,WAAW,8BAAe,UAAU;EACpC,aAAaC;EACb,MAAM,MAAE,QAAQ,CAAC,MAAM,CAAC,SAAS,+BAA+B,CAAC,UAAU;EAC3E,MAAM,MACH,QAAQ,CACR,aAAa,CACb,MAAM,CACN,SAAS,gDAAgD,CACzD,UAAU;EACb,UAAU,6BAAc,UAAU;EAClC,UAAU,6BAAc,UAAU,CAAC,SACjC,2FACD;CACF;CACD,MAAM,QAAQ,QAAQC,SAAwB;EAC5C,MAAM,aAAa,wCAAsB,SAAS,EAChD,WAAW,OAAO,UACnB,EAAC;EACF,MAAM,mBAAmB,OAAO;AAEhC,4BAAO,qBAAqB,iBAAiB;AAC7C,4BAAO,gBAAgB,OAAO,YAAY;AAG1C,MAAI,OAAO,UAAU;AACnB,6BAAO,aAAa,OAAO,SAAS;AACpC,OAAI;AACF,UAAM,WAAW,iBAAiB;KAChC;KACA,aAAa,OAAO;KACpB,UAAU,OAAO;IAClB,EAAC;GACH,SAAQ,KAAK;AACZ,6BAAS,IAAI;AACb,UAAM,IAAI,OACP,wBAAwB,OAAO,SAAS,cAAc,OAAO,YAAY,IAAI,eAAe,QAAQ,IAAI,UAAU;GAEtH;EACF;EAGD,MAAM,oBAAoB,OAAO,QAAQ,OAAO,QAAQ,OAAO;EAE/D,IAAIC;AACJ,MAAI,kBACF,KAAI;AACF,aAAU,MAAM,WAAW,cAAc;IACvC;IACA,aAAa,OAAO;IACpB,MAAM,OAAO;IACb,MAAM,OAAO;IACb,UAAU,OAAO;GAClB,EAAC;EACH,SAAQ,KAAK;AACZ,4BAAS,IAAI;AACb,SAAM,IAAI,OACP,2BAA2B,OAAO,YAAY,IAAI,eAAe,QAAQ,IAAI,UAAU;EAE3F;OACI;GAEL,MAAM,WAAW,MAAM,WAAW,aAAa,iBAAiB;AAChE,aAAU,SAAS,KAAK,CAAC,MAAM,EAAE,SAAS,OAAO,YAAY;AAC7D,QAAK,QACH,OAAM,IAAIC,+BAAgB,UAAU,OAAO,YAAY;EAE1D;EAED,IAAI,UAAU,yBAAyB,iBAAiB;AACxD,aAAW,UAAU,QAAQ,GAAG;AAChC,aAAW,YAAY,QAAQ,KAAK;AACpC,aAAW,YAAY,QAAQ,KAAK;AACpC,MAAI,QAAQ,SACV,YAAW,gBAAgB,QAAQ,SAAS;EAI9C,MAAMC,UAAoB,CAAE;AAC5B,MAAI,OAAO,KAAM,SAAQ,MAAM,WAAW,OAAO,KAAK,GAAG;AACzD,MAAI,OAAO,KAAM,SAAQ,MAAM,WAAW,OAAO,KAAK,GAAG;AACzD,MAAI,OAAO,SAAU,SAAQ,MAAM,eAAe,OAAO,SAAS,GAAG;AACrE,MAAI,OAAO,SACT,SAAQ,MAAM,sBAAsB,OAAO,SAAS,GAAG;AAEzD,MAAI,QAAQ,SAAS,GAAG;AACtB,cAAW;AACX,aAAU,QAAQ,IAAI,CAAC,YAAY,YAAY,SAAS,CAAC,KAAK,KAAK;AACnE,cAAW;EACZ;AAED,YAAU;AACV,aAAW,6CAA6C,QAAQ,KAAK;AACrE,MAAI,OAAO,SACT,YAAW,yCAAyC,OAAO,SAAS;AAEtE,SAAO;CACR;AACF,EAAC"}