const require_chunk = require('./chunk-DWy1uDak.cjs');
const zod = require_chunk.__toESM(require("zod"));

//#region src/api-client/schema.ts
/**
* Schema for Sentry API error responses.
*
* Uses .passthrough() to allow additional fields that may be present
* in different error scenarios.
*/
const ApiErrorSchema = zod.z.object({ detail: zod.z.string() }).passthrough();
const UserSchema = zod.z.object({
	id: zod.z.union([zod.z.string(), zod.z.number()]),
	name: zod.z.string().nullable(),
	email: zod.z.string()
});
const UserRegionsSchema = zod.z.object({ regions: zod.z.array(zod.z.object({
	name: zod.z.string(),
	url: zod.z.string().url()
})) });
/**
* Schema for Sentry organization API responses.
*
* Handles organizations from both Sentry's Cloud Service and self-hosted installations.
* The links object and regionUrl field are optional to support self-hosted Sentry
* instances that may not include these fields or return empty values.
*/
const OrganizationSchema = zod.z.object({
	id: zod.z.union([zod.z.string(), zod.z.number()]),
	slug: zod.z.string(),
	name: zod.z.string(),
	links: zod.z.object({
		regionUrl: zod.z.string().refine((value) => !value || zod.z.string().url().safeParse(value).success, { message: "Must be a valid URL or empty string (for self-hosted Sentry)" }).optional(),
		organizationUrl: zod.z.string().url()
	}).optional()
});
const OrganizationListSchema = zod.z.array(OrganizationSchema);
const TeamSchema = zod.z.object({
	id: zod.z.union([zod.z.string(), zod.z.number()]),
	slug: zod.z.string(),
	name: zod.z.string()
});
const TeamListSchema = zod.z.array(TeamSchema);
const ProjectSchema = zod.z.object({
	id: zod.z.union([zod.z.string(), zod.z.number()]),
	slug: zod.z.string(),
	name: zod.z.string(),
	platform: zod.z.string().nullable().optional()
});
const ProjectListSchema = zod.z.array(ProjectSchema);
const ClientKeySchema = zod.z.object({
	id: zod.z.union([zod.z.string(), zod.z.number()]),
	name: zod.z.string(),
	dsn: zod.z.object({ public: zod.z.string() }),
	isActive: zod.z.boolean(),
	dateCreated: zod.z.string().datetime()
});
const ClientKeyListSchema = zod.z.array(ClientKeySchema);
const ReleaseSchema = zod.z.object({
	id: zod.z.union([zod.z.string(), zod.z.number()]),
	version: zod.z.string(),
	shortVersion: zod.z.string(),
	dateCreated: zod.z.string().datetime(),
	dateReleased: zod.z.string().datetime().nullable(),
	firstEvent: zod.z.string().datetime().nullable(),
	lastEvent: zod.z.string().datetime().nullable(),
	newGroups: zod.z.number(),
	lastCommit: zod.z.object({
		id: zod.z.union([zod.z.string(), zod.z.number()]),
		message: zod.z.string(),
		dateCreated: zod.z.string().datetime(),
		author: zod.z.object({
			name: zod.z.string(),
			email: zod.z.string()
		})
	}).nullable(),
	lastDeploy: zod.z.object({
		id: zod.z.union([zod.z.string(), zod.z.number()]),
		environment: zod.z.string(),
		dateStarted: zod.z.string().datetime().nullable(),
		dateFinished: zod.z.string().datetime().nullable()
	}).nullable(),
	projects: zod.z.array(ProjectSchema)
});
const ReleaseListSchema = zod.z.array(ReleaseSchema);
const TagSchema = zod.z.object({
	key: zod.z.string(),
	name: zod.z.string(),
	totalValues: zod.z.number()
});
const TagListSchema = zod.z.array(TagSchema);
const AssignedToSchema = zod.z.union([
	zod.z.null(),
	zod.z.string(),
	zod.z.object({
		type: zod.z.enum(["user", "team"]),
		id: zod.z.union([zod.z.string(), zod.z.number()]),
		name: zod.z.string(),
		email: zod.z.string().optional()
	}).passthrough()
]);
const IssueSchema = zod.z.object({
	id: zod.z.union([zod.z.string(), zod.z.number()]),
	shortId: zod.z.string(),
	title: zod.z.string(),
	firstSeen: zod.z.string().datetime(),
	lastSeen: zod.z.string().datetime(),
	count: zod.z.union([zod.z.string(), zod.z.number()]),
	userCount: zod.z.union([zod.z.string(), zod.z.number()]),
	permalink: zod.z.string().url(),
	project: ProjectSchema,
	platform: zod.z.string().nullable().optional(),
	status: zod.z.string(),
	culprit: zod.z.string(),
	type: zod.z.union([
		zod.z.literal("error"),
		zod.z.literal("transaction"),
		zod.z.unknown()
	]),
	assignedTo: AssignedToSchema.optional()
});
const IssueListSchema = zod.z.array(IssueSchema);
const FrameInterface = zod.z.object({
	filename: zod.z.string().nullable(),
	function: zod.z.string().nullable(),
	lineNo: zod.z.number().nullable(),
	colNo: zod.z.number().nullable(),
	absPath: zod.z.string().nullable(),
	module: zod.z.string().nullable(),
	context: zod.z.array(zod.z.tuple([zod.z.number(), zod.z.string()])),
	inApp: zod.z.boolean().optional(),
	vars: zod.z.record(zod.z.string(), zod.z.unknown()).optional()
}).partial();
const ExceptionInterface = zod.z.object({
	mechanism: zod.z.object({
		type: zod.z.string().nullable(),
		handled: zod.z.boolean().nullable()
	}).partial(),
	type: zod.z.string().nullable(),
	value: zod.z.string().nullable(),
	stacktrace: zod.z.object({ frames: zod.z.array(FrameInterface) })
}).partial();
const ErrorEntrySchema = zod.z.object({
	values: zod.z.array(ExceptionInterface.optional()),
	value: ExceptionInterface.nullable().optional()
}).partial();
const RequestEntrySchema = zod.z.object({
	method: zod.z.string().nullable(),
	url: zod.z.string().url().nullable()
}).partial();
const MessageEntrySchema = zod.z.object({
	formatted: zod.z.string().nullable(),
	message: zod.z.string().nullable(),
	params: zod.z.array(zod.z.unknown()).optional()
}).partial();
const ThreadEntrySchema = zod.z.object({
	id: zod.z.number().nullable(),
	name: zod.z.string().nullable(),
	current: zod.z.boolean().nullable(),
	crashed: zod.z.boolean().nullable(),
	state: zod.z.string().nullable(),
	stacktrace: zod.z.object({ frames: zod.z.array(FrameInterface) }).nullable()
}).partial();
const ThreadsEntrySchema = zod.z.object({ values: zod.z.array(ThreadEntrySchema) }).partial();
const BreadcrumbSchema = zod.z.object({
	timestamp: zod.z.string().nullable(),
	type: zod.z.string().nullable(),
	category: zod.z.string().nullable(),
	level: zod.z.string().nullable(),
	message: zod.z.string().nullable(),
	data: zod.z.record(zod.z.unknown()).nullable()
}).partial();
const BreadcrumbsEntrySchema = zod.z.object({ values: zod.z.array(BreadcrumbSchema) }).partial();
const BaseEventSchema = zod.z.object({
	id: zod.z.string(),
	title: zod.z.string(),
	message: zod.z.string().nullable(),
	platform: zod.z.string().nullable().optional(),
	type: zod.z.unknown(),
	entries: zod.z.array(zod.z.union([
		zod.z.object({
			type: zod.z.literal("exception"),
			data: ErrorEntrySchema
		}),
		zod.z.object({
			type: zod.z.literal("message"),
			data: MessageEntrySchema
		}),
		zod.z.object({
			type: zod.z.literal("threads"),
			data: ThreadsEntrySchema
		}),
		zod.z.object({
			type: zod.z.literal("request"),
			data: RequestEntrySchema
		}),
		zod.z.object({
			type: zod.z.literal("breadcrumbs"),
			data: BreadcrumbsEntrySchema
		}),
		zod.z.object({
			type: zod.z.literal("spans"),
			data: zod.z.unknown()
		}),
		zod.z.object({
			type: zod.z.string(),
			data: zod.z.unknown()
		})
	])),
	contexts: zod.z.record(zod.z.string(), zod.z.object({ type: zod.z.union([
		zod.z.literal("default"),
		zod.z.literal("runtime"),
		zod.z.literal("os"),
		zod.z.literal("trace"),
		zod.z.unknown()
	]) }).passthrough()).optional()
});
const ErrorEventSchema = BaseEventSchema.omit({ type: true }).extend({
	type: zod.z.literal("error"),
	culprit: zod.z.string().nullable(),
	dateCreated: zod.z.string().datetime()
});
const TransactionEventSchema = BaseEventSchema.omit({ type: true }).extend({
	type: zod.z.literal("transaction"),
	occurrence: zod.z.object({
		issueTitle: zod.z.string(),
		culprit: zod.z.string().nullable()
	})
});
const UnknownEventSchema = BaseEventSchema.omit({ type: true }).extend({ type: zod.z.unknown() });
const EventSchema = zod.z.union([
	ErrorEventSchema,
	TransactionEventSchema,
	UnknownEventSchema
]);
const EventsResponseSchema = zod.z.object({
	data: zod.z.array(zod.z.unknown()),
	meta: zod.z.object({ fields: zod.z.record(zod.z.string(), zod.z.string()) }).passthrough()
});
const ErrorsSearchResponseSchema = EventsResponseSchema.extend({ data: zod.z.array(zod.z.object({
	issue: zod.z.string(),
	"issue.id": zod.z.union([zod.z.string(), zod.z.number()]),
	project: zod.z.string(),
	title: zod.z.string(),
	"count()": zod.z.number(),
	"last_seen()": zod.z.string()
})) });
const SpansSearchResponseSchema = EventsResponseSchema.extend({ data: zod.z.array(zod.z.object({
	id: zod.z.string(),
	trace: zod.z.string(),
	"span.op": zod.z.string(),
	"span.description": zod.z.string(),
	"span.duration": zod.z.number(),
	transaction: zod.z.string(),
	project: zod.z.string(),
	timestamp: zod.z.string()
})) });
const AutofixRunSchema = zod.z.object({ run_id: zod.z.union([zod.z.string(), zod.z.number()]) }).passthrough();
const AutofixStatusSchema = zod.z.enum([
	"PENDING",
	"PROCESSING",
	"IN_PROGRESS",
	"NEED_MORE_INFORMATION",
	"COMPLETED",
	"FAILED",
	"ERROR",
	"CANCELLED",
	"WAITING_FOR_USER_RESPONSE"
]);
const AutofixRunStepBaseSchema = zod.z.object({
	type: zod.z.string(),
	key: zod.z.string(),
	index: zod.z.number(),
	status: AutofixStatusSchema,
	title: zod.z.string(),
	output_stream: zod.z.string().nullable(),
	progress: zod.z.array(zod.z.object({
		data: zod.z.unknown().nullable(),
		message: zod.z.string(),
		timestamp: zod.z.string(),
		type: zod.z.enum([
			"INFO",
			"WARNING",
			"ERROR"
		])
	}))
});
const AutofixRunStepDefaultSchema = AutofixRunStepBaseSchema.extend({
	type: zod.z.literal("default"),
	insights: zod.z.array(zod.z.object({
		change_diff: zod.z.unknown().nullable(),
		generated_at_memory_index: zod.z.number(),
		insight: zod.z.string(),
		justification: zod.z.string(),
		type: zod.z.literal("insight")
	})).nullable()
}).passthrough();
const AutofixRunStepRootCauseAnalysisSchema = AutofixRunStepBaseSchema.extend({
	type: zod.z.literal("root_cause_analysis"),
	causes: zod.z.array(zod.z.object({
		description: zod.z.string(),
		id: zod.z.number(),
		root_cause_reproduction: zod.z.array(zod.z.object({
			code_snippet_and_analysis: zod.z.string(),
			is_most_important_event: zod.z.boolean(),
			relevant_code_file: zod.z.object({
				file_path: zod.z.string(),
				repo_name: zod.z.string()
			}).nullable(),
			timeline_item_type: zod.z.string(),
			title: zod.z.string()
		}))
	}))
}).passthrough();
const AutofixRunStepSolutionSchema = AutofixRunStepBaseSchema.extend({
	type: zod.z.literal("solution"),
	solution: zod.z.array(zod.z.object({
		code_snippet_and_analysis: zod.z.string().nullable(),
		is_active: zod.z.boolean(),
		is_most_important_event: zod.z.boolean(),
		relevant_code_file: zod.z.null(),
		timeline_item_type: zod.z.union([zod.z.literal("internal_code"), zod.z.literal("repro_test")]),
		title: zod.z.string()
	}))
}).passthrough();
const AutofixRunStepSchema = zod.z.union([
	AutofixRunStepDefaultSchema,
	AutofixRunStepRootCauseAnalysisSchema,
	AutofixRunStepSolutionSchema,
	AutofixRunStepBaseSchema.passthrough()
]);
const AutofixRunStateSchema = zod.z.object({ autofix: zod.z.object({
	run_id: zod.z.number(),
	request: zod.z.unknown(),
	updated_at: zod.z.string(),
	status: AutofixStatusSchema,
	steps: zod.z.array(AutofixRunStepSchema)
}).passthrough().nullable() });
const EventAttachmentSchema = zod.z.object({
	id: zod.z.string(),
	name: zod.z.string(),
	type: zod.z.string(),
	size: zod.z.number(),
	mimetype: zod.z.string(),
	dateCreated: zod.z.string().datetime(),
	sha1: zod.z.string(),
	headers: zod.z.record(zod.z.string(), zod.z.string()).optional()
});
const EventAttachmentListSchema = zod.z.array(EventAttachmentSchema);

//#endregion
Object.defineProperty(exports, 'ApiErrorSchema', {
  enumerable: true,
  get: function () {
    return ApiErrorSchema;
  }
});
Object.defineProperty(exports, 'AssignedToSchema', {
  enumerable: true,
  get: function () {
    return AssignedToSchema;
  }
});
Object.defineProperty(exports, 'AutofixRunSchema', {
  enumerable: true,
  get: function () {
    return AutofixRunSchema;
  }
});
Object.defineProperty(exports, 'AutofixRunStateSchema', {
  enumerable: true,
  get: function () {
    return AutofixRunStateSchema;
  }
});
Object.defineProperty(exports, 'AutofixRunStepDefaultSchema', {
  enumerable: true,
  get: function () {
    return AutofixRunStepDefaultSchema;
  }
});
Object.defineProperty(exports, 'AutofixRunStepRootCauseAnalysisSchema', {
  enumerable: true,
  get: function () {
    return AutofixRunStepRootCauseAnalysisSchema;
  }
});
Object.defineProperty(exports, 'AutofixRunStepSchema', {
  enumerable: true,
  get: function () {
    return AutofixRunStepSchema;
  }
});
Object.defineProperty(exports, 'AutofixRunStepSolutionSchema', {
  enumerable: true,
  get: function () {
    return AutofixRunStepSolutionSchema;
  }
});
Object.defineProperty(exports, 'BreadcrumbSchema', {
  enumerable: true,
  get: function () {
    return BreadcrumbSchema;
  }
});
Object.defineProperty(exports, 'BreadcrumbsEntrySchema', {
  enumerable: true,
  get: function () {
    return BreadcrumbsEntrySchema;
  }
});
Object.defineProperty(exports, 'ClientKeyListSchema', {
  enumerable: true,
  get: function () {
    return ClientKeyListSchema;
  }
});
Object.defineProperty(exports, 'ClientKeySchema', {
  enumerable: true,
  get: function () {
    return ClientKeySchema;
  }
});
Object.defineProperty(exports, 'ErrorEntrySchema', {
  enumerable: true,
  get: function () {
    return ErrorEntrySchema;
  }
});
Object.defineProperty(exports, 'ErrorEventSchema', {
  enumerable: true,
  get: function () {
    return ErrorEventSchema;
  }
});
Object.defineProperty(exports, 'ErrorsSearchResponseSchema', {
  enumerable: true,
  get: function () {
    return ErrorsSearchResponseSchema;
  }
});
Object.defineProperty(exports, 'EventAttachmentListSchema', {
  enumerable: true,
  get: function () {
    return EventAttachmentListSchema;
  }
});
Object.defineProperty(exports, 'EventAttachmentSchema', {
  enumerable: true,
  get: function () {
    return EventAttachmentSchema;
  }
});
Object.defineProperty(exports, 'EventSchema', {
  enumerable: true,
  get: function () {
    return EventSchema;
  }
});
Object.defineProperty(exports, 'EventsResponseSchema', {
  enumerable: true,
  get: function () {
    return EventsResponseSchema;
  }
});
Object.defineProperty(exports, 'ExceptionInterface', {
  enumerable: true,
  get: function () {
    return ExceptionInterface;
  }
});
Object.defineProperty(exports, 'FrameInterface', {
  enumerable: true,
  get: function () {
    return FrameInterface;
  }
});
Object.defineProperty(exports, 'IssueListSchema', {
  enumerable: true,
  get: function () {
    return IssueListSchema;
  }
});
Object.defineProperty(exports, 'IssueSchema', {
  enumerable: true,
  get: function () {
    return IssueSchema;
  }
});
Object.defineProperty(exports, 'MessageEntrySchema', {
  enumerable: true,
  get: function () {
    return MessageEntrySchema;
  }
});
Object.defineProperty(exports, 'OrganizationListSchema', {
  enumerable: true,
  get: function () {
    return OrganizationListSchema;
  }
});
Object.defineProperty(exports, 'OrganizationSchema', {
  enumerable: true,
  get: function () {
    return OrganizationSchema;
  }
});
Object.defineProperty(exports, 'ProjectListSchema', {
  enumerable: true,
  get: function () {
    return ProjectListSchema;
  }
});
Object.defineProperty(exports, 'ProjectSchema', {
  enumerable: true,
  get: function () {
    return ProjectSchema;
  }
});
Object.defineProperty(exports, 'ReleaseListSchema', {
  enumerable: true,
  get: function () {
    return ReleaseListSchema;
  }
});
Object.defineProperty(exports, 'ReleaseSchema', {
  enumerable: true,
  get: function () {
    return ReleaseSchema;
  }
});
Object.defineProperty(exports, 'RequestEntrySchema', {
  enumerable: true,
  get: function () {
    return RequestEntrySchema;
  }
});
Object.defineProperty(exports, 'SpansSearchResponseSchema', {
  enumerable: true,
  get: function () {
    return SpansSearchResponseSchema;
  }
});
Object.defineProperty(exports, 'TagListSchema', {
  enumerable: true,
  get: function () {
    return TagListSchema;
  }
});
Object.defineProperty(exports, 'TagSchema', {
  enumerable: true,
  get: function () {
    return TagSchema;
  }
});
Object.defineProperty(exports, 'TeamListSchema', {
  enumerable: true,
  get: function () {
    return TeamListSchema;
  }
});
Object.defineProperty(exports, 'TeamSchema', {
  enumerable: true,
  get: function () {
    return TeamSchema;
  }
});
Object.defineProperty(exports, 'ThreadEntrySchema', {
  enumerable: true,
  get: function () {
    return ThreadEntrySchema;
  }
});
Object.defineProperty(exports, 'ThreadsEntrySchema', {
  enumerable: true,
  get: function () {
    return ThreadsEntrySchema;
  }
});
Object.defineProperty(exports, 'TransactionEventSchema', {
  enumerable: true,
  get: function () {
    return TransactionEventSchema;
  }
});
Object.defineProperty(exports, 'UnknownEventSchema', {
  enumerable: true,
  get: function () {
    return UnknownEventSchema;
  }
});
Object.defineProperty(exports, 'UserRegionsSchema', {
  enumerable: true,
  get: function () {
    return UserRegionsSchema;
  }
});
Object.defineProperty(exports, 'UserSchema', {
  enumerable: true,
  get: function () {
    return UserSchema;
  }
});
//# sourceMappingURL=schema-C0LznFvu.cjs.map