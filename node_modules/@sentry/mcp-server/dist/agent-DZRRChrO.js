import { ConfigurationError, UserInputError } from "./errors-D_R568zP.js";
import { createWhoamiTool } from "./whoami-xBAWvzG4.js";
import { createDatasetFieldsTool } from "./discover-dataset-fields-BEnyqPSq.js";
import { systemPrompt } from "./config-BUmDxVLS.js";
import { z } from "zod";
import { Output, generateText } from "ai";
import { openai } from "@ai-sdk/openai";

//#region src/tools/search-issues/agent.ts
const IssueQuerySchema = z.object({
	query: z.string().describe("The Sentry issue search query"),
	sort: z.enum([
		"date",
		"freq",
		"new",
		"user"
	]).nullable().describe("How to sort the results (null if no specific sort is needed)"),
	explanation: z.string().nullable().describe("Brief explanation of the translation (null if not needed)")
});
/**
* Translate natural language query to Sentry issue search syntax
*/
async function translateQuery(params, apiService) {
	if (!process.env.OPENAI_API_KEY) throw new ConfigurationError("OpenAI API key not configured. Set OPENAI_API_KEY environment variable.");
	const tools = {
		issueFields: createDatasetFieldsTool(apiService, params.organizationSlug, "search_issues", params.projectId),
		whoami: createWhoamiTool(apiService)
	};
	try {
		const result = await generateText({
			model: openai("gpt-4o", { structuredOutputs: true }),
			system: systemPrompt,
			prompt: params.naturalLanguageQuery,
			tools,
			maxSteps: 3,
			experimental_output: Output.object({ schema: IssueQuerySchema }),
			experimental_telemetry: {
				isEnabled: true,
				functionId: "search_issues_agent"
			}
		});
		const query = result.experimental_output;
		if (!query) throw new Error("Failed to generate query");
		return query;
	} catch (error) {
		if (error instanceof UserInputError || error instanceof ConfigurationError) throw error;
		throw new Error(`Failed to translate query: ${error instanceof Error ? error.message : "Unknown error"}`, { cause: error });
	}
}

//#endregion
export { translateQuery };
//# sourceMappingURL=agent-DZRRChrO.js.map