/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
import { Defuddle } from "defuddle/node";
import { READABILITY_SCRIPT } from "./readability-script.mjs";
import { toMarkdown } from "./to-markdown.mjs";
const extractWithReadability = async (page, options = {})=>{
    const extractionResult = await page.evaluate((readabilityScript)=>{
        const Readability = new Function('module', `${readabilityScript}\nreturn module.exports`)({});
        const documentClone = document.cloneNode(true);
        documentClone.querySelectorAll("script,noscript,style,link,svg,img,video,iframe,canvas,.reflist").forEach((el)=>el.remove());
        const article = new Readability(documentClone).parse();
        const content = (null == article ? void 0 : article.content) || '';
        const title = document.title;
        return {
            content,
            title: (null == article ? void 0 : article.title) || title
        };
    }, READABILITY_SCRIPT);
    return (null == options ? void 0 : options.markdown) ? {
        title: extractionResult.title,
        content: toMarkdown(extractionResult.content)
    } : extractionResult;
};
const extractWithDefuddle = async (html, url, options)=>{
    const { title, content } = await Defuddle(html, url, options);
    return {
        title,
        content
    };
};
const extractContent = async (page)=>{
    const pageSourceHTML = await page.content();
    try {
        return await extractWithDefuddle(pageSourceHTML, page.url(), {
            markdown: true
        });
    } catch (e) {
        return await extractWithReadability(page, {
            markdown: true
        });
    }
};
export { extractContent, extractWithDefuddle, extractWithReadability };

//# sourceMappingURL=extract-content.mjs.map