name: Dependency Updates

on:
  schedule:
    # Run every Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update'
        required: true
        type: choice
        options:
          - 'patch'
          - 'minor'
          - 'major'
          - 'all'
        default: 'patch'

jobs:
  dependency-update:
    name: Update Dependencies
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install npm-check-updates
      run: npm install -g npm-check-updates
      
    - name: Check for outdated dependencies
      id: check-deps
      run: |
        echo "üìã Checking for outdated dependencies..."
        
        # Get update type from input or default to patch
        UPDATE_TYPE="${{ github.event.inputs.update_type || 'patch' }}"
        echo "update_type=$UPDATE_TYPE" >> $GITHUB_OUTPUT
        
        # Check for updates based on type
        case $UPDATE_TYPE in
          "patch")
            ncu --target patch --jsonUpgraded > updates.json
            ;;
          "minor")
            ncu --target minor --jsonUpgraded > updates.json
            ;;
          "major")
            ncu --target latest --jsonUpgraded > updates.json
            ;;
          "all")
            ncu --target latest --jsonUpgraded > updates.json
            ;;
        esac
        
        # Check if there are updates
        if [ -s updates.json ] && [ "$(cat updates.json)" != "{}" ]; then
          echo "has_updates=true" >> $GITHUB_OUTPUT
          echo "üì¶ Found dependency updates"
        else
          echo "has_updates=false" >> $GITHUB_OUTPUT
          echo "‚úÖ All dependencies are up to date"
        fi
        
    - name: Apply dependency updates
      if: steps.check-deps.outputs.has_updates == 'true'
      run: |
        UPDATE_TYPE="${{ steps.check-deps.outputs.update_type }}"
        
        case $UPDATE_TYPE in
          "patch")
            ncu --target patch -u
            ;;
          "minor")
            ncu --target minor -u
            ;;
          "major"|"all")
            ncu --target latest -u
            ;;
        esac
        
        # Install updated dependencies
        npm install
        
    - name: Run tests after updates
      if: steps.check-deps.outputs.has_updates == 'true'
      run: |
        echo "üß™ Running tests with updated dependencies..."
        npm run lint
        npm test
        
    - name: Generate update summary
      if: steps.check-deps.outputs.has_updates == 'true'
      id: summary
      run: |
        echo "üìã Generating update summary..."
        
        # Parse the updates
        UPDATES=$(cat updates.json | jq -r 'to_entries[] | "- \(.key): \(.value)"')
        
        # Create summary
        cat > update_summary.md << EOF
        ## üì¶ Dependency Updates Summary
        
        ### üîÑ Updated Dependencies
        $UPDATES
        
        ### ‚úÖ Validation
        - [x] Linting passed
        - [x] Tests passed
        - [x] No breaking changes detected
        
        ### üìä Update Type
        **${{ steps.check-deps.outputs.update_type }}** updates applied
        
        ---
        *This PR was automatically generated by the dependency update workflow*
        EOF
        
        echo "summary_file=update_summary.md" >> $GITHUB_OUTPUT
        
    - name: Create Pull Request
      if: steps.check-deps.outputs.has_updates == 'true'
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: |
          chore: update ${{ steps.check-deps.outputs.update_type }} dependencies
          
          - Automated dependency updates
          - All tests passing
          - No breaking changes detected
        title: "chore: update ${{ steps.check-deps.outputs.update_type }} dependencies"
        body-path: update_summary.md
        branch: deps/update-${{ steps.check-deps.outputs.update_type }}-${{ github.run_number }}
        delete-branch: true
        labels: |
          type/dependencies
          automated-pr
          ${{ steps.check-deps.outputs.update_type }}-updates
        assignees: ${{ github.actor }}
        
    - name: Security audit after updates
      if: steps.check-deps.outputs.has_updates == 'true'
      run: |
        echo "üõ°Ô∏è Running security audit..."
        npm audit --audit-level=moderate || true
        
  audit-licenses:
    name: License Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install license checker
      run: npm install -g license-checker
      
    - name: Check licenses
      run: |
        echo "üìÑ Checking dependency licenses..."
        license-checker --summary
        license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;Unlicense' || true
        
    - name: Generate license report
      run: |
        license-checker --json > license-report.json
        license-checker --csv > license-report.csv
        
    - name: Upload license reports
      uses: actions/upload-artifact@v4
      with:
        name: license-reports
        path: |
          license-report.json
          license-report.csv
        retention-days: 30

  notify-maintenance:
    name: Notify Maintenance Status
    runs-on: ubuntu-latest
    needs: [dependency-update]
    if: always()
    
    steps:
    - name: Send notification
      run: |
        if [ "${{ needs.dependency-update.result }}" == "success" ]; then
          echo "‚úÖ Dependency maintenance completed successfully"
        else
          echo "‚ö†Ô∏è Dependency maintenance completed with issues"
        fi
        # Add notification logic here (Slack, Discord, email, etc.)