name: PR Management

on:
  pull_request:
    types: [opened, edited, synchronize, ready_for_review]
  pull_request_target:
    types: [opened, edited, synchronize]

jobs:
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate PR title
      uses: amannn/action-semantic-pull-request@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        types: |
          feat
          fix
          docs
          style
          refactor
          perf
          test
          chore
          ci
        requireScope: false
        
    - name: Check PR size
      id: pr-size
      run: |
        # Get PR details
        PR_NUMBER=${{ github.event.pull_request.number }}
        ADDITIONS=$(gh pr view $PR_NUMBER --json additions --jq '.additions')
        DELETIONS=$(gh pr view $PR_NUMBER --json deletions --jq '.deletions')
        TOTAL_CHANGES=$((ADDITIONS + DELETIONS))
        
        echo "additions=$ADDITIONS" >> $GITHUB_OUTPUT
        echo "deletions=$DELETIONS" >> $GITHUB_OUTPUT
        echo "total=$TOTAL_CHANGES" >> $GITHUB_OUTPUT
        
        # Determine size category
        if [ $TOTAL_CHANGES -lt 50 ]; then
          echo "size=XS" >> $GITHUB_OUTPUT
        elif [ $TOTAL_CHANGES -lt 200 ]; then
          echo "size=S" >> $GITHUB_OUTPUT
        elif [ $TOTAL_CHANGES -lt 500 ]; then
          echo "size=M" >> $GITHUB_OUTPUT
        elif [ $TOTAL_CHANGES -lt 1000 ]; then
          echo "size=L" >> $GITHUB_OUTPUT
        else
          echo "size=XL" >> $GITHUB_OUTPUT
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Auto-label PR
      uses: actions/github-script@v7
      with:
        script: |
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          const labels = [];
          
          // Size labels
          const size = '${{ steps.pr-size.outputs.size }}';
          labels.push(`size/${size}`);
          
          // Type labels based on files changed
          const { data: files } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          const hasTests = files.some(f => f.filename.includes('test'));
          const hasDocs = files.some(f => f.filename.includes('README') || f.filename.includes('.md'));
          const hasConfig = files.some(f => f.filename.includes('config') || f.filename.includes('.json') || f.filename.includes('.yml'));
          const hasGitHubActions = files.some(f => f.filename.includes('.github/workflows'));
          const hasSource = files.some(f => f.filename.includes('src/'));
          
          if (hasTests) labels.push('type/tests');
          if (hasDocs) labels.push('type/documentation');
          if (hasConfig) labels.push('type/configuration');
          if (hasGitHubActions) labels.push('type/ci-cd');
          if (hasSource) labels.push('type/feature');
          
          // Draft status
          if (pr.draft) {
            labels.push('status/draft');
          } else {
            labels.push('status/ready-for-review');
          }
          
          // Apply labels
          await github.rest.issues.setLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            labels: labels
          });
          
    - name: Check for breaking changes
      run: |
        # Check commit messages for breaking changes
        if git log --oneline ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -i "breaking"; then
          echo "::warning::This PR may contain breaking changes"
          gh pr comment ${{ github.event.pull_request.number }} --body "⚠️ **Warning**: This PR may contain breaking changes. Please review carefully."
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Add PR status comment
      uses: actions/github-script@v7
      with:
        script: |
          const additions = '${{ steps.pr-size.outputs.additions }}';
          const deletions = '${{ steps.pr-size.outputs.deletions }}';
          const size = '${{ steps.pr-size.outputs.size }}';
          
          const body = `## 📊 PR Status Check
          
          ### 📈 Statistics
          - **Size**: ${size}
          - **Additions**: +${additions}
          - **Deletions**: -${deletions}
          
          ### ✅ Validation Status
          - [x] PR title follows semantic convention
          - [x] Auto-labels applied
          - [x] Size category assigned
          
          ---
          *This comment is automatically generated and updated*`;
          
          // Check if comment already exists
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          const existingComment = comments.find(comment => 
            comment.body.includes('## 📊 PR Status Check')
          );
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }