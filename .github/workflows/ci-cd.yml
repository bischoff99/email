name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'
  NODE_VERSION_MATRIX: '[18.x, 20.x]'

jobs:
  # Changed detection for optimized builds
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      src: ${{ steps.changes.outputs.src }}
      tests: ${{ steps.changes.outputs.tests }}
      deps: ${{ steps.changes.outputs.deps }}
      docker: ${{ steps.changes.outputs.docker }}
      docs: ${{ steps.changes.outputs.docs }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for changes
      uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          src:
            - 'src/**'
            - 'server.js'
            - 'instrument.js'
          tests:
            - 'tests/**'
            - 'jest.config.js'
          deps:
            - 'package*.json'
            - 'pnpm-lock.yaml'
          docker:
            - 'Dockerfile'
            - 'docker-compose*.yml'
            - '.dockerignore'
          docs:
            - '*.md'
            - 'docs/**'

  # Fast validation job for quick feedback
  quick-check:
    name: Quick Validation
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.tests == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies (cached)
      run: npm ci --prefer-offline --no-audit
      
    - name: Quick lint check
      run: npm run lint
      
    - name: Quick format check  
      run: npm run format:check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [changes, quick-check]
    if: always() && (needs.changes.outputs.src == 'true' || needs.changes.outputs.tests == 'true')
    
    strategy:
      matrix:
        node-version: ${{ fromJson(env.NODE_VERSION_MATRIX) }}
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies (cached)
      run: npm ci --prefer-offline --no-audit
      
    - name: Run unit tests
      run: npm test -- --passWithNoTests
      
    - name: Run test coverage
      run: npm run test:coverage
      if: matrix.node-version == env.NODE_VERSION
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.node-version == env.NODE_VERSION
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.deps == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies (cached)
      run: npm ci --prefer-offline --no-audit
      
    - name: Run security audit
      run: npm audit --audit-level=high
      
    - name: Check for vulnerabilities
      run: npm audit --audit-level=moderate

  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [changes, test, security]
    if: needs.changes.outputs.docker == 'true' || needs.changes.outputs.src == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image with cache
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: email-integration-server:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run -d --name test-container \
          -e NODE_ENV=production \
          -e EMAIL_USER=test@example.com \
          -e EMAIL_PASSWORD=test \
          -e API_KEYS=test-key \
          -e SECRET_KEY=test-secret-key \
          -p 3000:3000 \
          email-integration-server:test
        
        # Wait for container to start
        sleep 15
        
        # Test health endpoint with retry
        for i in {1..5}; do
          if curl -f http://localhost:3000/health; then
            echo "‚úÖ Health check passed"
            break
          fi
          echo "‚è≥ Waiting for service... (attempt $i/5)"
          sleep 5
        done
        
        # Cleanup
        docker stop test-container
        docker rm test-container

  build-matrix:
    name: Build Matrix Test
    runs-on: ${{ matrix.os }}
    needs: [changes]
    if: needs.changes.outputs.src == 'true'
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x, 20.x]
        exclude:
          # Reduce matrix size for faster builds
          - os: windows-latest
            node-version: 18.x
          - os: macos-latest  
            node-version: 18.x
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run basic tests
      run: npm test -- --passWithNoTests

  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance benchmarks
      run: |
        echo "üöÄ Running performance tests..."
        # Add performance testing commands here
        npm start &
        SERVER_PID=$!
        sleep 10
        
        # Basic load test
        npx autocannon -c 10 -d 30 http://localhost:3000/health
        
        kill $SERVER_PID

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Add staging deployment commands here
        echo "‚úÖ Staging deployment completed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security, docker, performance]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        # Add production deployment commands here
        echo "‚úÖ Production deployment completed"
        
    - name: Notify deployment
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Production deployment successful"
        else
          echo "‚ùå Production deployment failed"
        fi