name: Release Automation

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run full test suite
      run: |
        npm run lint
        npm run format:check
        npm run test:coverage
        npm run validate
        
    - name: Build application
      run: |
        echo "Building application..."
        # Add any build steps here if needed
        
    - name: Set version from input or tag
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -n "$LAST_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" HEAD)
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create Docker image
      run: |
        docker build -t email-integration-server:${{ steps.version.outputs.version }} .
        docker tag email-integration-server:${{ steps.version.outputs.version }} email-integration-server:latest
        
    - name: Save Docker image
      run: |
        docker save email-integration-server:${{ steps.version.outputs.version }} | gzip > email-server-${{ steps.version.outputs.version }}.tar.gz
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## ðŸš€ Release ${{ steps.version.outputs.version }}
          
          ### ðŸ“‹ Changes
          ${{ steps.changelog.outputs.changelog }}
          
          ### ðŸ“¦ Artifacts
          - Docker image: `email-integration-server:${{ steps.version.outputs.version }}`
          - Source code (zip)
          - Source code (tar.gz)
          
          ### ðŸ”§ Installation
          ```bash
          # Using Docker
          docker pull email-integration-server:${{ steps.version.outputs.version }}
          
          # Using npm
          git clone https://github.com/${{ github.repository }}.git
          cd email
          git checkout ${{ steps.version.outputs.version }}
          npm install
          npm start
          ```
          
          ### âœ… Verification
          All tests passed and quality gates met.
        draft: false
        prerelease: ${{ github.event.inputs.prerelease || false }}
        
    - name: Upload Docker image as release asset
      uses: actions/upload-artifact@v4
      with:
        name: docker-image-${{ steps.version.outputs.version }}
        path: email-server-${{ steps.version.outputs.version }}.tar.gz
        retention-days: 90

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: create-release
    if: "!contains(github.event.inputs.prerelease, 'true')"
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        # Add staging deployment commands here
        echo "âœ… Staging deployment completed"
        
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always()
    
    steps:
    - name: Notify team
      run: |
        echo "ðŸ“¢ Release notification sent"
        # Add notification logic here (Slack, Discord, etc.)